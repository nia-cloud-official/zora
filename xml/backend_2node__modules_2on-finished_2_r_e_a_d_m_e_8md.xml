<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="backend_2node__modules_2on-finished_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>on-finished</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[![NPM<sp/>Version][npm-version-image]][npm-url]</highlight></codeline>
<codeline><highlight class="normal">[![NPM<sp/>Downloads][npm-downloads-image]][npm-url]</highlight></codeline>
<codeline><highlight class="normal">[![Node.js<sp/>Version][node-image]][node-url]</highlight></codeline>
<codeline><highlight class="normal">[![Build<sp/>Status][ci-image]][ci-url]</highlight></codeline>
<codeline><highlight class="normal">[![Coverage<sp/>Status][coveralls-image]][coveralls-url]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Execute<sp/>a<sp/>callback<sp/>when<sp/>a<sp/>HTTP<sp/>request<sp/>closes,<sp/>finishes,<sp/>or<sp/>errors.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Install</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>a<sp/>[Node.js](https://nodejs.org/en/)<sp/>module<sp/>available<sp/>through<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[npm<sp/>registry](https://www.npmjs.com/).<sp/>Installation<sp/>is<sp/>done<sp/>using<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[`npm<sp/>install`<sp/>command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```sh</highlight></codeline>
<codeline><highlight class="normal">$<sp/>npm<sp/>install<sp/>on-finished</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>API</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>onFinished<sp/>=<sp/>require(&apos;on-finished&apos;)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>onFinished(res,<sp/>listener)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Attach<sp/>a<sp/>listener<sp/>to<sp/>listen<sp/>for<sp/>the<sp/>response<sp/>to<sp/>finish.<sp/>The<sp/>listener<sp/>will</highlight></codeline>
<codeline><highlight class="normal">be<sp/>invoked<sp/>only<sp/>once<sp/>when<sp/>the<sp/>response<sp/>finished.<sp/>If<sp/>the<sp/>response<sp/>finished</highlight></codeline>
<codeline><highlight class="normal">to<sp/>an<sp/>error,<sp/>the<sp/>first<sp/>argument<sp/>will<sp/>contain<sp/>the<sp/>error.<sp/>If<sp/>the<sp/>response</highlight></codeline>
<codeline><highlight class="normal">has<sp/>already<sp/>finished,<sp/>the<sp/>listener<sp/>will<sp/>be<sp/>invoked.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Listening<sp/>to<sp/>the<sp/>end<sp/>of<sp/>a<sp/>response<sp/>would<sp/>be<sp/>used<sp/>to<sp/>close<sp/>things<sp/>associated</highlight></codeline>
<codeline><highlight class="normal">with<sp/>the<sp/>response,<sp/>like<sp/>open<sp/>files.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Listener<sp/>is<sp/>invoked<sp/>as<sp/>`listener(err,<sp/>res)`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;!--<sp/>eslint-disable<sp/>handle-callback-err<sp/>--&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">onFinished(res,<sp/>function<sp/>(err,<sp/>res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>clean<sp/>up<sp/>open<sp/>fds,<sp/>etc.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>err<sp/>contains<sp/>the<sp/>error<sp/>if<sp/>request<sp/>error&apos;d</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>onFinished(req,<sp/>listener)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Attach<sp/>a<sp/>listener<sp/>to<sp/>listen<sp/>for<sp/>the<sp/>request<sp/>to<sp/>finish.<sp/>The<sp/>listener<sp/>will</highlight></codeline>
<codeline><highlight class="normal">be<sp/>invoked<sp/>only<sp/>once<sp/>when<sp/>the<sp/>request<sp/>finished.<sp/>If<sp/>the<sp/>request<sp/>finished</highlight></codeline>
<codeline><highlight class="normal">to<sp/>an<sp/>error,<sp/>the<sp/>first<sp/>argument<sp/>will<sp/>contain<sp/>the<sp/>error.<sp/>If<sp/>the<sp/>request</highlight></codeline>
<codeline><highlight class="normal">has<sp/>already<sp/>finished,<sp/>the<sp/>listener<sp/>will<sp/>be<sp/>invoked.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Listening<sp/>to<sp/>the<sp/>end<sp/>of<sp/>a<sp/>request<sp/>would<sp/>be<sp/>used<sp/>to<sp/>know<sp/>when<sp/>to<sp/>continue</highlight></codeline>
<codeline><highlight class="normal">after<sp/>reading<sp/>the<sp/>data.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Listener<sp/>is<sp/>invoked<sp/>as<sp/>`listener(err,<sp/>req)`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;!--<sp/>eslint-disable<sp/>handle-callback-err<sp/>--&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>data<sp/>=<sp/>&apos;&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">req.setEncoding(&apos;utf8&apos;)</highlight></codeline>
<codeline><highlight class="normal">req.on(&apos;data&apos;,<sp/>function<sp/>(str)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data<sp/>+=<sp/>str</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">onFinished(req,<sp/>function<sp/>(err,<sp/>req)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>data<sp/>is<sp/>read<sp/>unless<sp/>there<sp/>is<sp/>err</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>onFinished.isFinished(res)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Determine<sp/>if<sp/>`res`<sp/>is<sp/>already<sp/>finished.<sp/>This<sp/>would<sp/>be<sp/>useful<sp/>to<sp/>check<sp/>and</highlight></codeline>
<codeline><highlight class="normal">not<sp/>even<sp/>start<sp/>certain<sp/>operations<sp/>if<sp/>the<sp/>response<sp/>has<sp/>already<sp/>finished.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>onFinished.isFinished(req)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Determine<sp/>if<sp/>`req`<sp/>is<sp/>already<sp/>finished.<sp/>This<sp/>would<sp/>be<sp/>useful<sp/>to<sp/>check<sp/>and</highlight></codeline>
<codeline><highlight class="normal">not<sp/>even<sp/>start<sp/>certain<sp/>operations<sp/>if<sp/>the<sp/>request<sp/>has<sp/>already<sp/>finished.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Special<sp/>Node.js<sp/>requests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>HTTP<sp/>CONNECT<sp/>method</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>meaning<sp/>of<sp/>the<sp/>`CONNECT`<sp/>method<sp/>from<sp/>RFC<sp/>7231,<sp/>section<sp/>4.3.6:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>The<sp/>CONNECT<sp/>method<sp/>requests<sp/>that<sp/>the<sp/>recipient<sp/>establish<sp/>a<sp/>tunnel<sp/>to</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>the<sp/>destination<sp/>origin<sp/>server<sp/>identified<sp/>by<sp/>the<sp/>request-target<sp/>and,</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>if<sp/>successful,<sp/>thereafter<sp/>restrict<sp/>its<sp/>behavior<sp/>to<sp/>blind<sp/>forwarding</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>of<sp/>packets,<sp/>in<sp/>both<sp/>directions,<sp/>until<sp/>the<sp/>tunnel<sp/>is<sp/>closed.<sp/><sp/>Tunnels</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>are<sp/>commonly<sp/>used<sp/>to<sp/>create<sp/>an<sp/>end-to-end<sp/>virtual<sp/>connection,<sp/>through</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>one<sp/>or<sp/>more<sp/>proxies,<sp/>which<sp/>can<sp/>then<sp/>be<sp/>secured<sp/>using<sp/>TLS<sp/>(Transport</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Layer<sp/>Security,<sp/>[RFC5246]).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>Node.js,<sp/>these<sp/>request<sp/>objects<sp/>come<sp/>from<sp/>the<sp/>`&apos;connect&apos;`<sp/>event<sp/>on</highlight></codeline>
<codeline><highlight class="normal">the<sp/>HTTP<sp/>server.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>this<sp/>module<sp/>is<sp/>used<sp/>on<sp/>a<sp/>HTTP<sp/>`CONNECT`<sp/>request,<sp/>the<sp/>request<sp/>is</highlight></codeline>
<codeline><highlight class="normal">considered<sp/>&quot;finished&quot;<sp/>immediately,<sp/>**due<sp/>to<sp/>limitations<sp/>in<sp/>the<sp/>Node.js</highlight></codeline>
<codeline><highlight class="normal">interface**.<sp/>This<sp/>means<sp/>if<sp/>the<sp/>`CONNECT`<sp/>request<sp/>contains<sp/>a<sp/>request<sp/>entity,</highlight></codeline>
<codeline><highlight class="normal">the<sp/>request<sp/>will<sp/>be<sp/>considered<sp/>&quot;finished&quot;<sp/>even<sp/>before<sp/>it<sp/>has<sp/>been<sp/>read.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">There<sp/>is<sp/>no<sp/>such<sp/>thing<sp/>as<sp/>a<sp/>response<sp/>object<sp/>to<sp/>a<sp/>`CONNECT`<sp/>request<sp/>in</highlight></codeline>
<codeline><highlight class="normal">Node.js,<sp/>so<sp/>there<sp/>is<sp/>no<sp/>support<sp/>for<sp/>one.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>HTTP<sp/>Upgrade<sp/>request</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>meaning<sp/>of<sp/>the<sp/>`Upgrade`<sp/>header<sp/>from<sp/>RFC<sp/>7230,<sp/>section<sp/>6.1:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>The<sp/>&quot;Upgrade&quot;<sp/>header<sp/>field<sp/>is<sp/>intended<sp/>to<sp/>provide<sp/>a<sp/>simple<sp/>mechanism</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>for<sp/>transitioning<sp/>from<sp/>HTTP/1.1<sp/>to<sp/>some<sp/>other<sp/>protocol<sp/>on<sp/>the<sp/>same</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>connection.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>Node.js,<sp/>these<sp/>request<sp/>objects<sp/>come<sp/>from<sp/>the<sp/>`&apos;upgrade&apos;`<sp/>event<sp/>on</highlight></codeline>
<codeline><highlight class="normal">the<sp/>HTTP<sp/>server.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>this<sp/>module<sp/>is<sp/>used<sp/>on<sp/>a<sp/>HTTP<sp/>request<sp/>with<sp/>an<sp/>`Upgrade`<sp/>header,<sp/>the</highlight></codeline>
<codeline><highlight class="normal">request<sp/>is<sp/>considered<sp/>&quot;finished&quot;<sp/>immediately,<sp/>**due<sp/>to<sp/>limitations<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">Node.js<sp/>interface**.<sp/>This<sp/>means<sp/>if<sp/>the<sp/>`Upgrade`<sp/>request<sp/>contains<sp/>a<sp/>request</highlight></codeline>
<codeline><highlight class="normal">entity,<sp/>the<sp/>request<sp/>will<sp/>be<sp/>considered<sp/>&quot;finished&quot;<sp/>even<sp/>before<sp/>it<sp/>has<sp/>been</highlight></codeline>
<codeline><highlight class="normal">read.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">There<sp/>is<sp/>no<sp/>such<sp/>thing<sp/>as<sp/>a<sp/>response<sp/>object<sp/>to<sp/>a<sp/>`Upgrade`<sp/>request<sp/>in</highlight></codeline>
<codeline><highlight class="normal">Node.js,<sp/>so<sp/>there<sp/>is<sp/>no<sp/>support<sp/>for<sp/>one.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Example</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>following<sp/>code<sp/>ensures<sp/>that<sp/>file<sp/>descriptors<sp/>are<sp/>always<sp/>closed</highlight></codeline>
<codeline><highlight class="normal">once<sp/>the<sp/>response<sp/>finishes.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>destroy<sp/>=<sp/>require(&apos;destroy&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>fs<sp/>=<sp/>require(&apos;fs&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>http<sp/>=<sp/>require(&apos;http&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>onFinished<sp/>=<sp/>require(&apos;on-finished&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">http.createServer(function<sp/>onRequest<sp/>(req,<sp/>res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>var<sp/>stream<sp/>=<sp/>fs.createReadStream(&apos;package.json&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>stream.pipe(res)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>onFinished(res,<sp/>function<sp/>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>destroy(stream)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>})</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>License</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[MIT](LICENSE)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[ci-image]:<sp/>https://badgen.net/github/checks/jshttp/on-finished/master?label=ci</highlight></codeline>
<codeline><highlight class="normal">[ci-url]:<sp/>https://github.com/jshttp/on-finished/actions/workflows/ci.yml</highlight></codeline>
<codeline><highlight class="normal">[coveralls-image]:<sp/>https://badgen.net/coveralls/c/github/jshttp/on-finished/master</highlight></codeline>
<codeline><highlight class="normal">[coveralls-url]:<sp/>https://coveralls.io/r/jshttp/on-finished?branch=master</highlight></codeline>
<codeline><highlight class="normal">[node-image]:<sp/>https://badgen.net/npm/node/on-finished</highlight></codeline>
<codeline><highlight class="normal">[node-url]:<sp/>https://nodejs.org/en/download</highlight></codeline>
<codeline><highlight class="normal">[npm-downloads-image]:<sp/>https://badgen.net/npm/dm/on-finished</highlight></codeline>
<codeline><highlight class="normal">[npm-url]:<sp/>https://npmjs.org/package/on-finished</highlight></codeline>
<codeline><highlight class="normal">[npm-version-image]:<sp/>https://badgen.net/npm/v/on-finished</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/on-finished/README.md"/>
  </compounddef>
</doxygen>
