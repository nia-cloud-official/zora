<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2accepts_2_r_e_a_d_m_e</compoundname>
    <title>accepts</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md56"/> <ulink url="https://npmjs.org/package/accepts"><image type="html" name="https://badgen.net/npm/v/accepts" alt="NPM Version" inline="yes"></image>
</ulink> <ulink url="https://npmjs.org/package/accepts"><image type="html" name="https://badgen.net/npm/dm/accepts" alt="NPM Downloads" inline="yes"></image>
</ulink> <ulink url="https://nodejs.org/en/download"><image type="html" name="https://badgen.net/npm/node/accepts" alt="Node.js Version" inline="yes"></image>
</ulink> <ulink url="https://github.com/jshttp/accepts/actions/workflows/ci.yml"><image type="html" name="https://badgen.net/github/checks/jshttp/accepts/master?label=ci" alt="Build Status" inline="yes"></image>
</ulink> <ulink url="https://coveralls.io/r/jshttp/accepts?branch=master"><image type="html" name="https://badgen.net/coveralls/c/github/jshttp/accepts/master" alt="Test Coverage" inline="yes"></image>
</ulink></para>
<para>Higher level content negotiation based on <ulink url="https://www.npmjs.com/package/negotiator">negotiator</ulink>. Extracted from <ulink url="https://www.npmjs.com/package/koa">koa</ulink> for general use.</para>
<para>In addition to negotiator, it allows:</para>
<para><itemizedlist>
<listitem><para>Allows types as an array or arguments list, ie <lsquo/>([&apos;text/html<rsquo/>, &apos;application/json&apos;])<computeroutput> as well as</computeroutput>(&apos;text/html&apos;, &apos;application/json&apos;)<computeroutput>.</computeroutput></para>
</listitem><listitem><para><computeroutput>Allows type shorthands such as</computeroutput>json<computeroutput>.</computeroutput></para>
</listitem><listitem><para><computeroutput>Returns</computeroutput>false<computeroutput>when no types match</computeroutput></para>
</listitem><listitem><para><computeroutput>Treats non-existent headers as</computeroutput>*`</para>
</listitem></itemizedlist>
</para>
<sect1 id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md57">
<title>Installation</title><para>This is a <ulink url="https://nodejs.org/en/">Node.js</ulink> module available through the <ulink url="https://www.npmjs.com/">npm registry</ulink>. Installation is done using the <ulink url="https://docs.npmjs.com/getting-started/installing-npm-packages-locally"><computeroutput>npm install</computeroutput> command</ulink>:</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">$<sp/>npm<sp/>install<sp/>accepts</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md58">
<title>API</title><para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>accepts<sp/>=<sp/>require(&apos;accepts&apos;)</highlight></codeline>
</programlisting></para>
<sect2 id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md59">
<title>accepts(req)</title><para>Create a new <computeroutput>Accepts</computeroutput> object for the given <computeroutput>req</computeroutput>.</para>
<sect3 id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md60">
<title>.charset(charsets)</title><para>Return the first accepted charset. If nothing in <computeroutput>charsets</computeroutput> is accepted, then <computeroutput>false</computeroutput> is returned.</para>
</sect3>
<sect3 id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md61">
<title>.charsets()</title><para>Return the charsets that the request accepts, in the order of the client&apos;s preference (most preferred first).</para>
</sect3>
<sect3 id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md62">
<title>.encoding(encodings)</title><para>Return the first accepted encoding. If nothing in <computeroutput>encodings</computeroutput> is accepted, then <computeroutput>false</computeroutput> is returned.</para>
</sect3>
<sect3 id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md63">
<title>.encodings()</title><para>Return the encodings that the request accepts, in the order of the client&apos;s preference (most preferred first).</para>
</sect3>
<sect3 id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md64">
<title>.language(languages)</title><para>Return the first accepted language. If nothing in <computeroutput>languages</computeroutput> is accepted, then <computeroutput>false</computeroutput> is returned.</para>
</sect3>
<sect3 id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md65">
<title>.languages()</title><para>Return the languages that the request accepts, in the order of the client&apos;s preference (most preferred first).</para>
</sect3>
<sect3 id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md66">
<title>.type(types)</title><para>Return the first accepted type (and it is returned as the same text as what appears in the <computeroutput>types</computeroutput> array). If nothing in <computeroutput>types</computeroutput> is accepted, then <computeroutput>false</computeroutput> is returned.</para>
<para>The <computeroutput>types</computeroutput> array can contain full MIME types or file extensions. Any value that is not a full MIME types is passed to <lsquo/>require(&apos;mime-types<rsquo/>).lookup`.</para>
</sect3>
<sect3 id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md67">
<title>.types()</title><para>Return the types that the request accepts, in the order of the client&apos;s preference (most preferred first).</para>
</sect3>
</sect2>
</sect1>
<sect1 id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md68">
<title>Examples</title><sect2 id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md69">
<title>Simple type negotiation</title><para>This simple example shows how to use <computeroutput>accepts</computeroutput> to return a different typed respond body based on what the client wants to accept. The server lists it&apos;s preferences in order and will get back the best match between the client and server.</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>accepts<sp/>=<sp/>require(&apos;accepts&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>http<sp/>=<sp/>require(&apos;http&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">function<sp/>app<sp/>(req,<sp/>res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>var<sp/>accept<sp/>=<sp/>accepts(req)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>the<sp/>order<sp/>of<sp/>this<sp/>list<sp/>is<sp/>significant;<sp/>should<sp/>be<sp/>server<sp/>preferred<sp/>order</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>switch<sp/>(accept.type([&apos;json&apos;,<sp/>&apos;html&apos;]))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>&apos;json&apos;:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res.setHeader(&apos;Content-Type&apos;,<sp/>&apos;application/json&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res.write(&apos;{&quot;hello&quot;:&quot;world!&quot;}&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>&apos;html&apos;:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res.setHeader(&apos;Content-Type&apos;,<sp/>&apos;text/html&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res.write(&apos;&lt;b&gt;hello,<sp/>world!&lt;/b&gt;&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>fallback<sp/>is<sp/>text/plain,<sp/>so<sp/>no<sp/>need<sp/>to<sp/>specify<sp/>it<sp/>above</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res.setHeader(&apos;Content-Type&apos;,<sp/>&apos;text/plain&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res.write(&apos;hello,<sp/>world!&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>res.end()</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">http.createServer(app).listen(3000)</highlight></codeline>
</programlisting></para>
<para>You can test this out with the cURL program: <programlisting filename=".sh"><codeline><highlight class="normal">curl<sp/>-I<sp/>-H&apos;Accept:<sp/>text/html&apos;<sp/>http://localhost:3000/</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="md_backend_2node__modules_2accepts_2_r_e_a_d_m_e_1autotoc_md70">
<title>License</title><para>[MIT](LICENSE) </para>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/accepts/README.md"/>
  </compounddef>
</doxygen>
