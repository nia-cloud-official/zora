<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="namespacegyp_1_1generator_1_1gypsh" kind="namespace" language="Python">
    <compoundname>gyp::generator::gypsh</compoundname>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespacegyp_1_1generator_1_1gypsh_1a9488b95b778e766c0d71c67bbc66c284" prot="protected" static="no" mutable="no">
        <type>list</type>
        <definition>list gyp::generator::gypsh._generator_identity_variables</definition>
        <argsstring></argsstring>
        <name>_generator_identity_variables</name>
        <qualifiedname>gyp.generator.gypsh._generator_identity_variables</qualifiedname>
        <initializer>=  [
    &quot;EXECUTABLE_PREFIX&quot;,
    &quot;EXECUTABLE_SUFFIX&quot;,
    &quot;INTERMEDIATE_DIR&quot;,
    &quot;PRODUCT_DIR&quot;,
    &quot;RULE_INPUT_ROOT&quot;,
    &quot;RULE_INPUT_DIRNAME&quot;,
    &quot;RULE_INPUT_EXT&quot;,
    &quot;RULE_INPUT_NAME&quot;,
    &quot;RULE_INPUT_PATH&quot;,
    &quot;SHARED_INTERMEDIATE_DIR&quot;,
]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/generator/gypsh.py" line="23" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/generator/gypsh.py" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegyp_1_1generator_1_1gypsh_1a7465397af9ea9f9f63bb148690824e0f" prot="public" static="no" mutable="no">
        <type>dict</type>
        <definition>dict gyp::generator::gypsh.generator_default_variables</definition>
        <argsstring></argsstring>
        <name>generator_default_variables</name>
        <qualifiedname>gyp.generator.gypsh.generator_default_variables</qualifiedname>
        <initializer>=  {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/generator/gypsh.py" line="36" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/generator/gypsh.py" bodystart="36" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacegyp_1_1generator_1_1gypsh_1ae8ca7501fb99efb65276b37c4f415bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gyp.generator.gypsh.GenerateOutput</definition>
        <argsstring>(target_list, target_dicts, data, params)</argsstring>
        <name>GenerateOutput</name>
        <qualifiedname>gyp.generator.gypsh.GenerateOutput</qualifiedname>
        <param>
          <type>target_list</type>
          <defname>target_list</defname>
        </param>
        <param>
          <type>target_dicts</type>
          <defname>target_dicts</defname>
        </param>
        <param>
          <type>data</type>
          <defname>data</defname>
        </param>
        <param>
          <type>params</type>
          <defname>params</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/generator/gypsh.py" line="42" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/generator/gypsh.py" bodystart="42" bodyend="59"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>gypsh output module

gypsh is a GYP shell.  It&apos;s not really a generator per se.  All it does is
fire up an interactive Python session with a few local variables set to the
variables passed to the generator.  Like gypd, it&apos;s intended as a debugging
aid, to facilitate the exploration of .gyp structures after being processed
by the input module.

The expected usage is &quot;gyp -f gypsh -D OS=desired_os&quot;.
</verbatim> </para>
    </detaileddescription>
    <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/generator/gypsh.py" line="1" column="1"/>
  </compounddef>
</doxygen>
