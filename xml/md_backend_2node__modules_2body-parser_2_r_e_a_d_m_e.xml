<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e</compoundname>
    <title>body-parser</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md310"/> <ulink url="https://npmjs.org/package/body-parser"><image type="html" name="https://badgen.net/npm/v/body-parser" alt="NPM Version" inline="yes"></image>
</ulink> <ulink url="https://npmjs.org/package/body-parser"><image type="html" name="https://badgen.net/npm/dm/body-parser" alt="NPM Downloads" inline="yes"></image>
</ulink> <ulink url="https://github.com/expressjs/body-parser/actions/workflows/ci.yml"><image type="html" name="https://badgen.net/github/checks/expressjs/body-parser/master?label=ci" alt="Build Status" inline="yes"></image>
</ulink> <ulink url="https://coveralls.io/r/expressjs/body-parser?branch=master"><image type="html" name="https://badgen.net/coveralls/c/github/expressjs/body-parser/master" alt="Test Coverage" inline="yes"></image>
</ulink></para>
<para>Node.js body parsing middleware.</para>
<para>Parse incoming request bodies in a middleware before your handlers, available under the <computeroutput>req.body</computeroutput> property.</para>
<para><bold>Note</bold> As <computeroutput>req.body</computeroutput>&apos;s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, <computeroutput>req.body.foo.toString()</computeroutput> may fail in multiple ways, for example the <computeroutput>foo</computeroutput> property may not be there or may not be a string, and <computeroutput>toString</computeroutput> may not be a function and instead a string or other user input.</para>
<para><ulink url="https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/">Learn about the anatomy of an HTTP transaction in Node.js</ulink>.</para>
<para><emphasis>This does not handle multipart bodies</emphasis>, due to their complex and typically large nature. For multipart bodies, you may be interested in the following modules:</para>
<para><itemizedlist>
<listitem><para><ulink url="https://www.npmjs.org/package/busboy#readme">busboy</ulink> and <ulink url="https://www.npmjs.org/package/connect-busboy#readme">connect-busboy</ulink></para>
</listitem><listitem><para><ulink url="https://www.npmjs.org/package/multiparty#readme">multiparty</ulink> and <ulink url="https://www.npmjs.org/package/connect-multiparty#readme">connect-multiparty</ulink></para>
</listitem><listitem><para><ulink url="https://www.npmjs.org/package/formidable#readme">formidable</ulink></para>
</listitem><listitem><para><ulink url="https://www.npmjs.org/package/multer#readme">multer</ulink></para>
</listitem></itemizedlist>
</para>
<para>This module provides the following parsers:</para>
<para><itemizedlist>
<listitem><para>JSON body parser</para>
</listitem><listitem><para>Raw body parser</para>
</listitem><listitem><para>Text body parser</para>
</listitem><listitem><para>URL-encoded form body parser</para>
</listitem></itemizedlist>
</para>
<para>Other body parsers you might be interested in:</para>
<para><itemizedlist>
<listitem><para><ulink url="https://www.npmjs.org/package/body#readme">body</ulink></para>
</listitem><listitem><para><ulink url="https://www.npmjs.org/package/co-body#readme">co-body</ulink></para>
</listitem></itemizedlist>
</para>
<sect1 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md311">
<title>Installation</title><para><programlisting filename=".sh"><codeline><highlight class="normal">$<sp/>npm<sp/>install<sp/>body-parser</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md312">
<title>API</title><para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>bodyParser<sp/>=<sp/>require(&apos;body-parser&apos;)</highlight></codeline>
</programlisting></para>
<para>The <computeroutput>bodyParser</computeroutput> object exposes various factories to create middlewares. All middlewares will populate the <computeroutput>req.body</computeroutput> property with the parsed body when the <computeroutput>Content-Type</computeroutput> request header matches the <computeroutput>type</computeroutput> option, or an empty object (<computeroutput>{}</computeroutput>) if there was no body to parse, the <computeroutput>Content-Type</computeroutput> was not matched, or an error occurred.</para>
<para>The various errors returned by this module are described in the errors section.</para>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md313">
<title>bodyParser.json([options])</title><para>Returns middleware that only parses <computeroutput>json</computeroutput> and only looks at requests where the <computeroutput>Content-Type</computeroutput> header matches the <computeroutput>type</computeroutput> option. This parser accepts any Unicode encoding of the body and supports automatic inflation of <computeroutput>gzip</computeroutput> and <computeroutput>deflate</computeroutput> encodings.</para>
<para>A new <computeroutput>body</computeroutput> object containing the parsed data is populated on the <computeroutput>request</computeroutput> object after the middleware (i.e. <computeroutput>req.body</computeroutput>).</para>
<sect3 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md314">
<title>Options</title><para>The <computeroutput>json</computeroutput> function takes an optional <computeroutput>options</computeroutput> object that may contain any of the following keys:</para>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md315">
<title>inflate</title><para>When set to <computeroutput>true</computeroutput>, then deflated (compressed) bodies will be inflated; when <computeroutput>false</computeroutput>, deflated bodies are rejected. Defaults to <computeroutput>true</computeroutput>.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md316">
<title>limit</title><para>Controls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the <ulink url="https://www.npmjs.com/package/bytes">bytes</ulink> library for parsing. Defaults to <lsquo/>&apos;100kb<rsquo/>`.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md317">
<title>reviver</title><para>The <computeroutput>reviver</computeroutput> option is passed directly to <computeroutput>JSON.parse</computeroutput> as the second argument. You can find more information on this argument <ulink url="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter">in the MDN documentation about JSON.parse</ulink>.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md318">
<title>strict</title><para>When set to <computeroutput>true</computeroutput>, will only accept arrays and objects; when <computeroutput>false</computeroutput> will accept anything <computeroutput>JSON.parse</computeroutput> accepts. Defaults to <computeroutput>true</computeroutput>.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md319">
<title>type</title><para>The <computeroutput>type</computeroutput> option is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, <computeroutput>type</computeroutput> option is passed directly to the <ulink url="https://www.npmjs.org/package/type-is#readme">type-is</ulink> library and this can be an extension name (like <computeroutput>json</computeroutput>), a mime type (like <computeroutput>application/json</computeroutput>), or a mime type with a wildcard (like <computeroutput>*/*</computeroutput> or <computeroutput>*/json</computeroutput>). If a function, the <computeroutput>type</computeroutput> option is called as <computeroutput>fn(req)</computeroutput> and the request is parsed if it returns a truthy value. Defaults to <computeroutput>application/json</computeroutput>.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md320">
<title>verify</title><para>The <computeroutput>verify</computeroutput> option, if supplied, is called as <computeroutput>verify(req, res, buf, encoding)</computeroutput>, where <computeroutput>buf</computeroutput> is a <computeroutput>Buffer</computeroutput> of the raw request body and <computeroutput>encoding</computeroutput> is the encoding of the request. The parsing can be aborted by throwing an error.</para>
</sect4>
</sect3>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md321">
<title>bodyParser.raw([options])</title><para>Returns middleware that parses all bodies as a <computeroutput>Buffer</computeroutput> and only looks at requests where the <computeroutput>Content-Type</computeroutput> header matches the <computeroutput>type</computeroutput> option. This parser supports automatic inflation of <computeroutput>gzip</computeroutput> and <computeroutput>deflate</computeroutput> encodings.</para>
<para>A new <computeroutput>body</computeroutput> object containing the parsed data is populated on the <computeroutput>request</computeroutput> object after the middleware (i.e. <computeroutput>req.body</computeroutput>). This will be a <computeroutput>Buffer</computeroutput> object of the body.</para>
<sect3 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md322">
<title>Options</title><para>The <computeroutput>raw</computeroutput> function takes an optional <computeroutput>options</computeroutput> object that may contain any of the following keys:</para>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md323">
<title>inflate</title><para>When set to <computeroutput>true</computeroutput>, then deflated (compressed) bodies will be inflated; when <computeroutput>false</computeroutput>, deflated bodies are rejected. Defaults to <computeroutput>true</computeroutput>.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md324">
<title>limit</title><para>Controls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the <ulink url="https://www.npmjs.com/package/bytes">bytes</ulink> library for parsing. Defaults to <lsquo/>&apos;100kb<rsquo/>`.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md325">
<title>type</title><para>The <computeroutput>type</computeroutput> option is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, <computeroutput>type</computeroutput> option is passed directly to the <ulink url="https://www.npmjs.org/package/type-is#readme">type-is</ulink> library and this can be an extension name (like <computeroutput>bin</computeroutput>), a mime type (like <computeroutput>application/octet-stream</computeroutput>), or a mime type with a wildcard (like <computeroutput>*/*</computeroutput> or <computeroutput>application/*</computeroutput>). If a function, the <computeroutput>type</computeroutput> option is called as <computeroutput>fn(req)</computeroutput> and the request is parsed if it returns a truthy value. Defaults to <computeroutput>application/octet-stream</computeroutput>.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md326">
<title>verify</title><para>The <computeroutput>verify</computeroutput> option, if supplied, is called as <computeroutput>verify(req, res, buf, encoding)</computeroutput>, where <computeroutput>buf</computeroutput> is a <computeroutput>Buffer</computeroutput> of the raw request body and <computeroutput>encoding</computeroutput> is the encoding of the request. The parsing can be aborted by throwing an error.</para>
</sect4>
</sect3>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md327">
<title>bodyParser.text([options])</title><para>Returns middleware that parses all bodies as a string and only looks at requests where the <computeroutput>Content-Type</computeroutput> header matches the <computeroutput>type</computeroutput> option. This parser supports automatic inflation of <computeroutput>gzip</computeroutput> and <computeroutput>deflate</computeroutput> encodings.</para>
<para>A new <computeroutput>body</computeroutput> string containing the parsed data is populated on the <computeroutput>request</computeroutput> object after the middleware (i.e. <computeroutput>req.body</computeroutput>). This will be a string of the body.</para>
<sect3 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md328">
<title>Options</title><para>The <computeroutput>text</computeroutput> function takes an optional <computeroutput>options</computeroutput> object that may contain any of the following keys:</para>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md329">
<title>defaultCharset</title><para>Specify the default character set for the text content if the charset is not specified in the <computeroutput>Content-Type</computeroutput> header of the request. Defaults to <computeroutput>utf-8</computeroutput>.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md330">
<title>inflate</title><para>When set to <computeroutput>true</computeroutput>, then deflated (compressed) bodies will be inflated; when <computeroutput>false</computeroutput>, deflated bodies are rejected. Defaults to <computeroutput>true</computeroutput>.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md331">
<title>limit</title><para>Controls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the <ulink url="https://www.npmjs.com/package/bytes">bytes</ulink> library for parsing. Defaults to <lsquo/>&apos;100kb<rsquo/>`.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md332">
<title>type</title><para>The <computeroutput>type</computeroutput> option is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, <computeroutput>type</computeroutput> option is passed directly to the <ulink url="https://www.npmjs.org/package/type-is#readme">type-is</ulink> library and this can be an extension name (like <computeroutput>txt</computeroutput>), a mime type (like <computeroutput>text/plain</computeroutput>), or a mime type with a wildcard (like <computeroutput>*/*</computeroutput> or <computeroutput>text/*</computeroutput>). If a function, the <computeroutput>type</computeroutput> option is called as <computeroutput>fn(req)</computeroutput> and the request is parsed if it returns a truthy value. Defaults to <computeroutput>text/plain</computeroutput>.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md333">
<title>verify</title><para>The <computeroutput>verify</computeroutput> option, if supplied, is called as <computeroutput>verify(req, res, buf, encoding)</computeroutput>, where <computeroutput>buf</computeroutput> is a <computeroutput>Buffer</computeroutput> of the raw request body and <computeroutput>encoding</computeroutput> is the encoding of the request. The parsing can be aborted by throwing an error.</para>
</sect4>
</sect3>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md334">
<title>bodyParser.urlencoded([options])</title><para>Returns middleware that only parses <computeroutput>urlencoded</computeroutput> bodies and only looks at requests where the <computeroutput>Content-Type</computeroutput> header matches the <computeroutput>type</computeroutput> option. This parser accepts only UTF-8 encoding of the body and supports automatic inflation of <computeroutput>gzip</computeroutput> and <computeroutput>deflate</computeroutput> encodings.</para>
<para>A new <computeroutput>body</computeroutput> object containing the parsed data is populated on the <computeroutput>request</computeroutput> object after the middleware (i.e. <computeroutput>req.body</computeroutput>). This object will contain key-value pairs, where the value can be a string or array (when <computeroutput>extended</computeroutput> is <computeroutput>false</computeroutput>), or any type (when <computeroutput>extended</computeroutput> is <computeroutput>true</computeroutput>).</para>
<sect3 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md335">
<title>Options</title><para>The <computeroutput>urlencoded</computeroutput> function takes an optional <computeroutput>options</computeroutput> object that may contain any of the following keys:</para>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md336">
<title>extended</title><para>The <computeroutput>extended</computeroutput> option allows to choose between parsing the URL-encoded data with the <computeroutput>querystring</computeroutput> library (when <computeroutput>false</computeroutput>) or the <computeroutput>qs</computeroutput> library (when <computeroutput>true</computeroutput>). The &quot;extended&quot; syntax allows for rich objects and arrays to be encoded into the URL-encoded format, allowing for a JSON-like experience with URL-encoded. For more information, please <ulink url="https://www.npmjs.org/package/qs#readme">see the qs library</ulink>.</para>
<para>Defaults to <computeroutput>true</computeroutput>, but using the default has been deprecated. Please research into the difference between <computeroutput>qs</computeroutput> and <computeroutput>querystring</computeroutput> and choose the appropriate setting.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md337">
<title>inflate</title><para>When set to <computeroutput>true</computeroutput>, then deflated (compressed) bodies will be inflated; when <computeroutput>false</computeroutput>, deflated bodies are rejected. Defaults to <computeroutput>true</computeroutput>.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md338">
<title>limit</title><para>Controls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the <ulink url="https://www.npmjs.com/package/bytes">bytes</ulink> library for parsing. Defaults to <lsquo/>&apos;100kb<rsquo/>`.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md339">
<title>parameterLimit</title><para>The <computeroutput>parameterLimit</computeroutput> option controls the maximum number of parameters that are allowed in the URL-encoded data. If a request contains more parameters than this value, a 413 will be returned to the client. Defaults to <computeroutput>1000</computeroutput>.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md340">
<title>type</title><para>The <computeroutput>type</computeroutput> option is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, <computeroutput>type</computeroutput> option is passed directly to the <ulink url="https://www.npmjs.org/package/type-is#readme">type-is</ulink> library and this can be an extension name (like <computeroutput>urlencoded</computeroutput>), a mime type (like <computeroutput>application/x-www-form-urlencoded</computeroutput>), or a mime type with a wildcard (like <computeroutput>*/x-www-form-urlencoded</computeroutput>). If a function, the <computeroutput>type</computeroutput> option is called as <computeroutput>fn(req)</computeroutput> and the request is parsed if it returns a truthy value. Defaults to <computeroutput>application/x-www-form-urlencoded</computeroutput>.</para>
</sect4>
<sect4 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md341">
<title>verify</title><para>The <computeroutput>verify</computeroutput> option, if supplied, is called as <computeroutput>verify(req, res, buf, encoding)</computeroutput>, where <computeroutput>buf</computeroutput> is a <computeroutput>Buffer</computeroutput> of the raw request body and <computeroutput>encoding</computeroutput> is the encoding of the request. The parsing can be aborted by throwing an error.</para>
</sect4>
</sect3>
</sect2>
</sect1>
<sect1 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md342">
<title>Errors</title><para>The middlewares provided by this module create errors using the <ulink url="https://www.npmjs.com/package/http-errors"><computeroutput>http-errors</computeroutput> module</ulink>. The errors will typically have a <computeroutput>status</computeroutput>/<computeroutput>statusCode</computeroutput> property that contains the suggested HTTP response code, an <computeroutput>expose</computeroutput> property to determine if the <computeroutput>message</computeroutput> property should be displayed to the client, a <computeroutput>type</computeroutput> property to determine the type of error without matching against the <computeroutput>message</computeroutput>, and a <computeroutput>body</computeroutput> property containing the read body, if available.</para>
<para>The following are the common errors created, though any error can come through for various reasons.</para>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md343">
<title>content encoding unsupported</title><para>This error will occur when the request had a <computeroutput>Content-Encoding</computeroutput> header that contained an encoding but the &quot;inflation&quot; option was set to <computeroutput>false</computeroutput>. The <computeroutput>status</computeroutput> property is set to <computeroutput>415</computeroutput>, the <computeroutput>type</computeroutput> property is set to <lsquo/>&apos;encoding.unsupported<rsquo/><computeroutput>, and the</computeroutput>charset` property will be set to the encoding that is unsupported.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md344">
<title>entity parse failed</title><para>This error will occur when the request contained an entity that could not be parsed by the middleware. The <computeroutput>status</computeroutput> property is set to <computeroutput>400</computeroutput>, the <computeroutput>type</computeroutput> property is set to <lsquo/>&apos;entity.parse.failed<rsquo/><computeroutput>, and the</computeroutput>body` property is set to the entity value that failed parsing.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md345">
<title>entity verify failed</title><para>This error will occur when the request contained an entity that could not be failed verification by the defined <computeroutput>verify</computeroutput> option. The <computeroutput>status</computeroutput> property is set to <computeroutput>403</computeroutput>, the <computeroutput>type</computeroutput> property is set to <lsquo/>&apos;entity.verify.failed<rsquo/><computeroutput>, and the </computeroutput>body` property is set to the entity value that failed verification.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md346">
<title>request aborted</title><para>This error will occur when the request is aborted by the client before reading the body has finished. The <computeroutput>received</computeroutput> property will be set to the number of bytes received before the request was aborted and the <computeroutput>expected</computeroutput> property is set to the number of expected bytes. The <computeroutput>status</computeroutput> property is set to <computeroutput>400</computeroutput> and <computeroutput>type</computeroutput> property is set to <lsquo/>&apos;request.aborted<rsquo/>`.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md347">
<title>request entity too large</title><para>This error will occur when the request body&apos;s size is larger than the &quot;limit&quot; option. The <computeroutput>limit</computeroutput> property will be set to the byte limit and the <computeroutput>length</computeroutput> property will be set to the request body&apos;s length. The <computeroutput>status</computeroutput> property is set to <computeroutput>413</computeroutput> and the <computeroutput>type</computeroutput> property is set to <lsquo/>&apos;entity.too.large<rsquo/>`.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md348">
<title>request size did not match content length</title><para>This error will occur when the request&apos;s length did not match the length from the <computeroutput>Content-Length</computeroutput> header. This typically occurs when the request is malformed, typically when the <computeroutput>Content-Length</computeroutput> header was calculated based on characters instead of bytes. The <computeroutput>status</computeroutput> property is set to <computeroutput>400</computeroutput> and the <computeroutput>type</computeroutput> property is set to <lsquo/>&apos;request.size.invalid<rsquo/>`.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md349">
<title>stream encoding should not be set</title><para>This error will occur when something called the <computeroutput>req.setEncoding</computeroutput> method prior to this middleware. This module operates directly on bytes only and you cannot call <computeroutput>req.setEncoding</computeroutput> when using this module. The <computeroutput>status</computeroutput> property is set to <computeroutput>500</computeroutput> and the <computeroutput>type</computeroutput> property is set to <lsquo/>&apos;stream.encoding.set<rsquo/>`.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md350">
<title>stream is not readable</title><para>This error will occur when the request is no longer readable when this middleware attempts to read it. This typically means something other than a middleware from this module read the request body already and the middleware was also configured to read the same request. The <computeroutput>status</computeroutput> property is set to <computeroutput>500</computeroutput> and the <computeroutput>type</computeroutput> property is set to <lsquo/>&apos;stream.not.readable<rsquo/>`.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md351">
<title>too many parameters</title><para>This error will occur when the content of the request exceeds the configured <computeroutput>parameterLimit</computeroutput> for the <computeroutput>urlencoded</computeroutput> parser. The <computeroutput>status</computeroutput> property is set to <computeroutput>413</computeroutput> and the <computeroutput>type</computeroutput> property is set to <lsquo/>&apos;parameters.too.many<rsquo/>`.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md352">
<title>unsupported charset &quot;BOGUS&quot;</title><para>This error will occur when the request had a charset parameter in the <computeroutput>Content-Type</computeroutput> header, but the <computeroutput>iconv-lite</computeroutput> module does not support it OR the parser does not support it. The charset is contained in the message as well as in the <computeroutput>charset</computeroutput> property. The <computeroutput>status</computeroutput> property is set to <computeroutput>415</computeroutput>, the <computeroutput>type</computeroutput> property is set to <lsquo/>&apos;charset.unsupported<rsquo/><computeroutput>, and the</computeroutput>charset` property is set to the charset that is unsupported.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md353">
<title>unsupported content encoding &quot;bogus&quot;</title><para>This error will occur when the request had a <computeroutput>Content-Encoding</computeroutput> header that contained an unsupported encoding. The encoding is contained in the message as well as in the <computeroutput>encoding</computeroutput> property. The <computeroutput>status</computeroutput> property is set to <computeroutput>415</computeroutput>, the <computeroutput>type</computeroutput> property is set to <lsquo/>&apos;encoding.unsupported<rsquo/><computeroutput>, and the</computeroutput>encoding` property is set to the encoding that is unsupported.</para>
</sect2>
</sect1>
<sect1 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md354">
<title>Examples</title><sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md355">
<title>Express/Connect top-level generic</title><para>This example demonstrates adding a generic JSON and URL-encoded parser as a top-level middleware, which will parse the bodies of all incoming requests. This is the simplest setup.</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>express<sp/>=<sp/>require(&apos;express&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>bodyParser<sp/>=<sp/>require(&apos;body-parser&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>app<sp/>=<sp/>express()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>parse<sp/>application/x-www-form-urlencoded</highlight></codeline>
<codeline><highlight class="normal">app.use(bodyParser.urlencoded({<sp/>extended:<sp/>false<sp/>}))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>parse<sp/>application/json</highlight></codeline>
<codeline><highlight class="normal">app.use(bodyParser.json())</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">app.use(function<sp/>(req,<sp/>res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res.setHeader(&apos;Content-Type&apos;,<sp/>&apos;text/plain&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res.write(&apos;you<sp/>posted:\n&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res.end(JSON.stringify(req.body,<sp/>null,<sp/>2))</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md356">
<title>Express route-specific</title><para>This example demonstrates adding body parsers specifically to the routes that need them. In general, this is the most recommended way to use body-parser with Express.</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>express<sp/>=<sp/>require(&apos;express&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>bodyParser<sp/>=<sp/>require(&apos;body-parser&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>app<sp/>=<sp/>express()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>create<sp/>application/json<sp/>parser</highlight></codeline>
<codeline><highlight class="normal">var<sp/>jsonParser<sp/>=<sp/>bodyParser.json()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>create<sp/>application/x-www-form-urlencoded<sp/>parser</highlight></codeline>
<codeline><highlight class="normal">var<sp/>urlencodedParser<sp/>=<sp/>bodyParser.urlencoded({<sp/>extended:<sp/>false<sp/>})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>POST<sp/>/login<sp/>gets<sp/>urlencoded<sp/>bodies</highlight></codeline>
<codeline><highlight class="normal">app.post(&apos;/login&apos;,<sp/>urlencodedParser,<sp/>function<sp/>(req,<sp/>res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res.send(&apos;welcome,<sp/>&apos;<sp/>+<sp/>req.body.username)</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>POST<sp/>/api/users<sp/>gets<sp/>JSON<sp/>bodies</highlight></codeline>
<codeline><highlight class="normal">app.post(&apos;/api/users&apos;,<sp/>jsonParser,<sp/>function<sp/>(req,<sp/>res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>create<sp/>user<sp/>in<sp/>req.body</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md357">
<title>Change accepted type for parsers</title><para>All the parsers accept a <computeroutput>type</computeroutput> option which allows you to change the <computeroutput>Content-Type</computeroutput> that the middleware will parse.</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>express<sp/>=<sp/>require(&apos;express&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>bodyParser<sp/>=<sp/>require(&apos;body-parser&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>app<sp/>=<sp/>express()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>parse<sp/>various<sp/>different<sp/>custom<sp/>JSON<sp/>types<sp/>as<sp/>JSON</highlight></codeline>
<codeline><highlight class="normal">app.use(bodyParser.json({<sp/>type:<sp/>&apos;application/*+json&apos;<sp/>}))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>parse<sp/>some<sp/>custom<sp/>thing<sp/>into<sp/>a<sp/>Buffer</highlight></codeline>
<codeline><highlight class="normal">app.use(bodyParser.raw({<sp/>type:<sp/>&apos;application/vnd.custom-type&apos;<sp/>}))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>parse<sp/>an<sp/>HTML<sp/>body<sp/>into<sp/>a<sp/>string</highlight></codeline>
<codeline><highlight class="normal">app.use(bodyParser.text({<sp/>type:<sp/>&apos;text/html&apos;<sp/>}))</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e_1autotoc_md358">
<title>License</title><para>[MIT](LICENSE) </para>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/body-parser/README.md"/>
  </compounddef>
</doxygen>
