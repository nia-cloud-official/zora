<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2fs-minipass_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2fs-minipass_2_r_e_a_d_m_e</compoundname>
    <title>fs-minipass</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2fs-minipass_2_r_e_a_d_m_e_1autotoc_md1318"/> Filesystem streams based on <ulink url="http://npm.im/minipass">minipass</ulink>.</para>
<para>4 classes are exported:</para>
<para><itemizedlist>
<listitem><para>ReadStream</para>
</listitem><listitem><para>ReadStreamSync</para>
</listitem><listitem><para>WriteStream</para>
</listitem><listitem><para>WriteStreamSync</para>
</listitem></itemizedlist>
</para>
<para>When using <computeroutput>ReadStreamSync</computeroutput>, all of the data is made available immediately upon consuming the stream. Nothing is buffered in memory when the stream is constructed. If the stream is piped to a writer, then it will synchronously <computeroutput>read()</computeroutput> and emit data into the writer as fast as the writer can consume it. (That is, it will respect backpressure.) If you call <computeroutput>stream.read()</computeroutput> then it will read the entire file and return the contents.</para>
<para>When using <computeroutput>WriteStreamSync</computeroutput>, every write is flushed to the file synchronously. If your writes all come in a single tick, then it&apos;ll write it all out in a single tick. It&apos;s as synchronous as you are.</para>
<para>The async versions work much like their node builtin counterparts, with the exception of introducing significantly less Stream machinery overhead.</para>
<sect1 id="md_backend_2node__modules_2fs-minipass_2_r_e_a_d_m_e_1autotoc_md1319">
<title>USAGE</title><para>It&apos;s just streams, you pipe them or read() them or write() to them.</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">const<sp/>fsm<sp/>=<sp/>require(&apos;fs-minipass&apos;)</highlight></codeline>
<codeline><highlight class="normal">const<sp/>readStream<sp/>=<sp/>new<sp/>fsm.ReadStream(&apos;file.txt&apos;)</highlight></codeline>
<codeline><highlight class="normal">const<sp/>writeStream<sp/>=<sp/>new<sp/>fsm.WriteStream(&apos;output.txt&apos;)</highlight></codeline>
<codeline><highlight class="normal">writeStream.write(&apos;some<sp/>file<sp/>header<sp/>or<sp/>whatever\n&apos;)</highlight></codeline>
<codeline><highlight class="normal">readStream.pipe(writeStream)</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2fs-minipass_2_r_e_a_d_m_e_1autotoc_md1320">
<title>ReadStream(path, options)</title><para>Path string is required, but somewhat irrelevant if an open file descriptor is passed in as an option.</para>
<para>Options:</para>
<para><itemizedlist>
<listitem><para><computeroutput>fd</computeroutput> Pass in a numeric file descriptor, if the file is already open.</para>
</listitem><listitem><para><computeroutput>readSize</computeroutput> The size of reads to do, defaults to 16MB</para>
</listitem><listitem><para><computeroutput>size</computeroutput> The size of the file, if known. Prevents zero-byte read() call at the end.</para>
</listitem><listitem><para><computeroutput>autoClose</computeroutput> Set to <computeroutput>false</computeroutput> to prevent the file descriptor from being closed when the file is done being read.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_backend_2node__modules_2fs-minipass_2_r_e_a_d_m_e_1autotoc_md1321">
<title>WriteStream(path, options)</title><para>Path string is required, but somewhat irrelevant if an open file descriptor is passed in as an option.</para>
<para>Options:</para>
<para><itemizedlist>
<listitem><para><computeroutput>fd</computeroutput> Pass in a numeric file descriptor, if the file is already open.</para>
</listitem><listitem><para><computeroutput>mode</computeroutput> The mode to create the file with. Defaults to <computeroutput>0o666</computeroutput>.</para>
</listitem><listitem><para><computeroutput>start</computeroutput> The position in the file to start reading. If not specified, then the file will start writing at position zero, and be truncated by default.</para>
</listitem><listitem><para><computeroutput>autoClose</computeroutput> Set to <computeroutput>false</computeroutput> to prevent the file descriptor from being closed when the stream is ended.</para>
</listitem><listitem><para><computeroutput>flags</computeroutput> Flags to use when opening the file. Irrelevant if <computeroutput>fd</computeroutput> is passed in, since file won&apos;t be opened in that case. Defaults to <lsquo/>&apos;a<rsquo/><computeroutput>if a</computeroutput>pos<computeroutput>is specified, or</computeroutput>&apos;w&apos;` otherwise. </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/fs-minipass/README.md"/>
  </compounddef>
</doxygen>
