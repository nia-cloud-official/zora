<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="backend_2node__modules_2console-control-strings_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Console<sp/>Control<sp/>Strings</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>library<sp/>of<sp/>cross-platform<sp/>tested<sp/>terminal/console<sp/>command<sp/>strings<sp/>for</highlight></codeline>
<codeline><highlight class="normal">doing<sp/>things<sp/>like<sp/>color<sp/>and<sp/>cursor<sp/>positioning.<sp/><sp/>This<sp/>is<sp/>a<sp/>subset<sp/>of<sp/>both</highlight></codeline>
<codeline><highlight class="normal">ansi<sp/>and<sp/>vt100.<sp/><sp/>All<sp/>control<sp/>codes<sp/>included<sp/>work<sp/>on<sp/>both<sp/>Windows<sp/>&amp;<sp/>Unix-like</highlight></codeline>
<codeline><highlight class="normal">OSes,<sp/>except<sp/>where<sp/>noted.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Usage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>consoleControl<sp/>=<sp/>require(&apos;console-control-strings&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">console.log(consoleControl.color(&apos;blue&apos;,&apos;bgRed&apos;,<sp/>&apos;bold&apos;)<sp/>+<sp/>&apos;hi<sp/>there&apos;<sp/>+<sp/>consoleControl.color(&apos;reset&apos;))</highlight></codeline>
<codeline><highlight class="normal">process.stdout.write(consoleControl.goto(75,<sp/>10))</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Why<sp/>Another?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">There<sp/>are<sp/>tons<sp/>of<sp/>libraries<sp/>similar<sp/>to<sp/>this<sp/>one.<sp/><sp/>I<sp/>wanted<sp/>one<sp/>that<sp/>was:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>Very<sp/>clear<sp/>about<sp/>compatibility<sp/>goals.</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>Could<sp/>emit,<sp/>for<sp/>instance,<sp/>a<sp/>start<sp/>color<sp/>code<sp/>without<sp/>an<sp/>end<sp/>one.</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>Returned<sp/>strings<sp/>w/o<sp/>writing<sp/>to<sp/>streams.</highlight></codeline>
<codeline><highlight class="normal">4.<sp/>Was<sp/>not<sp/>weighed<sp/>down<sp/>with<sp/>other<sp/>unrelated<sp/>baggage.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Functions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.up(_num<sp/>=<sp/>1_)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>escape<sp/>sequence<sp/>to<sp/>move<sp/>_num_<sp/>lines<sp/>up.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.down(_num<sp/>=<sp/>1_)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>escape<sp/>sequence<sp/>to<sp/>move<sp/>_num_<sp/>lines<sp/>down.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.forward(_num<sp/>=<sp/>1_)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>escape<sp/>sequence<sp/>to<sp/>move<sp/>_num_<sp/>lines<sp/>righ.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.back(_num<sp/>=<sp/>1_)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>escape<sp/>sequence<sp/>to<sp/>move<sp/>_num_<sp/>lines<sp/>left.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.nextLine(_num<sp/>=<sp/>1_)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>escape<sp/>sequence<sp/>to<sp/>move<sp/>_num_<sp/>lines<sp/>down<sp/>and<sp/>to<sp/>the<sp/>beginning<sp/>of</highlight></codeline>
<codeline><highlight class="normal">the<sp/>line.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.previousLine(_num<sp/>=<sp/>1_)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>escape<sp/>sequence<sp/>to<sp/>move<sp/>_num_<sp/>lines<sp/>up<sp/>and<sp/>to<sp/>the<sp/>beginning<sp/>of</highlight></codeline>
<codeline><highlight class="normal">the<sp/>line.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.eraseData()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>escape<sp/>sequence<sp/>to<sp/>erase<sp/>everything<sp/>from<sp/>the<sp/>current<sp/>cursor</highlight></codeline>
<codeline><highlight class="normal">position<sp/>to<sp/>the<sp/>bottom<sp/>right<sp/>of<sp/>the<sp/>screen.<sp/><sp/>This<sp/>is<sp/>line<sp/>based,<sp/>so<sp/>it</highlight></codeline>
<codeline><highlight class="normal">erases<sp/>the<sp/>remainder<sp/>of<sp/>the<sp/>current<sp/>line<sp/>and<sp/>all<sp/>following<sp/>lines.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.eraseLine()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>escape<sp/>sequence<sp/>to<sp/>erase<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>current<sp/>line.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.goto(_x_,<sp/>_y_)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>escape<sp/>sequence<sp/>to<sp/>move<sp/>the<sp/>cursor<sp/>to<sp/>the<sp/>designated<sp/>position.<sp/></highlight></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>the<sp/>origin<sp/>is<sp/>_1,<sp/>1_<sp/>not<sp/>_0,<sp/>0_.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.gotoSOL()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>escape<sp/>sequence<sp/>to<sp/>move<sp/>the<sp/>cursor<sp/>to<sp/>the<sp/>beginning<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal">current<sp/>line.<sp/>(That<sp/>is,<sp/>it<sp/>returns<sp/>a<sp/>carriage<sp/>return,<sp/>`\r`.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.beep()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>escape<sp/>sequence<sp/>to<sp/>cause<sp/>the<sp/>termianl<sp/>to<sp/>beep.<sp/><sp/>(That<sp/>is,<sp/>it</highlight></codeline>
<codeline><highlight class="normal">returns<sp/>unicode<sp/>character<sp/>`\x0007`,<sp/>a<sp/>Control-G.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.hideCursor()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>escape<sp/>sequence<sp/>to<sp/>hide<sp/>the<sp/>cursor.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.showCursor()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>escape<sp/>sequence<sp/>to<sp/>show<sp/>the<sp/>cursor.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.color(_colors<sp/>=<sp/>[]_)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>var<sp/>code<sp/>=<sp/>consoleControl.color(_color1_,<sp/>_color2_,<sp/>_…_,<sp/>_colorn_)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>escape<sp/>sequence<sp/>to<sp/>set<sp/>the<sp/>current<sp/>terminal<sp/>display<sp/>attributes</highlight></codeline>
<codeline><highlight class="normal">(mostly<sp/>colors).<sp/><sp/>Arguments<sp/>can<sp/>either<sp/>be<sp/>a<sp/>list<sp/>of<sp/>attributes<sp/>or<sp/>an<sp/>array</highlight></codeline>
<codeline><highlight class="normal">of<sp/>attributes.<sp/><sp/>The<sp/>difference<sp/>between<sp/>passing<sp/>in<sp/>an<sp/>array<sp/>or<sp/>list<sp/>of<sp/>colors</highlight></codeline>
<codeline><highlight class="normal">and<sp/>calling<sp/>`.color`<sp/>separately<sp/>for<sp/>each<sp/>one,<sp/>is<sp/>that<sp/>in<sp/>the<sp/>former<sp/>case<sp/>a</highlight></codeline>
<codeline><highlight class="normal">single<sp/>escape<sp/>sequence<sp/>will<sp/>be<sp/>produced<sp/>where<sp/>as<sp/>in<sp/>the<sp/>latter<sp/>each<sp/>change</highlight></codeline>
<codeline><highlight class="normal">will<sp/>have<sp/>its<sp/>own<sp/>distinct<sp/>escape<sp/>sequence.<sp/><sp/>Each<sp/>attribute<sp/>can<sp/>be<sp/>one<sp/>of:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Reset:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**reset**<sp/>–<sp/>Reset<sp/>all<sp/>attributes<sp/>to<sp/>the<sp/>terminal<sp/>default.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Styles:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bold**<sp/>–<sp/>Display<sp/>text<sp/>as<sp/>bold.<sp/><sp/>In<sp/>some<sp/>terminals<sp/>this<sp/>means<sp/>using<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bold<sp/>font,<sp/>in<sp/>others<sp/>this<sp/>means<sp/>changing<sp/>the<sp/>color.<sp/><sp/>In<sp/>some<sp/>it<sp/>means</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>both.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**italic**<sp/>–<sp/>Display<sp/>text<sp/>as<sp/>italic.<sp/>This<sp/>is<sp/>not<sp/>available<sp/>in<sp/>most<sp/>Windows<sp/>terminals.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**underline**<sp/>–<sp/>Underline<sp/>text.<sp/>This<sp/>is<sp/>not<sp/>available<sp/>in<sp/>most<sp/>Windows<sp/>Terminals.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**inverse**<sp/>–<sp/>Invert<sp/>the<sp/>foreground<sp/>and<sp/>background<sp/>colors.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**stopBold**<sp/>–<sp/>Do<sp/>not<sp/>display<sp/>text<sp/>as<sp/>bold.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**stopItalic**<sp/>–<sp/>Do<sp/>not<sp/>display<sp/>text<sp/>as<sp/>italic.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**stopUnderline**<sp/>–<sp/>Do<sp/>not<sp/>underline<sp/>text.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**stopInverse**<sp/>–<sp/>Do<sp/>not<sp/>invert<sp/>foreground<sp/>and<sp/>background.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Colors:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**white**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**black**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**blue**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**cyan**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**green**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**magenta**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**red**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**yellow**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**grey**<sp/>/<sp/>**brightBlack**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**brightRed**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**brightGreen**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**brightYellow**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**brightBlue**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**brightMagenta**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**brightCyan**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**brightWhite**</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Background<sp/>Colors:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgWhite**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgBlack**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgBlue**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgCyan**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgGreen**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgMagenta**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgRed**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgYellow**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgGrey**<sp/>/<sp/>**bgBrightBlack**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgBrightRed**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgBrightGreen**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgBrightYellow**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgBrightBlue**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgBrightMagenta**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgBrightCyan**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>**bgBrightWhite**</highlight></codeline>
<codeline></codeline>
    </programlisting>
    <location file="backend/node_modules/console-control-strings/README.md"/>
  </compounddef>
</doxygen>
