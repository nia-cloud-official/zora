<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="common__test_8py" kind="file" language="Python">
    <compoundname>common_test.py</compoundname>
    <innerclass refid="classgyp_1_1common__test_1_1_test_topologically_sorted" prot="public">gyp::common_test::TestTopologicallySorted</innerclass>
    <innerclass refid="classgyp_1_1common__test_1_1_test_get_flavor" prot="public">gyp::common_test::TestGetFlavor</innerclass>
    <innernamespace refid="namespacegyp">gyp</innernamespace>
    <innernamespace refid="namespacegyp_1_1common__test">gyp::common_test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacegyp_1_1common__test" refkind="compound"><highlight class="comment">#!/usr/bin/env<sp/>python3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Google<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a<sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;Unit<sp/>tests<sp/>for<sp/>the<sp/>common.py<sp/>file.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacegyp_1_1common" kindref="compound">gyp.common</ref></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>unittest</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="classgyp_1_1common__test_1_1_test_topologically_sorted" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common__test_1_1_test_topologically_sorted" kindref="compound">TestTopologicallySorted</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="15" refid="classgyp_1_1common__test_1_1_test_topologically_sorted_1a03e6fb59f60c63b3fed5e962b4b726a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common__test_1_1_test_topologically_sorted_1a03e6fb59f60c63b3fed5e962b4b726a5" kindref="member">test_Valid</ref>(self):</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Test<sp/>that<sp/>sorting<sp/>works<sp/>on<sp/>a<sp/>valid<sp/>graph<sp/>with<sp/>one<sp/>possible<sp/>order.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">:<sp/>[</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">:<sp/>[</highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">:<sp/>[</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">GetEdge(node):</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tuple(graph[node])</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegyp_1_1common_1a959a06d815b87d3cb6ddd564bac597fd" kindref="member">gyp.common.TopologicallySorted</ref>(graph.keys(),<sp/>GetEdge),<sp/>[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classgyp_1_1common__test_1_1_test_topologically_sorted_1a065a2c4b15af21087032b93082199abd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common__test_1_1_test_topologically_sorted_1a065a2c4b15af21087032b93082199abd" kindref="member">test_Cycle</ref>(self):</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Test<sp/>that<sp/>an<sp/>exception<sp/>is<sp/>thrown<sp/>on<sp/>a<sp/>cyclic<sp/>graph.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">:<sp/>[</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">:<sp/>[</highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">:<sp/>[</highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">:<sp/>[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">GetEdge(node):</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tuple(graph[node])</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertRaises(</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classgyp_1_1common_1_1_cycle_error" kindref="compound">gyp.common.CycleError</ref>,<sp/>gyp.common.TopologicallySorted,<sp/>graph.keys(),<sp/>GetEdge</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classgyp_1_1common__test_1_1_test_get_flavor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common__test_1_1_test_get_flavor" kindref="compound">TestGetFlavor</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Test<sp/>that<sp/>gyp.common.GetFlavor<sp/>works<sp/>as<sp/>intended&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="classgyp_1_1common__test_1_1_test_get_flavor_1ad1529cad0ca6b147794dbafe343ac6c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>original_platform<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classgyp_1_1common__test_1_1_test_get_flavor_1af64f02f6762cbb1c5cea86b30c7ec231" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1af64f02f6762cbb1c5cea86b30c7ec231" kindref="member">setUp</ref>(self):</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1ad1529cad0ca6b147794dbafe343ac6c7" kindref="member">original_platform</ref><sp/>=<sp/>sys.platform</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classgyp_1_1common__test_1_1_test_get_flavor_1a331b2fd36bcebf876c4023d2449deaed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1a331b2fd36bcebf876c4023d2449deaed" kindref="member">tearDown</ref>(self):</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys.platform<sp/>=<sp/>self.<ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1ad1529cad0ca6b147794dbafe343ac6c7" kindref="member">original_platform</ref></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="classgyp_1_1common__test_1_1_test_get_flavor_1a65e1f4899ab0085389875ebe8a42ce85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1a65e1f4899ab0085389875ebe8a42ce85" kindref="member">assertFlavor</ref>(self,<sp/>expected,<sp/>argument,<sp/>param):</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys.platform<sp/>=<sp/>argument</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(expected,<sp/><ref refid="namespacegyp_1_1common_1aeb48ab17a03cd7c40f5ad72fac713486" kindref="member">gyp.common.GetFlavor</ref>(param))</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classgyp_1_1common__test_1_1_test_get_flavor_1a2c9e1ad36854688398fa6cc72c11c0cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1a2c9e1ad36854688398fa6cc72c11c0cc" kindref="member">test_platform_default</ref>(self):</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1a65e1f4899ab0085389875ebe8a42ce85" kindref="member">assertFlavor</ref>(</highlight><highlight class="stringliteral">&quot;freebsd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;freebsd9&quot;</highlight><highlight class="normal">,<sp/>{})</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1a65e1f4899ab0085389875ebe8a42ce85" kindref="member">assertFlavor</ref>(</highlight><highlight class="stringliteral">&quot;freebsd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;freebsd10&quot;</highlight><highlight class="normal">,<sp/>{})</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1a65e1f4899ab0085389875ebe8a42ce85" kindref="member">assertFlavor</ref>(</highlight><highlight class="stringliteral">&quot;openbsd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;openbsd5&quot;</highlight><highlight class="normal">,<sp/>{})</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1a65e1f4899ab0085389875ebe8a42ce85" kindref="member">assertFlavor</ref>(</highlight><highlight class="stringliteral">&quot;solaris&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sunos5&quot;</highlight><highlight class="normal">,<sp/>{})</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1a65e1f4899ab0085389875ebe8a42ce85" kindref="member">assertFlavor</ref>(</highlight><highlight class="stringliteral">&quot;solaris&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sunos&quot;</highlight><highlight class="normal">,<sp/>{})</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1a65e1f4899ab0085389875ebe8a42ce85" kindref="member">assertFlavor</ref>(</highlight><highlight class="stringliteral">&quot;linux&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;linux2&quot;</highlight><highlight class="normal">,<sp/>{})</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1a65e1f4899ab0085389875ebe8a42ce85" kindref="member">assertFlavor</ref>(</highlight><highlight class="stringliteral">&quot;linux&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;linux3&quot;</highlight><highlight class="normal">,<sp/>{})</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1a65e1f4899ab0085389875ebe8a42ce85" kindref="member">assertFlavor</ref>(</highlight><highlight class="stringliteral">&quot;linux&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;linux&quot;</highlight><highlight class="normal">,<sp/>{})</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="classgyp_1_1common__test_1_1_test_get_flavor_1adb32eb94cea5c77ecd80a605ac208e01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1adb32eb94cea5c77ecd80a605ac208e01" kindref="member">test_param</ref>(self):</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common__test_1_1_test_get_flavor_1a65e1f4899ab0085389875ebe8a42ce85" kindref="member">assertFlavor</ref>(</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;linux2&quot;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="stringliteral">&quot;flavor&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>unittest.main()</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/common_test.py"/>
  </compounddef>
</doxygen>
