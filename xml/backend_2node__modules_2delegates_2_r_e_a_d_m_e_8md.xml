<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="backend_2node__modules_2delegates_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>Readme.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>delegates</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Node<sp/>method<sp/>and<sp/>accessor<sp/>delegation<sp/>utilty.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Installation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">$<sp/>npm<sp/>install<sp/>delegates</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Example</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>delegate<sp/>=<sp/>require(&apos;delegates&apos;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">delegate(proto,<sp/>&apos;request&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.method(&apos;acceptsLanguages&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.method(&apos;acceptsEncodings&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.method(&apos;acceptsCharsets&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.method(&apos;accepts&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.method(&apos;is&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.access(&apos;querystring&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.access(&apos;idempotent&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.access(&apos;socket&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.access(&apos;length&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.access(&apos;query&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.access(&apos;search&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.access(&apos;status&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.access(&apos;method&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.access(&apos;path&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.access(&apos;body&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.access(&apos;host&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.access(&apos;url&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.getter(&apos;subdomains&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.getter(&apos;protocol&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.getter(&apos;header&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.getter(&apos;stale&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.getter(&apos;fresh&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.getter(&apos;secure&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.getter(&apos;ips&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.getter(&apos;ip&apos;)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>API</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Delegate(proto,<sp/>prop)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Creates<sp/>a<sp/>delegator<sp/>instance<sp/>used<sp/>to<sp/>configure<sp/>using<sp/>the<sp/>`prop`<sp/>on<sp/>the<sp/>given</highlight></codeline>
<codeline><highlight class="normal">`proto`<sp/>object.<sp/>(which<sp/>is<sp/>usually<sp/>a<sp/>prototype)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Delegate#method(name)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Allows<sp/>the<sp/>given<sp/>method<sp/>`name`<sp/>to<sp/>be<sp/>accessed<sp/>on<sp/>the<sp/>host.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Delegate#getter(name)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Creates<sp/>a<sp/>&quot;getter&quot;<sp/>for<sp/>the<sp/>property<sp/>with<sp/>the<sp/>given<sp/>`name`<sp/>on<sp/>the<sp/>delegated</highlight></codeline>
<codeline><highlight class="normal">object.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Delegate#setter(name)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Creates<sp/>a<sp/>&quot;setter&quot;<sp/>for<sp/>the<sp/>property<sp/>with<sp/>the<sp/>given<sp/>`name`<sp/>on<sp/>the<sp/>delegated</highlight></codeline>
<codeline><highlight class="normal">object.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Delegate#access(name)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Creates<sp/>an<sp/>&quot;accessor&quot;<sp/>(ie:<sp/>both<sp/>getter<sp/>*and*<sp/>setter)<sp/>for<sp/>the<sp/>property<sp/>with<sp/>the</highlight></codeline>
<codeline><highlight class="normal">given<sp/>`name`<sp/>on<sp/>the<sp/>delegated<sp/>object.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Delegate#fluent(name)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>unique<sp/>type<sp/>of<sp/>&quot;accessor&quot;<sp/>that<sp/>works<sp/>for<sp/>a<sp/>&quot;fluent&quot;<sp/>API.<sp/>When<sp/>called<sp/>as<sp/>a</highlight></codeline>
<codeline><highlight class="normal">getter,<sp/>the<sp/>method<sp/>returns<sp/>the<sp/>expected<sp/>value.<sp/>However,<sp/>if<sp/>the<sp/>method<sp/>is<sp/>called</highlight></codeline>
<codeline><highlight class="normal">with<sp/>a<sp/>value,<sp/>it<sp/>will<sp/>return<sp/>itself<sp/>so<sp/>it<sp/>can<sp/>be<sp/>chained.<sp/>For<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">delegate(proto,<sp/>&apos;request&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.fluent(&apos;query&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>getter</highlight></codeline>
<codeline><highlight class="normal">var<sp/>q<sp/>=<sp/>request.query();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>setter<sp/>(chainable)</highlight></codeline>
<codeline><highlight class="normal">request</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.query({<sp/>a:<sp/>1<sp/>})</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.query({<sp/>b:<sp/>2<sp/>});</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>License</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MIT</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/delegates/Readme.md"/>
  </compounddef>
</doxygen>
