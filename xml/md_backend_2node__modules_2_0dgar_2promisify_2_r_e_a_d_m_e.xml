<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2_0dgar_2promisify_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2_0dgar_2promisify_2_r_e_a_d_m_e</compoundname>
    <title>@gar/promisify</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2_0dgar_2promisify_2_r_e_a_d_m_e_1autotoc_md0"/> </para>
<sect2 id="md_backend_2node__modules_2_0dgar_2promisify_2_r_e_a_d_m_e_1autotoc_md1">
<title>Promisify an entire object or class instance</title><para>This module leverages es6 Proxy and Reflect to promisify every function in an object or class instance.</para>
<para>It assumes the callback that the function is expecting is the last parameter, and that it is an error-first callback with only one value, i.e. <computeroutput>(err, value) =&gt; ...</computeroutput>. This mirrors node&apos;s <computeroutput>util.promisify</computeroutput> method.</para>
<para>In order that you can use it as a one-stop-shop for all your promisify needs, you can also pass it a function. That function will be promisified as normal using node&apos;s built-in <computeroutput>util.promisify</computeroutput> method.</para>
<para><ulink url="https://nodejs.org/api/util.html#util_custom_promisified_functions">node&apos;s custom promisified functions</ulink> will also be mirrored, further allowing this to be a drop-in replacement for the built-in <computeroutput>util.promisify</computeroutput>.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2_0dgar_2promisify_2_r_e_a_d_m_e_1autotoc_md2">
<title>Examples</title><para>Promisify an entire object</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">const<sp/>promisify<sp/>=<sp/>require(&apos;@gar/promisify&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constructor<sp/>(attr)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this.attr<sp/>=<sp/>attr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>(input,<sp/>cb)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cb(null,<sp/>input<sp/>*<sp/>2)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>foo<sp/>=<sp/>new<sp/>Foo(&apos;baz&apos;)</highlight></codeline>
<codeline><highlight class="normal">const<sp/>promisified<sp/>=<sp/>promisify(foo)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">console.log(promisified.attr)</highlight></codeline>
<codeline><highlight class="normal">console.log(await<sp/>promisified.double(1024))</highlight></codeline>
</programlisting></para>
<para>Promisify a function</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">const<sp/>promisify<sp/>=<sp/>require(&apos;@gar/promisify&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">function<sp/>foo<sp/>(a,<sp/>cb)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(a<sp/>!==<sp/>&apos;bad&apos;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>cb(null,<sp/>&apos;ok&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>cb(&apos;not<sp/>ok&apos;)</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>promisified<sp/>=<sp/>promisify(foo)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>will<sp/>resolve<sp/>to<sp/>&apos;ok&apos;</highlight></codeline>
<codeline><highlight class="normal">promisified(&apos;good&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>this<sp/>will<sp/>reject</highlight></codeline>
<codeline><highlight class="normal">promisified(&apos;bad&apos;)</highlight></codeline>
</programlisting> </para>
</sect2>
    </detaileddescription>
    <location file="backend/node_modules/@gar/promisify/README.md"/>
  </compounddef>
</doxygen>
