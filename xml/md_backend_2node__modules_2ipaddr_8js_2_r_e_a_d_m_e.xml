<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2ipaddr_8js_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2ipaddr_8js_2_r_e_a_d_m_e</compoundname>
    <title>ipaddr.js â€” an IPv6 and IPv4 address manipulation library &lt;a href=&quot;https://travis-ci.org/whitequark/ipaddr.js&quot; &gt;&lt;img src=&quot;https://travis-ci.org/whitequark/ipaddr.js.svg&quot; alt=&quot;Build Status&quot;/&gt;&lt;/a&gt;</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2ipaddr_8js_2_r_e_a_d_m_e_1autotoc_md1732"/> ipaddr.js is a small (1.9K minified and gzipped) library for manipulating IP addresses in JavaScript environments. It runs on both CommonJS runtimes (e.g. <ulink url="http://nodejs.org">nodejs</ulink>) and in a web browser.</para>
<para>ipaddr.js allows you to verify and parse string representation of an IP address, match it against a CIDR range or range list, determine if it falls into some reserved ranges (examples include loopback and private ranges), and convert between IPv4 and IPv4-mapped IPv6 addresses.</para>
<sect1 id="md_backend_2node__modules_2ipaddr_8js_2_r_e_a_d_m_e_1autotoc_md1733">
<title>Installation</title><para><computeroutput>npm install ipaddr.js</computeroutput></para>
<para>or</para>
<para><computeroutput>bower install ipaddr.js</computeroutput></para>
</sect1>
<sect1 id="md_backend_2node__modules_2ipaddr_8js_2_r_e_a_d_m_e_1autotoc_md1734">
<title>API</title><para>ipaddr.js defines one object in the global scope: <computeroutput>ipaddr</computeroutput>. In CommonJS, it is exported from the module:</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>ipaddr<sp/>=<sp/>require(&apos;ipaddr.js&apos;);</highlight></codeline>
</programlisting></para>
<para>The API consists of several global methods and two classes: ipaddr.IPv6 and ipaddr.IPv4.</para>
<sect2 id="md_backend_2node__modules_2ipaddr_8js_2_r_e_a_d_m_e_1autotoc_md1735">
<title>Global methods</title><para>There are three global methods defined: <computeroutput>ipaddr.isValid</computeroutput>, <computeroutput>ipaddr.parse</computeroutput> and <computeroutput>ipaddr.process</computeroutput>. All of them receive a string as a single parameter.</para>
<para>The <computeroutput>ipaddr.isValid</computeroutput> method returns <computeroutput>true</computeroutput> if the address is a valid IPv4 or IPv6 address, and <computeroutput>false</computeroutput> otherwise. It does not throw any exceptions.</para>
<para>The <computeroutput>ipaddr.parse</computeroutput> method returns an object representing the IP address, or throws an <computeroutput>Error</computeroutput> if the passed string is not a valid representation of an IP address.</para>
<para>The <computeroutput>ipaddr.process</computeroutput> method works just like the <computeroutput>ipaddr.parse</computeroutput> one, but it automatically converts IPv4-mapped IPv6 addresses to their IPv4 counterparts before returning. It is useful when you have a Node.js instance listening on an IPv6 socket, and the <computeroutput>net.ivp6.bindv6only</computeroutput> sysctl parameter (or its equivalent on non-Linux OS) is set to 0. In this case, you can accept IPv4 connections on your IPv6-only socket, but the remote address will be mangled. Use <computeroutput>ipaddr.process</computeroutput> method to automatically demangle it.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2ipaddr_8js_2_r_e_a_d_m_e_1autotoc_md1736">
<title>Object representation</title><para>Parsing methods return an object which descends from <computeroutput>ipaddr.IPv6</computeroutput> or <computeroutput>ipaddr.IPv4</computeroutput>. These objects share some properties, but most of them differ.</para>
<sect3 id="md_backend_2node__modules_2ipaddr_8js_2_r_e_a_d_m_e_1autotoc_md1737">
<title>Shared properties</title><para>One can determine the type of address by calling <computeroutput>addr.kind()</computeroutput>. It will return either <computeroutput>&quot;ipv6&quot;</computeroutput> or <computeroutput>&quot;ipv4&quot;</computeroutput>.</para>
<para>An address can be converted back to its string representation with <computeroutput>addr.toString()</computeroutput>. Note that this method:<itemizedlist>
<listitem><para>does not return the original string used to create the object (in fact, there is no way of getting that string)</para>
</listitem><listitem><para>returns a compact representation (when it is applicable)</para>
</listitem></itemizedlist>
</para>
<para>A <computeroutput>match(range, bits)</computeroutput> method can be used to check if the address falls into a certain CIDR range. Note that an address can be (obviously) matched only against an address of the same type.</para>
<para>For example:</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>addr<sp/>=<sp/>ipaddr.parse(&quot;2001:db8:1234::1&quot;);</highlight></codeline>
<codeline><highlight class="normal">var<sp/>range<sp/>=<sp/>ipaddr.parse(&quot;2001:db8::&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">addr.match(range,<sp/>32);<sp/>//<sp/>=&gt;<sp/>true</highlight></codeline>
</programlisting></para>
<para>Alternatively, <computeroutput>match</computeroutput> can also be called as <computeroutput>match([range, bits])</computeroutput>. In this way, it can be used together with the <computeroutput>parseCIDR(string)</computeroutput> method, which parses an IP address together with a CIDR range.</para>
<para>For example:</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>addr<sp/>=<sp/>ipaddr.parse(&quot;2001:db8:1234::1&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">addr.match(ipaddr.parseCIDR(&quot;2001:db8::/32&quot;));<sp/>//<sp/>=&gt;<sp/>true</highlight></codeline>
</programlisting></para>
<para>A <computeroutput>range()</computeroutput> method returns one of predefined names for several special ranges defined by IP protocols. The exact names (and their respective CIDR ranges) can be looked up in the source: <ulink url="https://github.com/whitequark/ipaddr.js/blob/master/src/ipaddr.coffee#L186">IPv6 ranges</ulink> and <ulink url="https://github.com/whitequark/ipaddr.js/blob/master/src/ipaddr.coffee#L71">IPv4 ranges</ulink>. Some common ones include <computeroutput>&quot;unicast&quot;</computeroutput> (the default one) and <computeroutput>&quot;reserved&quot;</computeroutput>.</para>
<para>You can match against your own range list by using <computeroutput>ipaddr.subnetMatch(address, rangeList, defaultName)</computeroutput> method. It can work with a mix of IPv6 or IPv4 addresses, and accepts a name-to-subnet map as the range list. For example:</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>rangeList<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>documentationOnly:<sp/>[<sp/>ipaddr.parse(&apos;2001:db8::&apos;),<sp/>32<sp/>],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tunnelProviders:<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/>ipaddr.parse(&apos;2001:470::&apos;),<sp/>32<sp/>],<sp/>//<sp/>he.net</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/>ipaddr.parse(&apos;2001:5c0::&apos;),<sp/>32<sp/>]<sp/><sp/>//<sp/>freenet6</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">ipaddr.subnetMatch(ipaddr.parse(&apos;2001:470:8:66::1&apos;),<sp/>rangeList,<sp/>&apos;unknown&apos;);<sp/>//<sp/>=&gt;<sp/>&quot;tunnelProviders&quot;</highlight></codeline>
</programlisting></para>
<para>The addresses can be converted to their byte representation with <computeroutput>toByteArray()</computeroutput>. (Actually, JavaScript mostly does not know about byte buffers. They are emulated with arrays of numbers, each in range of 0..255.)</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>bytes<sp/>=<sp/>ipaddr.parse(&apos;2a00:1450:8007::68&apos;).toByteArray();<sp/>//<sp/>ipv6.google.com</highlight></codeline>
<codeline><highlight class="normal">bytes<sp/>//<sp/>=&gt;<sp/>[42,<sp/>0x00,<sp/>0x14,<sp/>0x50,<sp/>0x80,<sp/>0x07,<sp/>0x00,<sp/>&lt;zeroes...&gt;,<sp/>0x00,<sp/>0x68<sp/>]</highlight></codeline>
</programlisting></para>
<para>The <computeroutput>ipaddr.IPv4</computeroutput> and <computeroutput>ipaddr.IPv6</computeroutput> objects have some methods defined, too. All of them have the same interface for both protocols, and are similar to global methods.</para>
<para><computeroutput>ipaddr.IPvX.isValid(string)</computeroutput> can be used to check if the string is a valid address for particular protocol, and <computeroutput>ipaddr.IPvX.parse(string)</computeroutput> is the error-throwing parser.</para>
<para><computeroutput>ipaddr.IPvX.isValid(string)</computeroutput> uses the same format for parsing as the POSIX <computeroutput>inet_ntoa</computeroutput> function, which accepts unusual formats like <computeroutput>0xc0.168.1.1</computeroutput> or <computeroutput>0x10000000</computeroutput>. The function <computeroutput>ipaddr.IPv4.isValidFourPartDecimal(string)</computeroutput> validates the IPv4 address and also ensures that it is written in four-part decimal format.</para>
</sect3>
<sect3 id="md_backend_2node__modules_2ipaddr_8js_2_r_e_a_d_m_e_1autotoc_md1738">
<title>IPv6 properties</title><para>Sometimes you will want to convert IPv6 not to a compact string representation (with the <computeroutput>::</computeroutput> substitution); the <computeroutput>toNormalizedString()</computeroutput> method will return an address where all zeroes are explicit.</para>
<para>For example:</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>addr<sp/>=<sp/>ipaddr.parse(&quot;2001:0db8::0001&quot;);</highlight></codeline>
<codeline><highlight class="normal">addr.toString();<sp/>//<sp/>=&gt;<sp/>&quot;2001:db8::1&quot;</highlight></codeline>
<codeline><highlight class="normal">addr.toNormalizedString();<sp/>//<sp/>=&gt;<sp/>&quot;2001:db8:0:0:0:0:0:1&quot;</highlight></codeline>
</programlisting></para>
<para>The <computeroutput>isIPv4MappedAddress()</computeroutput> method will return <computeroutput>true</computeroutput> if this address is an IPv4-mapped one, and <computeroutput>toIPv4Address()</computeroutput> will return an IPv4 object address.</para>
<para>To access the underlying binary representation of the address, use <computeroutput>addr.parts</computeroutput>.</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>addr<sp/>=<sp/>ipaddr.parse(&quot;2001:db8:10::1234:DEAD&quot;);</highlight></codeline>
<codeline><highlight class="normal">addr.parts<sp/>//<sp/>=&gt;<sp/>[0x2001,<sp/>0xdb8,<sp/>0x10,<sp/>0,<sp/>0,<sp/>0,<sp/>0x1234,<sp/>0xdead]</highlight></codeline>
</programlisting></para>
<para>A IPv6 zone index can be accessed via <computeroutput>addr.zoneId</computeroutput>:</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>addr<sp/>=<sp/>ipaddr.parse(&quot;2001:db8::%eth0&quot;);</highlight></codeline>
<codeline><highlight class="normal">addr.zoneId<sp/>//<sp/>=&gt;<sp/>&apos;eth0&apos;</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="md_backend_2node__modules_2ipaddr_8js_2_r_e_a_d_m_e_1autotoc_md1739">
<title>IPv4 properties</title><para><computeroutput>toIPv4MappedAddress()</computeroutput> will return a corresponding IPv4-mapped IPv6 address.</para>
<para>To access the underlying representation of the address, use <computeroutput>addr.octets</computeroutput>.</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>addr<sp/>=<sp/>ipaddr.parse(&quot;192.168.1.1&quot;);</highlight></codeline>
<codeline><highlight class="normal">addr.octets<sp/>//<sp/>=&gt;<sp/>[192,<sp/>168,<sp/>1,<sp/>1]</highlight></codeline>
</programlisting></para>
<para><computeroutput>prefixLengthFromSubnetMask()</computeroutput> will return a CIDR prefix length for a valid IPv4 netmask or null if the netmask is not valid.</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">ipaddr.IPv4.parse(&apos;255.255.255.240&apos;).prefixLengthFromSubnetMask()<sp/>==<sp/>28</highlight></codeline>
<codeline><highlight class="normal">ipaddr.IPv4.parse(&apos;255.192.164.0&apos;).prefixLengthFromSubnetMask()<sp/><sp/>==<sp/>null</highlight></codeline>
</programlisting></para>
<para><computeroutput>subnetMaskFromPrefixLength()</computeroutput> will return an IPv4 netmask for a valid CIDR prefix length.</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">ipaddr.IPv4.subnetMaskFromPrefixLength(24)<sp/>==<sp/>&quot;255.255.255.0&quot;</highlight></codeline>
<codeline><highlight class="normal">ipaddr.IPv4.subnetMaskFromPrefixLength(29)<sp/>==<sp/>&quot;255.255.255.248&quot;</highlight></codeline>
</programlisting></para>
<para><computeroutput>broadcastAddressFromCIDR()</computeroutput> will return the broadcast address for a given IPv4 interface and netmask in CIDR notation. <programlisting filename=".js"><codeline><highlight class="normal">ipaddr.IPv4.broadcastAddressFromCIDR(&quot;172.0.0.1/24&quot;)<sp/>==<sp/>&quot;172.0.0.255&quot;</highlight></codeline>
</programlisting> <computeroutput>networkAddressFromCIDR()</computeroutput> will return the network address for a given IPv4 interface and netmask in CIDR notation. <programlisting filename=".js"><codeline><highlight class="normal">ipaddr.IPv4.networkAddressFromCIDR(&quot;172.0.0.1/24&quot;)<sp/>==<sp/>&quot;172.0.0.0&quot;</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="md_backend_2node__modules_2ipaddr_8js_2_r_e_a_d_m_e_1autotoc_md1740">
<title>Conversion</title><para>IPv4 and IPv6 can be converted bidirectionally to and from network byte order (MSB) byte arrays.</para>
<para>The <computeroutput>fromByteArray()</computeroutput> method will take an array and create an appropriate IPv4 or IPv6 object if the input satisfies the requirements. For IPv4 it has to be an array of four 8-bit values, while for IPv6 it has to be an array of sixteen 8-bit values.</para>
<para>For example: <programlisting filename=".js"><codeline><highlight class="normal">var<sp/>addr<sp/>=<sp/>ipaddr.fromByteArray([0x7f,<sp/>0,<sp/>0,<sp/>1]);</highlight></codeline>
<codeline><highlight class="normal">addr.toString();<sp/>//<sp/>=&gt;<sp/>&quot;127.0.0.1&quot;</highlight></codeline>
</programlisting></para>
<para>or</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>addr<sp/>=<sp/>ipaddr.fromByteArray([0x20,<sp/>1,<sp/>0xd,<sp/>0xb8,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1])</highlight></codeline>
<codeline><highlight class="normal">addr.toString();<sp/>//<sp/>=&gt;<sp/>&quot;2001:db8::1&quot;</highlight></codeline>
</programlisting></para>
<para>Both objects also offer a <computeroutput>toByteArray()</computeroutput> method, which returns an array in network byte order (MSB).</para>
<para>For example: <programlisting filename=".js"><codeline><highlight class="normal">var<sp/>addr<sp/>=<sp/>ipaddr.parse(&quot;127.0.0.1&quot;);</highlight></codeline>
<codeline><highlight class="normal">addr.toByteArray();<sp/>//<sp/>=&gt;<sp/>[0x7f,<sp/>0,<sp/>0,<sp/>1]</highlight></codeline>
</programlisting></para>
<para>or</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>addr<sp/>=<sp/>ipaddr.parse(&quot;2001:db8::1&quot;);</highlight></codeline>
<codeline><highlight class="normal">addr.toByteArray();<sp/>//<sp/>=&gt;<sp/>[0x20,<sp/>1,<sp/>0xd,<sp/>0xb8,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1]</highlight></codeline>
</programlisting> </para>
</sect3>
</sect2>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/ipaddr.js/README.md"/>
  </compounddef>
</doxygen>
