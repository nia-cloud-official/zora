<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2rimraf_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2rimraf_2_r_e_a_d_m_e</compoundname>
    <title>README</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ulink url="https://travis-ci.org/isaacs/rimraf"><image type="html" name="https://travis-ci.org/isaacs/rimraf.svg?branch=master" alt="Build Status" inline="yes"></image>
</ulink> <ulink url="https://david-dm.org/isaacs/rimraf"><image type="html" name="https://david-dm.org/isaacs/rimraf.svg" alt="Dependency Status" inline="yes"></image>
</ulink> <ulink url="https://david-dm.org/isaacs/rimraf#info=devDependencies"><image type="html" name="https://david-dm.org/isaacs/rimraf/dev-status.svg" alt="devDependency Status" inline="yes"></image>
</ulink></para>
<para>The <ulink url="http://en.wikipedia.org/wiki/Rm_(Unix)">UNIX command</ulink> <computeroutput>rm -rf</computeroutput> for node.</para>
<para>Install with <computeroutput>npm install rimraf</computeroutput>, or just drop rimraf.js somewhere.</para>
<sect2 id="md_backend_2node__modules_2rimraf_2_r_e_a_d_m_e_1autotoc_md3011">
<title>API</title><para><computeroutput>rimraf(f, [opts], callback)</computeroutput></para>
<para>The first parameter will be interpreted as a globbing pattern for files. If you want to disable globbing you can do so with <computeroutput>opts.disableGlob</computeroutput> (defaults to <computeroutput>false</computeroutput>). This might be handy, for instance, if you have filenames that contain globbing wildcard characters.</para>
<para>The callback will be called with an error if there is one. Certain errors are handled for you:</para>
<para><itemizedlist>
<listitem><para>Windows: <computeroutput>EBUSY</computeroutput> and <computeroutput>ENOTEMPTY</computeroutput> - rimraf will back off a maximum of <computeroutput>opts.maxBusyTries</computeroutput> times before giving up, adding 100ms of wait between each attempt. The default <computeroutput>maxBusyTries</computeroutput> is 3.</para>
</listitem><listitem><para><computeroutput>ENOENT</computeroutput> - If the file doesn&apos;t exist, rimraf will return successfully, since your desired outcome is already the case.</para>
</listitem><listitem><para><computeroutput>EMFILE</computeroutput> - Since <computeroutput>readdir</computeroutput> requires opening a file descriptor, it&apos;s possible to hit <computeroutput>EMFILE</computeroutput> if too many file descriptors are in use. In the sync case, there&apos;s nothing to be done for this. But in the async case, rimraf will gradually back off with timeouts up to <computeroutput>opts.emfileWait</computeroutput> ms, which defaults to 1000.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_backend_2node__modules_2rimraf_2_r_e_a_d_m_e_1autotoc_md3012">
<title>options</title><para><itemizedlist>
<listitem><para>unlink, chmod, stat, lstat, rmdir, readdir, unlinkSync, chmodSync, statSync, lstatSync, rmdirSync, readdirSync</para>
<para>In order to use a custom file system library, you can override specific fs functions on the options object.</para>
<para>If any of these functions are present on the options object, then the supplied function will be used instead of the default fs method.</para>
<para>Sync methods are only relevant for <computeroutput>rimraf.sync()</computeroutput>, of course.</para>
<para>For example:</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>myCustomFS<sp/>=<sp/>require(&apos;some-custom-fs&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">rimraf(&apos;some-thing&apos;,<sp/>myCustomFS,<sp/>callback)</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>maxBusyTries</para>
<para>If an <computeroutput>EBUSY</computeroutput>, <computeroutput>ENOTEMPTY</computeroutput>, or <computeroutput>EPERM</computeroutput> error code is encountered on Windows systems, then rimraf will retry with a linear backoff wait of 100ms longer on each try. The default maxBusyTries is 3.</para>
<para>Only relevant for async usage.</para>
</listitem><listitem><para>emfileWait</para>
<para>If an <computeroutput>EMFILE</computeroutput> error is encountered, then rimraf will retry repeatedly with a linear backoff of 1ms longer on each try, until the timeout counter hits this max. The default limit is 1000.</para>
<para>If you repeatedly encounter <computeroutput>EMFILE</computeroutput> errors, then consider using <ulink url="http://npm.im/graceful-fs">graceful-fs</ulink> in your program.</para>
<para>Only relevant for async usage.</para>
</listitem><listitem><para>glob</para>
<para>Set to <computeroutput>false</computeroutput> to disable <ulink url="http://npm.im/glob">glob</ulink> pattern matching.</para>
<para>Set to an object to pass options to the glob module. The default glob options are <computeroutput>{ nosort: true, silent: true }</computeroutput>.</para>
<para>Glob version 6 is used in this module.</para>
<para>Relevant for both sync and async usage.</para>
</listitem><listitem><para>disableGlob</para>
<para>Set to any non-falsey value to disable globbing entirely. (Equivalent to setting <computeroutput>glob: false</computeroutput>.)</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_backend_2node__modules_2rimraf_2_r_e_a_d_m_e_1autotoc_md3013">
<title>rimraf.sync</title><para>It can remove stuff synchronously, too. But that&apos;s not so good. Use the async API. It&apos;s better.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2rimraf_2_r_e_a_d_m_e_1autotoc_md3014">
<title>CLI</title><para>If installed with <computeroutput>npm install rimraf -g</computeroutput> it can be used as a global command <computeroutput>rimraf &lt;path&gt; [&lt;path&gt; ...]</computeroutput> which is useful for cross platform support.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2rimraf_2_r_e_a_d_m_e_1autotoc_md3015">
<title>mkdirp</title><para>If you need to create a directory recursively, check out <ulink url="https://github.com/substack/node-mkdirp">mkdirp</ulink>. </para>
</sect2>
    </detaileddescription>
    <location file="backend/node_modules/rimraf/README.md"/>
  </compounddef>
</doxygen>
