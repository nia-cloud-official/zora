<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="backend_2node__modules_2raw-body_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>raw-body</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[![NPM<sp/>Version][npm-image]][npm-url]</highlight></codeline>
<codeline><highlight class="normal">[![NPM<sp/>Downloads][downloads-image]][downloads-url]</highlight></codeline>
<codeline><highlight class="normal">[![Node.js<sp/>Version][node-version-image]][node-version-url]</highlight></codeline>
<codeline><highlight class="normal">[![Build<sp/>status][github-actions-ci-image]][github-actions-ci-url]</highlight></codeline>
<codeline><highlight class="normal">[![Test<sp/>coverage][coveralls-image]][coveralls-url]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Gets<sp/>the<sp/>entire<sp/>buffer<sp/>of<sp/>a<sp/>stream<sp/>either<sp/>as<sp/>a<sp/>`Buffer`<sp/>or<sp/>a<sp/>string.</highlight></codeline>
<codeline><highlight class="normal">Validates<sp/>the<sp/>stream&apos;s<sp/>length<sp/>against<sp/>an<sp/>expected<sp/>length<sp/>and<sp/>maximum<sp/>limit.</highlight></codeline>
<codeline><highlight class="normal">Ideal<sp/>for<sp/>parsing<sp/>request<sp/>bodies.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Install</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>a<sp/>[Node.js](https://nodejs.org/en/)<sp/>module<sp/>available<sp/>through<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[npm<sp/>registry](https://www.npmjs.com/).<sp/>Installation<sp/>is<sp/>done<sp/>using<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[`npm<sp/>install`<sp/>command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```sh</highlight></codeline>
<codeline><highlight class="normal">$<sp/>npm<sp/>install<sp/>raw-body</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>TypeScript</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>module<sp/>includes<sp/>a<sp/>[TypeScript](https://www.typescriptlang.org/)</highlight></codeline>
<codeline><highlight class="normal">declaration<sp/>file<sp/>to<sp/>enable<sp/>auto<sp/>complete<sp/>in<sp/>compatible<sp/>editors<sp/>and<sp/>type</highlight></codeline>
<codeline><highlight class="normal">information<sp/>for<sp/>TypeScript<sp/>projects.<sp/>This<sp/>module<sp/>depends<sp/>on<sp/>the<sp/>Node.js</highlight></codeline>
<codeline><highlight class="normal">types,<sp/>so<sp/>install<sp/>`@types/node`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```sh</highlight></codeline>
<codeline><highlight class="normal">$<sp/>npm<sp/>install<sp/>@types/node</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>API</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>getRawBody<sp/>=<sp/>require(&apos;raw-body&apos;)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>getRawBody(stream,<sp/>[options],<sp/>[callback])</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns<sp/>a<sp/>promise<sp/>if<sp/>no<sp/>callback<sp/>specified<sp/>and<sp/>global<sp/>`Promise`<sp/>exists.**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Options:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>`length`<sp/>-<sp/>The<sp/>length<sp/>of<sp/>the<sp/>stream.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>stream<sp/>do<sp/>not<sp/>add<sp/>up<sp/>to<sp/>this<sp/>length,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>an<sp/>`400`<sp/>error<sp/>code<sp/>is<sp/>returned.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`limit`<sp/>-<sp/>The<sp/>byte<sp/>limit<sp/>of<sp/>the<sp/>body.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>is<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>or<sp/>any<sp/>string<sp/>format<sp/>supported<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[bytes](https://www.npmjs.com/package/bytes),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>example<sp/>`1000`,<sp/>`&apos;500kb&apos;`<sp/>or<sp/>`&apos;3mb&apos;`.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>the<sp/>body<sp/>ends<sp/>up<sp/>being<sp/>larger<sp/>than<sp/>this<sp/>limit,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>a<sp/>`413`<sp/>error<sp/>code<sp/>is<sp/>returned.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`encoding`<sp/>-<sp/>The<sp/>encoding<sp/>to<sp/>use<sp/>to<sp/>decode<sp/>the<sp/>body<sp/>into<sp/>a<sp/>string.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>By<sp/>default,<sp/>a<sp/>`Buffer`<sp/>instance<sp/>will<sp/>be<sp/>returned<sp/>when<sp/>no<sp/>encoding<sp/>is<sp/>specified.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Most<sp/>likely,<sp/>you<sp/>want<sp/>`utf-8`,<sp/>so<sp/>setting<sp/>`encoding`<sp/>to<sp/>`true`<sp/>will<sp/>decode<sp/>as<sp/>`utf-8`.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>You<sp/>can<sp/>use<sp/>any<sp/>type<sp/>of<sp/>encoding<sp/>supported<sp/>by<sp/>[iconv-lite](https://www.npmjs.org/package/iconv-lite#readme).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>also<sp/>pass<sp/>a<sp/>string<sp/>in<sp/>place<sp/>of<sp/>options<sp/>to<sp/>just<sp/>specify<sp/>the<sp/>encoding.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>an<sp/>error<sp/>occurs,<sp/>the<sp/>stream<sp/>will<sp/>be<sp/>paused,<sp/>everything<sp/>unpiped,</highlight></codeline>
<codeline><highlight class="normal">and<sp/>you<sp/>are<sp/>responsible<sp/>for<sp/>correctly<sp/>disposing<sp/>the<sp/>stream.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>HTTP<sp/>requests,<sp/>you<sp/>may<sp/>need<sp/>to<sp/>finish<sp/>consuming<sp/>the<sp/>stream<sp/>if</highlight></codeline>
<codeline><highlight class="normal">you<sp/>want<sp/>to<sp/>keep<sp/>the<sp/>socket<sp/>open<sp/>for<sp/>future<sp/>requests.<sp/>For<sp/>streams</highlight></codeline>
<codeline><highlight class="normal">that<sp/>use<sp/>file<sp/>descriptors,<sp/>you<sp/>should<sp/>`stream.destroy()`<sp/>or</highlight></codeline>
<codeline><highlight class="normal">`stream.close()`<sp/>to<sp/>prevent<sp/>leaks.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Errors</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>module<sp/>creates<sp/>errors<sp/>depending<sp/>on<sp/>the<sp/>error<sp/>condition<sp/>during<sp/>reading.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>error<sp/>may<sp/>be<sp/>an<sp/>error<sp/>from<sp/>the<sp/>underlying<sp/>Node.js<sp/>implementation,<sp/>but<sp/>is</highlight></codeline>
<codeline><highlight class="normal">otherwise<sp/>an<sp/>error<sp/>created<sp/>by<sp/>this<sp/>module,<sp/>which<sp/>has<sp/>the<sp/>following<sp/>attributes:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`limit`<sp/>-<sp/>the<sp/>limit<sp/>in<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`length`<sp/>and<sp/>`expected`<sp/>-<sp/>the<sp/>expected<sp/>length<sp/>of<sp/>the<sp/>stream</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`received`<sp/>-<sp/>the<sp/>received<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`encoding`<sp/>-<sp/>the<sp/>invalid<sp/>encoding</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`status`<sp/>and<sp/>`statusCode`<sp/>-<sp/>the<sp/>corresponding<sp/>status<sp/>code<sp/>for<sp/>the<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`type`<sp/>-<sp/>the<sp/>error<sp/>type</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Types</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>errors<sp/>from<sp/>this<sp/>module<sp/>have<sp/>a<sp/>`type`<sp/>property<sp/>which<sp/>allows<sp/>for<sp/>the<sp/>programmatic</highlight></codeline>
<codeline><highlight class="normal">determination<sp/>of<sp/>the<sp/>type<sp/>of<sp/>error<sp/>returned.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>encoding.unsupported</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>error<sp/>will<sp/>occur<sp/>when<sp/>the<sp/>`encoding`<sp/>option<sp/>is<sp/>specified,<sp/>but<sp/>the<sp/>value<sp/>does</highlight></codeline>
<codeline><highlight class="normal">not<sp/>map<sp/>to<sp/>an<sp/>encoding<sp/>supported<sp/>by<sp/>the<sp/>[iconv-lite](https://www.npmjs.org/package/iconv-lite#readme)</highlight></codeline>
<codeline><highlight class="normal">module.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>entity.too.large</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>error<sp/>will<sp/>occur<sp/>when<sp/>the<sp/>`limit`<sp/>option<sp/>is<sp/>specified,<sp/>but<sp/>the<sp/>stream<sp/>has</highlight></codeline>
<codeline><highlight class="normal">an<sp/>entity<sp/>that<sp/>is<sp/>larger.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>request.aborted</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>error<sp/>will<sp/>occur<sp/>when<sp/>the<sp/>request<sp/>stream<sp/>is<sp/>aborted<sp/>by<sp/>the<sp/>client<sp/>before</highlight></codeline>
<codeline><highlight class="normal">reading<sp/>the<sp/>body<sp/>has<sp/>finished.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>request.size.invalid</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>error<sp/>will<sp/>occur<sp/>when<sp/>the<sp/>`length`<sp/>option<sp/>is<sp/>specified,<sp/>but<sp/>the<sp/>stream<sp/>has</highlight></codeline>
<codeline><highlight class="normal">emitted<sp/>more<sp/>bytes.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>stream.encoding.set</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>error<sp/>will<sp/>occur<sp/>when<sp/>the<sp/>given<sp/>stream<sp/>has<sp/>an<sp/>encoding<sp/>set<sp/>on<sp/>it,<sp/>making<sp/>it</highlight></codeline>
<codeline><highlight class="normal">a<sp/>decoded<sp/>stream.<sp/>The<sp/>stream<sp/>should<sp/>not<sp/>have<sp/>an<sp/>encoding<sp/>set<sp/>and<sp/>is<sp/>expected<sp/>to</highlight></codeline>
<codeline><highlight class="normal">emit<sp/>`Buffer`<sp/>objects.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>stream.not.readable</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>error<sp/>will<sp/>occur<sp/>when<sp/>the<sp/>given<sp/>stream<sp/>is<sp/>not<sp/>readable.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Examples</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Simple<sp/>Express<sp/>example</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>contentType<sp/>=<sp/>require(&apos;content-type&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>express<sp/>=<sp/>require(&apos;express&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>getRawBody<sp/>=<sp/>require(&apos;raw-body&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>app<sp/>=<sp/>express()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">app.use(function<sp/>(req,<sp/>res,<sp/>next)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>getRawBody(req,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>length:<sp/>req.headers[&apos;content-length&apos;],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>limit:<sp/>&apos;1mb&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>encoding:<sp/>contentType.parse(req).parameters.charset</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>},<sp/>function<sp/>(err,<sp/>string)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(err)<sp/>return<sp/>next(err)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>req.text<sp/>=<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>next()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>})</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>now<sp/>access<sp/>req.text</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Simple<sp/>Koa<sp/>example</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>contentType<sp/>=<sp/>require(&apos;content-type&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>getRawBody<sp/>=<sp/>require(&apos;raw-body&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>koa<sp/>=<sp/>require(&apos;koa&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>app<sp/>=<sp/>koa()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">app.use(function<sp/>*<sp/>(next)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this.text<sp/>=<sp/>yield<sp/>getRawBody(this.req,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>length:<sp/>this.req.headers[&apos;content-length&apos;],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>limit:<sp/>&apos;1mb&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>encoding:<sp/>contentType.parse(this.req).parameters.charset</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>})</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>yield<sp/>next</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>now<sp/>access<sp/>this.text</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Using<sp/>as<sp/>a<sp/>promise</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>use<sp/>this<sp/>library<sp/>as<sp/>a<sp/>promise,<sp/>simply<sp/>omit<sp/>the<sp/>`callback`<sp/>and<sp/>a<sp/>promise<sp/>is</highlight></codeline>
<codeline><highlight class="normal">returned,<sp/>provided<sp/>that<sp/>a<sp/>global<sp/>`Promise`<sp/>is<sp/>defined.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>getRawBody<sp/>=<sp/>require(&apos;raw-body&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>http<sp/>=<sp/>require(&apos;http&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>server<sp/>=<sp/>http.createServer(function<sp/>(req,<sp/>res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>getRawBody(req)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.then(function<sp/>(buf)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res.statusCode<sp/>=<sp/>200</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res.end(buf.length<sp/>+<sp/>&apos;<sp/>bytes<sp/>submitted&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.catch(function<sp/>(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res.statusCode<sp/>=<sp/>500</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res.end(err.message)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">server.listen(3000)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Using<sp/>with<sp/>TypeScript</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```ts</highlight></codeline>
<codeline><highlight class="normal">import<sp/>*<sp/>as<sp/>getRawBody<sp/>from<sp/>&apos;raw-body&apos;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>*<sp/>as<sp/>http<sp/>from<sp/>&apos;http&apos;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>server<sp/>=<sp/>http.createServer((req,<sp/>res)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>getRawBody(req)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.then((buf)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res.statusCode<sp/>=<sp/>200;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res.end(buf.length<sp/>+<sp/>&apos;<sp/>bytes<sp/>submitted&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>})</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.catch((err)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res.statusCode<sp/>=<sp/>err.statusCode;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res.end(err.message);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">server.listen(3000);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>License</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[MIT](LICENSE)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[npm-image]:<sp/>https://img.shields.io/npm/v/raw-body.svg</highlight></codeline>
<codeline><highlight class="normal">[npm-url]:<sp/>https://npmjs.org/package/raw-body</highlight></codeline>
<codeline><highlight class="normal">[node-version-image]:<sp/>https://img.shields.io/node/v/raw-body.svg</highlight></codeline>
<codeline><highlight class="normal">[node-version-url]:<sp/>https://nodejs.org/en/download/</highlight></codeline>
<codeline><highlight class="normal">[coveralls-image]:<sp/>https://img.shields.io/coveralls/stream-utils/raw-body/master.svg</highlight></codeline>
<codeline><highlight class="normal">[coveralls-url]:<sp/>https://coveralls.io/r/stream-utils/raw-body?branch=master</highlight></codeline>
<codeline><highlight class="normal">[downloads-image]:<sp/>https://img.shields.io/npm/dm/raw-body.svg</highlight></codeline>
<codeline><highlight class="normal">[downloads-url]:<sp/>https://npmjs.org/package/raw-body</highlight></codeline>
<codeline><highlight class="normal">[github-actions-ci-image]:<sp/>https://img.shields.io/github/actions/workflow/status/stream-utils/raw-body/ci.yml?branch=master&amp;label=ci</highlight></codeline>
<codeline><highlight class="normal">[github-actions-ci-url]:<sp/>https://github.com/jshttp/stream-utils/raw-body?query=workflow%3Aci</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/raw-body/README.md"/>
  </compounddef>
</doxygen>
