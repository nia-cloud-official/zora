<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="backend_2node__modules_2which_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>which</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Like<sp/>the<sp/>unix<sp/>`which`<sp/>utility.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Finds<sp/>the<sp/>first<sp/>instance<sp/>of<sp/>a<sp/>specified<sp/>executable<sp/>in<sp/>the<sp/>PATH</highlight></codeline>
<codeline><highlight class="normal">environment<sp/>variable.<sp/><sp/>Does<sp/>not<sp/>cache<sp/>the<sp/>results,<sp/>so<sp/>`hash<sp/>-r`<sp/>is<sp/>not</highlight></codeline>
<codeline><highlight class="normal">needed<sp/>when<sp/>the<sp/>PATH<sp/>changes.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>USAGE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```javascript</highlight></codeline>
<codeline><highlight class="normal">var<sp/>which<sp/>=<sp/>require(&apos;which&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>async<sp/>usage</highlight></codeline>
<codeline><highlight class="normal">which(&apos;node&apos;,<sp/>function<sp/>(er,<sp/>resolvedPath)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>er<sp/>is<sp/>returned<sp/>if<sp/>no<sp/>&quot;node&quot;<sp/>is<sp/>found<sp/>on<sp/>the<sp/>PATH</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>if<sp/>it<sp/>is<sp/>found,<sp/>then<sp/>the<sp/>absolute<sp/>path<sp/>to<sp/>the<sp/>exec<sp/>is<sp/>returned</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>or<sp/>promise</highlight></codeline>
<codeline><highlight class="normal">which(&apos;node&apos;).then(resolvedPath<sp/>=&gt;<sp/>{<sp/>...<sp/>}).catch(er<sp/>=&gt;<sp/>{<sp/>...<sp/>not<sp/>found<sp/>...<sp/>})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>sync<sp/>usage</highlight></codeline>
<codeline><highlight class="normal">//<sp/>throws<sp/>if<sp/>not<sp/>found</highlight></codeline>
<codeline><highlight class="normal">var<sp/>resolved<sp/>=<sp/>which.sync(&apos;node&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>if<sp/>nothrow<sp/>option<sp/>is<sp/>used,<sp/>returns<sp/>null<sp/>if<sp/>not<sp/>found</highlight></codeline>
<codeline><highlight class="normal">resolved<sp/>=<sp/>which.sync(&apos;node&apos;,<sp/>{nothrow:<sp/>true})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Pass<sp/>options<sp/>to<sp/>override<sp/>the<sp/>PATH<sp/>and<sp/>PATHEXT<sp/>environment<sp/>vars.</highlight></codeline>
<codeline><highlight class="normal">which(&apos;node&apos;,<sp/>{<sp/>path:<sp/>someOtherPath<sp/>},<sp/>function<sp/>(er,<sp/>resolved)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(er)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>er</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>console.log(&apos;found<sp/>at<sp/>%j&apos;,<sp/>resolved)</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>CLI<sp/>USAGE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Same<sp/>as<sp/>the<sp/>BSD<sp/>`which(1)`<sp/>binary.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">usage:<sp/>which<sp/>[-as]<sp/>program<sp/>...</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>OPTIONS</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>may<sp/>pass<sp/>an<sp/>options<sp/>object<sp/>as<sp/>the<sp/>second<sp/>argument.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>`path`:<sp/>Use<sp/>instead<sp/>of<sp/>the<sp/>`PATH`<sp/>environment<sp/>variable.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`pathExt`:<sp/>Use<sp/>instead<sp/>of<sp/>the<sp/>`PATHEXT`<sp/>environment<sp/>variable.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`all`:<sp/>Return<sp/>all<sp/>matches,<sp/>instead<sp/>of<sp/>just<sp/>the<sp/>first<sp/>one.<sp/><sp/>Note<sp/>that</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this<sp/>means<sp/>the<sp/>function<sp/>returns<sp/>an<sp/>array<sp/>of<sp/>strings<sp/>instead<sp/>of<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>single<sp/>string.</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/which/README.md"/>
  </compounddef>
</doxygen>
