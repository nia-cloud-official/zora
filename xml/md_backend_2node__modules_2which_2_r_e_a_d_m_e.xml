<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2which_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2which_2_r_e_a_d_m_e</compoundname>
    <title>which</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2which_2_r_e_a_d_m_e_1autotoc_md3981"/> Like the unix <computeroutput>which</computeroutput> utility.</para>
<para>Finds the first instance of a specified executable in the PATH environment variable. Does not cache the results, so <computeroutput>hash -r</computeroutput> is not needed when the PATH changes.</para>
<sect1 id="md_backend_2node__modules_2which_2_r_e_a_d_m_e_1autotoc_md3982">
<title>USAGE</title><para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>which<sp/>=<sp/>require(&apos;which&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>async<sp/>usage</highlight></codeline>
<codeline><highlight class="normal">which(&apos;node&apos;,<sp/>function<sp/>(er,<sp/>resolvedPath)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>er<sp/>is<sp/>returned<sp/>if<sp/>no<sp/>&quot;node&quot;<sp/>is<sp/>found<sp/>on<sp/>the<sp/>PATH</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>if<sp/>it<sp/>is<sp/>found,<sp/>then<sp/>the<sp/>absolute<sp/>path<sp/>to<sp/>the<sp/>exec<sp/>is<sp/>returned</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>or<sp/>promise</highlight></codeline>
<codeline><highlight class="normal">which(&apos;node&apos;).then(resolvedPath<sp/>=&gt;<sp/>{<sp/>...<sp/>}).catch(er<sp/>=&gt;<sp/>{<sp/>...<sp/>not<sp/>found<sp/>...<sp/>})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>sync<sp/>usage</highlight></codeline>
<codeline><highlight class="normal">//<sp/>throws<sp/>if<sp/>not<sp/>found</highlight></codeline>
<codeline><highlight class="normal">var<sp/>resolved<sp/>=<sp/>which.sync(&apos;node&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>if<sp/>nothrow<sp/>option<sp/>is<sp/>used,<sp/>returns<sp/>null<sp/>if<sp/>not<sp/>found</highlight></codeline>
<codeline><highlight class="normal">resolved<sp/>=<sp/>which.sync(&apos;node&apos;,<sp/>{nothrow:<sp/>true})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Pass<sp/>options<sp/>to<sp/>override<sp/>the<sp/>PATH<sp/>and<sp/>PATHEXT<sp/>environment<sp/>vars.</highlight></codeline>
<codeline><highlight class="normal">which(&apos;node&apos;,<sp/>{<sp/>path:<sp/>someOtherPath<sp/>},<sp/>function<sp/>(er,<sp/>resolved)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(er)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>er</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>console.log(&apos;found<sp/>at<sp/>%j&apos;,<sp/>resolved)</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2which_2_r_e_a_d_m_e_1autotoc_md3983">
<title>CLI USAGE</title><para>Same as the BSD <computeroutput>which(1)</computeroutput> binary.</para>
<para><programlisting><codeline><highlight class="normal">usage:<sp/>which<sp/>[-as]<sp/>program<sp/>...</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2which_2_r_e_a_d_m_e_1autotoc_md3984">
<title>OPTIONS</title><para>You may pass an options object as the second argument.</para>
<para><itemizedlist>
<listitem><para><computeroutput>path</computeroutput>: Use instead of the <computeroutput>PATH</computeroutput> environment variable.</para>
</listitem><listitem><para><computeroutput>pathExt</computeroutput>: Use instead of the <computeroutput>PATHEXT</computeroutput> environment variable.</para>
</listitem><listitem><para><computeroutput>all</computeroutput>: Return all matches, instead of just the first one. Note that this means the function returns an array of strings instead of a single string. </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/which/README.md"/>
  </compounddef>
</doxygen>
