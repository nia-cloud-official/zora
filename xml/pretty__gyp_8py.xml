<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="pretty__gyp_8py" kind="file" language="Python">
    <compoundname>pretty_gyp.py</compoundname>
    <innernamespace refid="namespacepretty__gyp">pretty_gyp</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacepretty__gyp" refkind="compound"><highlight class="comment">#!/usr/bin/env<sp/>python3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Google<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a<sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;Pretty-prints<sp/>the<sp/>contents<sp/>of<sp/>a<sp/>GYP<sp/>file.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>re</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Regex<sp/>to<sp/>remove<sp/>comments<sp/>when<sp/>we&apos;re<sp/>counting<sp/>braces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="namespacepretty__gyp_1afd764cacfa415e8b0de16023cd643776" refkind="member"><highlight class="normal">COMMENT_RE<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&quot;\s*#.*&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Regex<sp/>to<sp/>remove<sp/>quoted<sp/>strings<sp/>when<sp/>we&apos;re<sp/>counting<sp/>braces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/>It<sp/>takes<sp/>into<sp/>account<sp/>quoted<sp/>quotes,<sp/>and<sp/>makes<sp/>sure<sp/>that<sp/>the<sp/>quotes<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#<sp/>NOTE:<sp/>It<sp/>does<sp/>not<sp/>handle<sp/>quotes<sp/>that<sp/>span<sp/>more<sp/>than<sp/>one<sp/>line,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#<sp/>cases<sp/>where<sp/>an<sp/>escaped<sp/>quote<sp/>is<sp/>preceded<sp/>by<sp/>an<sp/>escaped<sp/>backslash.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="namespacepretty__gyp_1a7ef32e41d3f0daa36080ed944bdcb0c1" refkind="member"><highlight class="normal">QUOTE_RE_STR<sp/>=<sp/></highlight><highlight class="stringliteral">r&apos;(?P&lt;q&gt;[\&apos;&quot;])(.*?)(?&lt;![^\\][\\])(?P=q)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="namespacepretty__gyp_1a4fe9f6d8a3daa7be4bb0b3545ba4af31" refkind="member"><highlight class="normal">QUOTE_RE<sp/>=<sp/>re.compile(QUOTE_RE_STR)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="namespacepretty__gyp_1abad85d78975fe159d4d49ca84cd04194" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepretty__gyp_1abad85d78975fe159d4d49ca84cd04194" kindref="member">comment_replace</ref>(matchobj):</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matchobj.group(1)<sp/>+<sp/>matchobj.group(2)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal"><sp/>*<sp/>len(matchobj.group(3))</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="namespacepretty__gyp_1aaa77284f217ebf7511e14cea42ae8a63" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepretty__gyp_1aaa77284f217ebf7511e14cea42ae8a63" kindref="member">mask_comments</ref>(input):</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Mask<sp/>the<sp/>quoted<sp/>strings<sp/>so<sp/>we<sp/>skip<sp/>braces<sp/>inside<sp/>quoted<sp/>strings.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>search_re<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&quot;(.*?)(#)(.*)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[search_re.sub(comment_replace,<sp/>line)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>input]</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="namespacepretty__gyp_1ac7ddb89dff5bf12f8015a451e3b2128d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepretty__gyp_1ac7ddb89dff5bf12f8015a451e3b2128d" kindref="member">quote_replace</ref>(matchobj):</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;{}{}{}{}&quot;</highlight><highlight class="normal">.format(</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchobj.group(1),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchobj.group(2),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>*<sp/>len(matchobj.group(3)),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchobj.group(2),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="namespacepretty__gyp_1a0889517056297841f5da3aca987821f1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepretty__gyp_1a0889517056297841f5da3aca987821f1" kindref="member">mask_quotes</ref>(input):</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Mask<sp/>the<sp/>quoted<sp/>strings<sp/>so<sp/>we<sp/>skip<sp/>braces<sp/>inside<sp/>quoted<sp/>strings.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>search_re<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&quot;(.*?)&quot;</highlight><highlight class="normal"><sp/>+<sp/>QUOTE_RE_STR)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[search_re.sub(quote_replace,<sp/>line)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>input]</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="namespacepretty__gyp_1ab79a8ff74faf01ab659e1ef2bc614c42" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepretty__gyp_1ab79a8ff74faf01ab659e1ef2bc614c42" kindref="member">do_split</ref>(input,<sp/>masked_input,<sp/>search_re):</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>mask_output<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line,<sp/>masked_line)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>zip(input,<sp/>masked_input):</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>search_re.match(masked_line)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>m:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>split<sp/>=<sp/>len(m.group(1))</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>line[:split]<sp/>+<sp/></highlight><highlight class="stringliteral">r&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>line[split:]</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masked_line<sp/>=<sp/>masked_line[:split]<sp/>+<sp/></highlight><highlight class="stringliteral">r&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>masked_line[split:]</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>search_re.match(masked_line)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.extend(line.split(</highlight><highlight class="stringliteral">r&quot;\n&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask_output.extend(masked_line.split(</highlight><highlight class="stringliteral">r&quot;\n&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(output,<sp/>mask_output)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="namespacepretty__gyp_1a2ae522fcac84e38e4e4b6351eeb67422" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepretty__gyp_1a2ae522fcac84e38e4e4b6351eeb67422" kindref="member">split_double_braces</ref>(input):</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Masks<sp/>out<sp/>the<sp/>quotes<sp/>and<sp/>comments,<sp/>and<sp/>then<sp/>splits<sp/>appropriate</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/>lines<sp/>(lines<sp/>that<sp/>matche<sp/>the<sp/>double_*_brace<sp/>re&apos;s<sp/>above)<sp/>before</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/>indenting<sp/>them<sp/>below.</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/>These<sp/>are<sp/>used<sp/>to<sp/>split<sp/>lines<sp/>which<sp/>have<sp/>multiple<sp/>braces<sp/>on<sp/>them,<sp/>so</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/>that<sp/>the<sp/>indentation<sp/>looks<sp/>prettier<sp/>when<sp/>all<sp/>laid<sp/>out<sp/>(e.g.<sp/>closing</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/>braces<sp/>make<sp/>a<sp/>nice<sp/>diagonal<sp/>line).</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>double_open_brace_re<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&quot;(.*?[\[\{\(,])(\s*)([\[\{\(])&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>double_close_brace_re<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&quot;(.*?[\]\}\)],?)(\s*)([\]\}\)])&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>masked_input<sp/>=<sp/><ref refid="namespacepretty__gyp_1a0889517056297841f5da3aca987821f1" kindref="member">mask_quotes</ref>(input)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>masked_input<sp/>=<sp/><ref refid="namespacepretty__gyp_1aaa77284f217ebf7511e14cea42ae8a63" kindref="member">mask_comments</ref>(masked_input)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>(output,<sp/>mask_output)<sp/>=<sp/><ref refid="namespacepretty__gyp_1ab79a8ff74faf01ab659e1ef2bc614c42" kindref="member">do_split</ref>(input,<sp/>masked_input,<sp/>double_open_brace_re)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>(output,<sp/>mask_output)<sp/>=<sp/><ref refid="namespacepretty__gyp_1ab79a8ff74faf01ab659e1ef2bc614c42" kindref="member">do_split</ref>(output,<sp/>mask_output,<sp/>double_close_brace_re)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="namespacepretty__gyp_1a51683fa8914728729b1ddfe21674df6d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepretty__gyp_1a51683fa8914728729b1ddfe21674df6d" kindref="member">count_braces</ref>(line):</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;keeps<sp/>track<sp/>of<sp/>the<sp/>number<sp/>of<sp/>braces<sp/>on<sp/>a<sp/>given<sp/>line<sp/>and<sp/>returns<sp/>the<sp/>result.</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/>It<sp/>starts<sp/>at<sp/>zero<sp/>and<sp/>subtracts<sp/>for<sp/>closed<sp/>braces,<sp/>and<sp/>adds<sp/>for<sp/>open<sp/>braces.</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>open_braces<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>close_braces<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>closing_prefix_re<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&quot;(.*?[^\s\]\}\)]+.*?)([\]\}\)],?)\s*$&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>cnt<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>stripline<sp/>=<sp/>COMMENT_RE.sub(</highlight><highlight class="stringliteral">r&quot;&quot;</highlight><highlight class="normal">,<sp/>line)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>stripline<sp/>=<sp/>QUOTE_RE.sub(</highlight><highlight class="stringliteral">r&quot;&apos;&apos;&quot;</highlight><highlight class="normal">,<sp/>stripline)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>char<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stripline:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>brace<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>open_braces:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>char<sp/>==<sp/>brace:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>brace<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>close_braces:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>char<sp/>==<sp/>brace:</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt<sp/>-=<sp/>1</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>after<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>cnt<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>catches<sp/>the<sp/>special<sp/>case<sp/>of<sp/>a<sp/>closing<sp/>brace<sp/>having<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>other<sp/>than<sp/>just<sp/>whitespace<sp/>ahead<sp/>of<sp/>it<sp/>--<sp/>we<sp/>don&apos;t<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>unindent<sp/>that<sp/>until<sp/>after<sp/>this<sp/>line<sp/>is<sp/>printed<sp/>so<sp/>it<sp/>stays<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>previous<sp/>indentation<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>cnt<sp/>&lt;<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>closing_prefix_re.match(stripline):</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(cnt,<sp/>after)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="namespacepretty__gyp_1adde22ea53d6f9f1250e5869e7504c28a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepretty__gyp_1adde22ea53d6f9f1250e5869e7504c28a" kindref="member">prettyprint_input</ref>(lines):</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Does<sp/>the<sp/>main<sp/>work<sp/>of<sp/>indenting<sp/>the<sp/>input<sp/>based<sp/>on<sp/>the<sp/>brace<sp/>counts.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>indent<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_offset<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lines:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>COMMENT_RE.match(line):</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(line)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>line.strip(</highlight><highlight class="stringliteral">&quot;\r\n\t<sp/>&quot;</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="comment">#<sp/>Otherwise<sp/>doesn&apos;t<sp/>strip<sp/>\r<sp/>on<sp/>Unix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(line)<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(brace_diff,<sp/>after)<sp/>=<sp/><ref refid="namespacepretty__gyp_1a51683fa8914728729b1ddfe21674df6d" kindref="member">count_braces</ref>(line)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>brace_diff<sp/>!=<sp/>0:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>after:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>*<sp/>(basic_offset<sp/>*<sp/>indent)<sp/>+<sp/>line)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indent<sp/>+=<sp/>brace_diff</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indent<sp/>+=<sp/>brace_diff</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>*<sp/>(basic_offset<sp/>*<sp/>indent)<sp/>+<sp/>line)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>*<sp/>(basic_offset<sp/>*<sp/>indent)<sp/>+<sp/>line)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="namespacepretty__gyp_1ac4ba580bbe6437333f6ddf74fefa85e9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacepretty__gyp_1ac4ba580bbe6437333f6ddf74fefa85e9" kindref="member">main</ref>():</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(sys.argv)<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>open(sys.argv[1]).read().splitlines()</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>sys.stdin.read().splitlines()</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Split<sp/>up<sp/>the<sp/>double<sp/>braces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>lines<sp/>=<sp/><ref refid="namespacepretty__gyp_1a2ae522fcac84e38e4e4b6351eeb67422" kindref="member">split_double_braces</ref>(data)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Indent<sp/>and<sp/>print<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepretty__gyp_1adde22ea53d6f9f1250e5869e7504c28a" kindref="member">prettyprint_input</ref>(lines)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>sys.exit(<ref refid="namespacepretty__gyp_1ac4ba580bbe6437333f6ddf74fefa85e9" kindref="member">main</ref>())</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/node-gyp/gyp/tools/pretty_gyp.py"/>
  </compounddef>
</doxygen>
