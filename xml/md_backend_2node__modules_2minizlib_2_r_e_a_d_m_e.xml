<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2minizlib_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2minizlib_2_r_e_a_d_m_e</compoundname>
    <title>minizlib</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2minizlib_2_r_e_a_d_m_e_1autotoc_md2197"/> A fast zlib stream built on <ulink url="http://npm.im/minipass">minipass</ulink> and Node.js&apos;s zlib binding.</para>
<para>This module was created to serve the needs of <ulink url="http://npm.im/tar">node-tar</ulink> and <ulink url="http://npm.im/minipass-fetch">minipass-fetch</ulink>.</para>
<para>Brotli is supported in versions of node with a Brotli binding.</para>
<sect1 id="md_backend_2node__modules_2minizlib_2_r_e_a_d_m_e_1autotoc_md2198">
<title>How does this differ from the streams in <lsquo/>require(&apos;zlib<rsquo/>)`?</title><para>First, there are no convenience methods to compress or decompress a buffer. If you want those, use the built-in <computeroutput>zlib</computeroutput> module. This is only streams. That being said, Minipass streams to make it fairly easy to use as one-liners: <computeroutput>new zlib.Deflate().end(data).read()</computeroutput> will return the deflate compressed result.</para>
<para>This module compresses and decompresses the data as fast as you feed it in. It is synchronous, and runs on the main process thread. Zlib and Brotli operations can be high CPU, but they&apos;re very fast, and doing it this way means much less bookkeeping and artificial deferral.</para>
<para>Node&apos;s built in zlib streams are built on top of <computeroutput>stream.Transform</computeroutput>. They do the maximally safe thing with respect to consistent asynchrony, buffering, and backpressure.</para>
<para>See <ulink url="http://npm.im/minipass">Minipass</ulink> for more on the differences between Node.js core streams and Minipass streams, and the convenience methods provided by that class.</para>
</sect1>
<sect1 id="md_backend_2node__modules_2minizlib_2_r_e_a_d_m_e_1autotoc_md2199">
<title>Classes</title><para><itemizedlist>
<listitem><para>Deflate</para>
</listitem><listitem><para>Inflate</para>
</listitem><listitem><para>Gzip</para>
</listitem><listitem><para>Gunzip</para>
</listitem><listitem><para>DeflateRaw</para>
</listitem><listitem><para>InflateRaw</para>
</listitem><listitem><para>Unzip</para>
</listitem><listitem><para>BrotliCompress (Node v10 and higher)</para>
</listitem><listitem><para>BrotliDecompress (Node v10 and higher)</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_backend_2node__modules_2minizlib_2_r_e_a_d_m_e_1autotoc_md2200">
<title>USAGE</title><para><programlisting filename=".js"><codeline><highlight class="normal">const<sp/>zlib<sp/>=<sp/>require(&apos;minizlib&apos;)</highlight></codeline>
<codeline><highlight class="normal">const<sp/>input<sp/>=<sp/>sourceOfCompressedData()</highlight></codeline>
<codeline><highlight class="normal">const<sp/>decode<sp/>=<sp/>new<sp/>zlib.BrotliDecompress()</highlight></codeline>
<codeline><highlight class="normal">const<sp/>output<sp/>=<sp/>whereToWriteTheDecodedData()</highlight></codeline>
<codeline><highlight class="normal">input.pipe(decode).pipe(output)</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2minizlib_2_r_e_a_d_m_e_1autotoc_md2201">
<title>REPRODUCIBLE BUILDS</title><para>To create reproducible gzip compressed files across different operating systems, set <computeroutput>portable: true</computeroutput> in the options. This causes minizlib to set the <computeroutput>OS</computeroutput> indicator in byte 9 of the extended gzip header to <computeroutput>0xFF</computeroutput> for &apos;unknown&apos;. </para>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/minizlib/README.md"/>
  </compounddef>
</doxygen>
