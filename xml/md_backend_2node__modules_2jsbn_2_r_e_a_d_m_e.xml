<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e</compoundname>
    <title>jsbn: javascript big number</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1761"/> <ulink url="http://www-cs-students.stanford.edu/~tjw/jsbn/">Tom Wu&apos;s Original Website</ulink></para>
<para>I felt compelled to put this on github and publish to npm. I haven&apos;t tested every other big integer library out there, but the few that I have tested in comparison to this one have not even come close in performance. I am aware of the <computeroutput>bi</computeroutput> module on npm, however it has been modified and I wanted to publish the original without modifications. This is jsbn and jsbn2 from Tom Wu&apos;s original website above, with the module pattern applied to prevent global leaks and to allow for use with node.js on the server side.</para>
<sect1 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1762">
<title>usage</title><para><verbatim>var BigInteger = require(&apos;jsbn&apos;).BigInteger;

var bi = new BigInteger(&apos;91823918239182398123&apos;);
console.log(bi.bitLength()); // 67
</verbatim></para>
</sect1>
<sect1 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1763">
<title>API</title><sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1764">
<title>bi.toString()</title><para>returns the base-10 number as a string</para>
</sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1765">
<title>bi.negate()</title><para>returns a new BigInteger equal to the negation of <computeroutput>bi</computeroutput></para>
</sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1766">
<title>bi.abs</title><para>returns new BI of absolute value</para>
</sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1767">
<title>bi.compareTo</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1768">
<title>bi.bitLength</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1769">
<title>bi.mod</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1770">
<title>bi.modPowInt</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1771">
<title>bi.clone</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1772">
<title>bi.intValue</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1773">
<title>bi.byteValue</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1774">
<title>bi.shortValue</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1775">
<title>bi.signum</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1776">
<title>bi.toByteArray</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1777">
<title>bi.equals</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1778">
<title>bi.min</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1779">
<title>bi.max</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1780">
<title>bi.and</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1781">
<title>bi.or</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1782">
<title>bi.xor</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1783">
<title>bi.andNot</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1784">
<title>bi.not</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1785">
<title>bi.shiftLeft</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1786">
<title>bi.shiftRight</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1787">
<title>bi.getLowestSetBit</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1788">
<title>bi.bitCount</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1789">
<title>bi.testBit</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1790">
<title>bi.setBit</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1791">
<title>bi.clearBit</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1792">
<title>bi.flipBit</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1793">
<title>bi.add</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1794">
<title>bi.subtract</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1795">
<title>bi.multiply</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1796">
<title>bi.divide</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1797">
<title>bi.remainder</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1798">
<title>bi.divideAndRemainder</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1799">
<title>bi.modPow</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1800">
<title>bi.modInverse</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1801">
<title>bi.pow</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1802">
<title>bi.gcd</title></sect2>
<sect2 id="md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e_1autotoc_md1803">
<title>bi.isProbablePrime</title></sect2>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/jsbn/README.md"/>
  </compounddef>
</doxygen>
