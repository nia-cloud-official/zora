<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="backend_2node__modules_2yallist_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>yallist</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Yet<sp/>Another<sp/>Linked<sp/>List</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">There<sp/>are<sp/>many<sp/>doubly-linked<sp/>list<sp/>implementations<sp/>like<sp/>it,<sp/>but<sp/>this</highlight></codeline>
<codeline><highlight class="normal">one<sp/>is<sp/>mine.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>when<sp/>an<sp/>array<sp/>would<sp/>be<sp/>too<sp/>big,<sp/>and<sp/>a<sp/>Map<sp/>can&apos;t<sp/>be<sp/>iterated<sp/>in</highlight></codeline>
<codeline><highlight class="normal">reverse<sp/>order.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[![Build<sp/>Status](https://travis-ci.org/isaacs/yallist.svg?branch=master)](https://travis-ci.org/isaacs/yallist)<sp/>[![Coverage<sp/>Status](https://coveralls.io/repos/isaacs/yallist/badge.svg?service=github)](https://coveralls.io/github/isaacs/yallist)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>basic<sp/>usage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```javascript</highlight></codeline>
<codeline><highlight class="normal">var<sp/>yallist<sp/>=<sp/>require(&apos;yallist&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>myList<sp/>=<sp/>yallist.create([1,<sp/>2,<sp/>3])</highlight></codeline>
<codeline><highlight class="normal">myList.push(&apos;foo&apos;)</highlight></codeline>
<codeline><highlight class="normal">myList.unshift(&apos;bar&apos;)</highlight></codeline>
<codeline><highlight class="normal">//<sp/>of<sp/>course<sp/>pop()<sp/>and<sp/>shift()<sp/>are<sp/>there,<sp/>too</highlight></codeline>
<codeline><highlight class="normal">console.log(myList.toArray())<sp/>//<sp/>[&apos;bar&apos;,<sp/>1,<sp/>2,<sp/>3,<sp/>&apos;foo&apos;]</highlight></codeline>
<codeline><highlight class="normal">myList.forEach(function<sp/>(k)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>walk<sp/>the<sp/>list<sp/>head<sp/>to<sp/>tail</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">myList.forEachReverse(function<sp/>(k,<sp/>index,<sp/>list)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>walk<sp/>the<sp/>list<sp/>tail<sp/>to<sp/>head</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">var<sp/>myDoubledList<sp/>=<sp/>myList.map(function<sp/>(k)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>k<sp/>+<sp/>k</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">//<sp/>now<sp/>myDoubledList<sp/>contains<sp/>[&apos;barbar&apos;,<sp/>2,<sp/>4,<sp/>6,<sp/>&apos;foofoo&apos;]</highlight></codeline>
<codeline><highlight class="normal">//<sp/>mapReverse<sp/>is<sp/>also<sp/>a<sp/>thing</highlight></codeline>
<codeline><highlight class="normal">var<sp/>myDoubledListReverse<sp/>=<sp/>myList.mapReverse(function<sp/>(k)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>k<sp/>+<sp/>k</highlight></codeline>
<codeline><highlight class="normal">})<sp/>//<sp/>[&apos;foofoo&apos;,<sp/>6,<sp/>4,<sp/>2,<sp/>&apos;barbar&apos;]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>reduced<sp/>=<sp/>myList.reduce(function<sp/>(set,<sp/>entry)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set<sp/>+=<sp/>entry</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>set</highlight></codeline>
<codeline><highlight class="normal">},<sp/>&apos;start&apos;)</highlight></codeline>
<codeline><highlight class="normal">console.log(reduced)<sp/>//<sp/>&apos;startfoo123bar&apos;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>api</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>whole<sp/>API<sp/>is<sp/>considered<sp/>&quot;public&quot;.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Functions<sp/>with<sp/>the<sp/>same<sp/>name<sp/>as<sp/>an<sp/>Array<sp/>method<sp/>work<sp/>more<sp/>or<sp/>less<sp/>the</highlight></codeline>
<codeline><highlight class="normal">same<sp/>way.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">There&apos;s<sp/>reverse<sp/>versions<sp/>of<sp/>most<sp/>things<sp/>because<sp/>that&apos;s<sp/>the<sp/>point.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Yallist</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Default<sp/>export,<sp/>the<sp/>class<sp/>that<sp/>holds<sp/>and<sp/>manages<sp/>a<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Call<sp/>it<sp/>with<sp/>either<sp/>a<sp/>forEach-able<sp/>(like<sp/>an<sp/>array)<sp/>or<sp/>a<sp/>set<sp/>of</highlight></codeline>
<codeline><highlight class="normal">arguments,<sp/>to<sp/>initialize<sp/>the<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>Array-ish<sp/>methods<sp/>all<sp/>act<sp/>like<sp/>you&apos;d<sp/>expect.<sp/><sp/>No<sp/>magic<sp/>length,</highlight></codeline>
<codeline><highlight class="normal">though,<sp/>so<sp/>if<sp/>you<sp/>change<sp/>that<sp/>it<sp/>won&apos;t<sp/>automatically<sp/>prune<sp/>or<sp/>add</highlight></codeline>
<codeline><highlight class="normal">empty<sp/>spots.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Yallist.create(..)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Alias<sp/>for<sp/>Yallist<sp/>function.<sp/><sp/>Some<sp/>people<sp/>like<sp/>factories.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.head</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>first<sp/>node<sp/>in<sp/>the<sp/>list</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.tail</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>last<sp/>node<sp/>in<sp/>the<sp/>list</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.length</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>number<sp/>of<sp/>nodes<sp/>in<sp/>the<sp/>list.<sp/><sp/>(Change<sp/>this<sp/>at<sp/>your<sp/>peril.<sp/><sp/>It<sp/>is</highlight></codeline>
<codeline><highlight class="normal">not<sp/>magic<sp/>like<sp/>Array<sp/>length.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.toArray()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Convert<sp/>the<sp/>list<sp/>to<sp/>an<sp/>array.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.forEach(fn,<sp/>[thisp])</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Call<sp/>a<sp/>function<sp/>on<sp/>each<sp/>item<sp/>in<sp/>the<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.forEachReverse(fn,<sp/>[thisp])</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Call<sp/>a<sp/>function<sp/>on<sp/>each<sp/>item<sp/>in<sp/>the<sp/>list,<sp/>in<sp/>reverse<sp/>order.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.get(n)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Get<sp/>the<sp/>data<sp/>at<sp/>position<sp/>`n`<sp/>in<sp/>the<sp/>list.<sp/><sp/>If<sp/>you<sp/>use<sp/>this<sp/>a<sp/>lot,</highlight></codeline>
<codeline><highlight class="normal">probably<sp/>better<sp/>off<sp/>just<sp/>using<sp/>an<sp/>Array.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.getReverse(n)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Get<sp/>the<sp/>data<sp/>at<sp/>position<sp/>`n`,<sp/>counting<sp/>from<sp/>the<sp/>tail.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.map(fn,<sp/>thisp)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Create<sp/>a<sp/>new<sp/>Yallist<sp/>with<sp/>the<sp/>result<sp/>of<sp/>calling<sp/>the<sp/>function<sp/>on<sp/>each</highlight></codeline>
<codeline><highlight class="normal">item.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.mapReverse(fn,<sp/>thisp)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Same<sp/>as<sp/>`map`,<sp/>but<sp/>in<sp/>reverse.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.pop()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Get<sp/>the<sp/>data<sp/>from<sp/>the<sp/>list<sp/>tail,<sp/>and<sp/>remove<sp/>the<sp/>tail<sp/>from<sp/>the<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.push(item,<sp/>...)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Insert<sp/>one<sp/>or<sp/>more<sp/>items<sp/>to<sp/>the<sp/>tail<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.reduce(fn,<sp/>initialValue)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Like<sp/>Array.reduce.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.reduceReverse</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Like<sp/>Array.reduce,<sp/>but<sp/>in<sp/>reverse.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.reverse</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Reverse<sp/>the<sp/>list<sp/>in<sp/>place.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.shift()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Get<sp/>the<sp/>data<sp/>from<sp/>the<sp/>list<sp/>head,<sp/>and<sp/>remove<sp/>the<sp/>head<sp/>from<sp/>the<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.slice([from],<sp/>[to])</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Just<sp/>like<sp/>Array.slice,<sp/>but<sp/>returns<sp/>a<sp/>new<sp/>Yallist.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.sliceReverse([from],<sp/>[to])</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Just<sp/>like<sp/>yallist.slice,<sp/>but<sp/>the<sp/>result<sp/>is<sp/>returned<sp/>in<sp/>reverse.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.toArray()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Create<sp/>an<sp/>array<sp/>representation<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.toArrayReverse()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Create<sp/>a<sp/>reversed<sp/>array<sp/>representation<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.unshift(item,<sp/>...)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Insert<sp/>one<sp/>or<sp/>more<sp/>items<sp/>to<sp/>the<sp/>head<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.unshiftNode(node)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Move<sp/>a<sp/>Node<sp/>object<sp/>to<sp/>the<sp/>front<sp/>of<sp/>the<sp/>list.<sp/><sp/>(That<sp/>is,<sp/>pull<sp/>it<sp/>out<sp/>of</highlight></codeline>
<codeline><highlight class="normal">wherever<sp/>it<sp/>lives,<sp/>and<sp/>make<sp/>it<sp/>the<sp/>new<sp/>head.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>the<sp/>node<sp/>belongs<sp/>to<sp/>a<sp/>different<sp/>list,<sp/>then<sp/>that<sp/>list<sp/>will<sp/>remove<sp/>it</highlight></codeline>
<codeline><highlight class="normal">first.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.pushNode(node)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Move<sp/>a<sp/>Node<sp/>object<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list.<sp/><sp/>(That<sp/>is,<sp/>pull<sp/>it<sp/>out<sp/>of</highlight></codeline>
<codeline><highlight class="normal">wherever<sp/>it<sp/>lives,<sp/>and<sp/>make<sp/>it<sp/>the<sp/>new<sp/>tail.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>the<sp/>node<sp/>belongs<sp/>to<sp/>a<sp/>list<sp/>already,<sp/>then<sp/>that<sp/>list<sp/>will<sp/>remove<sp/>it</highlight></codeline>
<codeline><highlight class="normal">first.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>yallist.removeNode(node)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Remove<sp/>a<sp/>node<sp/>from<sp/>the<sp/>list,<sp/>preserving<sp/>referential<sp/>integrity<sp/>of<sp/>head</highlight></codeline>
<codeline><highlight class="normal">and<sp/>tail<sp/>and<sp/>other<sp/>nodes.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Will<sp/>throw<sp/>an<sp/>error<sp/>if<sp/>you<sp/>try<sp/>to<sp/>have<sp/>a<sp/>list<sp/>remove<sp/>a<sp/>node<sp/>that</highlight></codeline>
<codeline><highlight class="normal">doesn&apos;t<sp/>belong<sp/>to<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Yallist.Node</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>class<sp/>that<sp/>holds<sp/>the<sp/>data<sp/>and<sp/>is<sp/>actually<sp/>the<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Call<sp/>with<sp/>`var<sp/>n<sp/>=<sp/>new<sp/>Node(value,<sp/>previousNode,<sp/>nextNode)`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>if<sp/>you<sp/>do<sp/>direct<sp/>operations<sp/>on<sp/>Nodes<sp/>themselves,<sp/>it&apos;s<sp/>very</highlight></codeline>
<codeline><highlight class="normal">easy<sp/>to<sp/>get<sp/>into<sp/>weird<sp/>states<sp/>where<sp/>the<sp/>list<sp/>is<sp/>broken.<sp/><sp/>Be<sp/>careful<sp/>:)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>node.next</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>next<sp/>node<sp/>in<sp/>the<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>node.prev</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>previous<sp/>node<sp/>in<sp/>the<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>node.value</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>data<sp/>the<sp/>node<sp/>contains.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>node.list</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>list<sp/>to<sp/>which<sp/>this<sp/>node<sp/>belongs.<sp/><sp/>(Null<sp/>if<sp/>it<sp/>does<sp/>not<sp/>belong<sp/>to</highlight></codeline>
<codeline><highlight class="normal">any<sp/>list.)</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/yallist/README.md"/>
  </compounddef>
</doxygen>
