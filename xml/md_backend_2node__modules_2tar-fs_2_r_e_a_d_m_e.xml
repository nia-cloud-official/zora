<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2tar-fs_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2tar-fs_2_r_e_a_d_m_e</compoundname>
    <title>tar-fs</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2tar-fs_2_r_e_a_d_m_e_1autotoc_md3776"/> filesystem bindings for <ulink url="https://github.com/mafintosh/tar-stream">tar-stream</ulink>.</para>
<para><programlisting><codeline><highlight class="normal">npm<sp/>install<sp/>tar-fs</highlight></codeline>
</programlisting></para>
<para><ulink url="http://travis-ci.org/mafintosh/tar-fs"><image type="html" name="https://secure.travis-ci.org/mafintosh/tar-fs.png" alt="build status" inline="yes"></image>
</ulink></para>
<sect1 id="md_backend_2node__modules_2tar-fs_2_r_e_a_d_m_e_1autotoc_md3777">
<title>Usage</title><para>tar-fs allows you to pack directories into tarballs and extract tarballs into directories.</para>
<para>It doesn&apos;t gunzip for you, so if you want to extract a <computeroutput>.tar.gz</computeroutput> with this you&apos;ll need to use something like <ulink url="https://github.com/mafintosh/gunzip-maybe">gunzip-maybe</ulink> in addition to this.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>tar<sp/>=<sp/>require(&apos;tar-fs&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>fs<sp/>=<sp/>require(&apos;fs&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>packing<sp/>a<sp/>directory</highlight></codeline>
<codeline><highlight class="normal">tar.pack(&apos;./my-directory&apos;).pipe(fs.createWriteStream(&apos;my-tarball.tar&apos;))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>extracting<sp/>a<sp/>directory</highlight></codeline>
<codeline><highlight class="normal">fs.createReadStream(&apos;my-other-tarball.tar&apos;).pipe(tar.extract(&apos;./my-other-directory&apos;))</highlight></codeline>
</programlisting></para>
<para>To ignore various files when packing or extracting add a ignore function to the options. <computeroutput>ignore</computeroutput> is also an alias for <computeroutput>filter</computeroutput>. Additionally you get <computeroutput>header</computeroutput> if you use ignore while extracting. That way you could also filter by metadata.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>pack<sp/>=<sp/>tar.pack(&apos;./my-directory&apos;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ignore:<sp/>function(name)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>path.extname(name)<sp/>===<sp/>&apos;.bin&apos;<sp/>//<sp/>ignore<sp/>.bin<sp/>files<sp/>when<sp/>packing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>extract<sp/>=<sp/>tar.extract(&apos;./my-other-directory&apos;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ignore:<sp/>function(name)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>path.extname(name)<sp/>===<sp/>&apos;.bin&apos;<sp/>//<sp/>ignore<sp/>.bin<sp/>files<sp/>inside<sp/>the<sp/>tarball<sp/>when<sp/>extracing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>extractFilesDirs<sp/>=<sp/>tar.extract(&apos;./my-other-other-directory&apos;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ignore:<sp/>function(_,<sp/>header)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>pass<sp/>files<sp/>&amp;<sp/>directories,<sp/>ignore<sp/>e.g.<sp/>symlinks</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>header.type<sp/>!==<sp/>&apos;file&apos;<sp/>&amp;&amp;<sp/>header.type<sp/>!==<sp/>&apos;directory&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
</programlisting></para>
<para>You can also specify which entries to pack using the <computeroutput>entries</computeroutput> option</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>pack<sp/>=<sp/>tar.pack(&apos;./my-directory&apos;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>entries:<sp/>[&apos;file1&apos;,<sp/>&apos;subdir/file2&apos;]<sp/>//<sp/>only<sp/>the<sp/>specific<sp/>entries<sp/>will<sp/>be<sp/>packed</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
</programlisting></para>
<para>If you want to modify the headers when packing/extracting add a map function to the options</para>
<para><programlisting><codeline><highlight class="normal"><sp/>js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>pack<sp/>=<sp/>tar.pack(&apos;./my-directory&apos;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>map:<sp/>function(header)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>header.name<sp/>=<sp/>&apos;prefixed/&apos;+header.name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>header</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>extract<sp/>=<sp/>tar.extract(&apos;./my-directory&apos;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>map:<sp/>function(header)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>header.name<sp/>=<sp/>&apos;another-prefix/&apos;+header.name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>header</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
</programlisting></para>
<para>Similarly you can use <computeroutput>mapStream</computeroutput> incase you wanna modify the input/output file streams</para>
<para><programlisting><codeline><highlight class="normal"><sp/>js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>pack<sp/>=<sp/>tar.pack(&apos;./my-directory&apos;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mapStream:<sp/>function(fileStream,<sp/>header)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>NOTE:<sp/>the<sp/>returned<sp/>stream<sp/>HAS<sp/>to<sp/>have<sp/>the<sp/>same<sp/>length<sp/>as<sp/>the<sp/>input<sp/>stream.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>If<sp/>not<sp/>make<sp/>sure<sp/>to<sp/>update<sp/>the<sp/>size<sp/>in<sp/>the<sp/>header<sp/>passed<sp/>in<sp/>here.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(path.extname(header.name)<sp/>===<sp/>&apos;.js&apos;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>fileStream.pipe(someTransform)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>fileStream;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>extract<sp/>=<sp/>tar.extract(&apos;./my-directory&apos;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mapStream:<sp/>function(fileStream,<sp/>header)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(path.extname(header.name)<sp/>===<sp/>&apos;.js&apos;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>fileStream.pipe(someTransform)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>fileStream;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
</programlisting></para>
<para>Set <computeroutput>options.fmode</computeroutput> and <computeroutput>options.dmode</computeroutput> to ensure that files/directories extracted have the corresponding modes</para>
<para><programlisting><codeline><highlight class="normal"><sp/>js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>extract<sp/>=<sp/>tar.extract(&apos;./my-directory&apos;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dmode:<sp/>parseInt(555,<sp/>8),<sp/>//<sp/>all<sp/>dirs<sp/>should<sp/>be<sp/>readable</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fmode:<sp/>parseInt(444,<sp/>8)<sp/>//<sp/>all<sp/>files<sp/>should<sp/>be<sp/>readable</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
</programlisting></para>
<para>It can be useful to use <computeroutput>dmode</computeroutput> and <computeroutput>fmode</computeroutput> if you are packing/unpacking tarballs between *nix/windows to ensure that all files/directories unpacked are readable.</para>
<para>Alternatively you can set <computeroutput>options.readable</computeroutput> and/or <computeroutput>options.writable</computeroutput> to set the dmode and fmode to readable/writable.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>extract<sp/>=<sp/>tar.extract(&apos;./my-directory&apos;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>readable:<sp/>true,<sp/>//<sp/>all<sp/>dirs<sp/>and<sp/>files<sp/>should<sp/>be<sp/>readable</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>writable:<sp/>true,<sp/>//<sp/>all<sp/>dirs<sp/>and<sp/>files<sp/>should<sp/>be<sp/>writable</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
</programlisting></para>
<para>Set <computeroutput>options.strict</computeroutput> to <computeroutput>false</computeroutput> if you want to ignore errors due to unsupported entry types (like device files)</para>
<para>To dereference symlinks (pack the contents of the symlink instead of the link itself) set <computeroutput>options.dereference</computeroutput> to <computeroutput>true</computeroutput>.</para>
</sect1>
<sect1 id="md_backend_2node__modules_2tar-fs_2_r_e_a_d_m_e_1autotoc_md3778">
<title>Copy a directory</title><para>Copying a directory with permissions and mtime intact is as simple as</para>
<para><programlisting><codeline><highlight class="normal"><sp/>js</highlight></codeline>
<codeline><highlight class="normal">tar.pack(&apos;source-directory&apos;).pipe(tar.extract(&apos;dest-directory&apos;))</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2tar-fs_2_r_e_a_d_m_e_1autotoc_md3779">
<title>Interaction with <ulink url="https://github.com/mafintosh/tar-stream"><computeroutput>tar-stream</computeroutput></ulink></title><para>Use <computeroutput>finalize: false</computeroutput> and the <computeroutput>finish</computeroutput> hook to leave the pack stream open for further entries (see <ulink url="https://github.com/mafintosh/tar-stream#packing"><computeroutput>tar-stream#pack</computeroutput></ulink>), and use <computeroutput>pack</computeroutput> to pass an existing pack stream.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>mypack<sp/>=<sp/>tar.pack(&apos;./my-directory&apos;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>finalize:<sp/>false,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>finish:<sp/>function(sameAsMypack)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mypack.entry({name:<sp/>&apos;generated-file.txt&apos;},<sp/>&quot;hello&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tar.pack(&apos;./other-directory&apos;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pack:<sp/>sameAsMypack</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2tar-fs_2_r_e_a_d_m_e_1autotoc_md3780">
<title>Performance</title><para>Packing and extracting a 6.1 GB with 2496 directories and 2398 files yields the following results on my Macbook Air. <ulink url="https://gist.github.com/mafintosh/8102201">See the benchmark here</ulink></para>
<para><itemizedlist>
<listitem><para>tar-fs: 34.261 seconds</para>
</listitem><listitem><para><ulink url="https://github.com/isaacs/node-tar">node-tar</ulink>: 366.123 seconds (or 10x slower)</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_backend_2node__modules_2tar-fs_2_r_e_a_d_m_e_1autotoc_md3781">
<title>License</title><para>MIT </para>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/tar-fs/README.md"/>
  </compounddef>
</doxygen>
