<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="backend_2node__modules_2mimic-response_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>readme.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>mimic-response<sp/>[![Build<sp/>Status](https://travis-ci.com/sindresorhus/mimic-response.svg?branch=master)](https://travis-ci.com/sindresorhus/mimic-response)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Mimic<sp/>a<sp/>[Node.js<sp/>HTTP<sp/>response<sp/>stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Install</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">$<sp/>npm<sp/>install<sp/>mimic-response</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Usage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>stream<sp/>=<sp/>require(&apos;stream&apos;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>mimicResponse<sp/>=<sp/>require(&apos;mimic-response&apos;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>responseStream<sp/>=<sp/>getHttpResponseStream();</highlight></codeline>
<codeline><highlight class="normal">const<sp/>myStream<sp/>=<sp/>new<sp/>stream.PassThrough();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">mimicResponse(responseStream,<sp/>myStream);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">console.log(myStream.statusCode);</highlight></codeline>
<codeline><highlight class="normal">//=&gt;<sp/>200</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>API</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>mimicResponse(from,<sp/>to)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Note<sp/>#1:**<sp/>The<sp/>`from.destroy(error)`<sp/>function<sp/>is<sp/>not<sp/>proxied.<sp/>You<sp/>have<sp/>to<sp/>call<sp/>it<sp/>manually:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>stream<sp/>=<sp/>require(&apos;stream&apos;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>mimicResponse<sp/>=<sp/>require(&apos;mimic-response&apos;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>responseStream<sp/>=<sp/>getHttpResponseStream();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>myStream<sp/>=<sp/>new<sp/>stream.PassThrough({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>destroy(error,<sp/>callback)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>responseStream.destroy();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback(error);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">myStream.destroy();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Please<sp/>note<sp/>that<sp/>`myStream`<sp/>and<sp/>`responseStream`<sp/>never<sp/>throws.<sp/>The<sp/>error<sp/>is<sp/>passed<sp/>to<sp/>the<sp/>request<sp/>instead.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>from</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Type:<sp/>`Stream`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[Node.js<sp/>HTTP<sp/>response<sp/>stream.](https://nodejs.org/api/http.html#http_class_http_incomingmessage)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>to</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Type:<sp/>`Stream`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Any<sp/>stream.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Related</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>[mimic-fn](https://github.com/sindresorhus/mimic-fn)<sp/>-<sp/>Make<sp/>a<sp/>function<sp/>mimic<sp/>another<sp/>one</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[clone-response](https://github.com/lukechilds/clone-response)<sp/>-<sp/>Clone<sp/>a<sp/>Node.js<sp/>response<sp/>stream</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;div<sp/>align=&quot;center&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;b&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;https://tidelift.com/subscription/pkg/npm-mimic-response?utm_source=npm-mimic-response&amp;utm_medium=referral&amp;utm_campaign=readme&quot;&gt;Get<sp/>professional<sp/>support<sp/>for<sp/>this<sp/>package<sp/>with<sp/>a<sp/>Tidelift<sp/>subscription&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/b&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;sub&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tidelift<sp/>helps<sp/>make<sp/>open<sp/>source<sp/>sustainable<sp/>for<sp/>maintainers<sp/>while<sp/>giving<sp/>companies&lt;br&gt;assurances<sp/>about<sp/>security,<sp/>maintenance,<sp/>and<sp/>licensing<sp/>for<sp/>their<sp/>dependencies.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/sub&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/div&gt;</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/mimic-response/readme.md"/>
  </compounddef>
</doxygen>
