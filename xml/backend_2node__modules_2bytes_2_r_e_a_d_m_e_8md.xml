<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="backend_2node__modules_2bytes_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>Readme.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Bytes<sp/>utility</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[![NPM<sp/>Version][npm-image]][npm-url]</highlight></codeline>
<codeline><highlight class="normal">[![NPM<sp/>Downloads][downloads-image]][downloads-url]</highlight></codeline>
<codeline><highlight class="normal">[![Build<sp/>Status][ci-image]][ci-url]</highlight></codeline>
<codeline><highlight class="normal">[![Test<sp/>Coverage][coveralls-image]][coveralls-url]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Utility<sp/>to<sp/>parse<sp/>a<sp/>string<sp/>bytes<sp/>(ex:<sp/>`1TB`)<sp/>to<sp/>bytes<sp/>(`1099511627776`)<sp/>and<sp/>vice-versa.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Installation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>a<sp/>[Node.js](https://nodejs.org/en/)<sp/>module<sp/>available<sp/>through<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[npm<sp/>registry](https://www.npmjs.com/).<sp/>Installation<sp/>is<sp/>done<sp/>using<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[`npm<sp/>install`<sp/>command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">$<sp/>npm<sp/>install<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Usage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>bytes<sp/>=<sp/>require(&apos;bytes&apos;);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>bytes(number｜string<sp/>value,<sp/>[options]):<sp/>number｜string｜null</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Default<sp/>export<sp/>function.<sp/>Delegates<sp/>to<sp/>either<sp/>`bytes.format`<sp/>or<sp/>`bytes.parse`<sp/>based<sp/>on<sp/>the<sp/>type<sp/>of<sp/>`value`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Arguments**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Name<sp/><sp/><sp/><sp/>|<sp/>Type<sp/><sp/><sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------|----------|--------------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>value<sp/><sp/><sp/>|<sp/>`number`｜`string`<sp/>|<sp/>Number<sp/>value<sp/>to<sp/>format<sp/>or<sp/>string<sp/>value<sp/>to<sp/>parse<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>options<sp/>|<sp/>`Object`<sp/>|<sp/>Conversion<sp/>options<sp/>for<sp/>`format`<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Name<sp/><sp/><sp/><sp/>|<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------|------------------|-------------------------------------------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>results<sp/>|<sp/>`string`｜`number`｜`null`<sp/>|<sp/>Return<sp/>null<sp/>upon<sp/>error.<sp/>Numeric<sp/>value<sp/>in<sp/>bytes,<sp/>or<sp/>string<sp/>value<sp/>otherwise.<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Example**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">bytes(1024);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>output:<sp/>&apos;1KB&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bytes(&apos;1KB&apos;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>output:<sp/>1024</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>bytes.format(number<sp/>value,<sp/>[options]):<sp/>string｜null</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Format<sp/>the<sp/>given<sp/>value<sp/>in<sp/>bytes<sp/>into<sp/>a<sp/>string.<sp/>If<sp/>the<sp/>value<sp/>is<sp/>negative,<sp/>it<sp/>is<sp/>kept<sp/>as<sp/>such.<sp/>If<sp/>it<sp/>is<sp/>a<sp/>float,<sp/>it<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/>rounded.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Arguments**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Name<sp/><sp/><sp/><sp/>|<sp/>Type<sp/><sp/><sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------|----------|--------------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>value<sp/><sp/><sp/>|<sp/>`number`<sp/>|<sp/>Value<sp/>in<sp/>bytes<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>options<sp/>|<sp/>`Object`<sp/>|<sp/>Conversion<sp/>options<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Options**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Property<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Type<sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|-------------------|--------|-----------------------------------------------------------------------------------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>decimalPlaces<sp/>|<sp/>`number`｜`null`<sp/>|<sp/>Maximum<sp/>number<sp/>of<sp/>decimal<sp/>places<sp/>to<sp/>include<sp/>in<sp/>output.<sp/>Default<sp/>value<sp/>to<sp/>`2`.<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>fixedDecimals<sp/>|<sp/>`boolean`｜`null`<sp/>|<sp/>Whether<sp/>to<sp/>always<sp/>display<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>decimal<sp/>places.<sp/>Default<sp/>value<sp/>to<sp/>`false`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>thousandsSeparator<sp/>|<sp/>`string`｜`null`<sp/>|<sp/>Example<sp/>of<sp/>values:<sp/>`&apos;<sp/>&apos;`,<sp/>`&apos;,&apos;`<sp/>and<sp/>`&apos;.&apos;`...<sp/>Default<sp/>value<sp/>to<sp/>`&apos;&apos;`.<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>unit<sp/>|<sp/>`string`｜`null`<sp/>|<sp/>The<sp/>unit<sp/>in<sp/>which<sp/>the<sp/>result<sp/>will<sp/>be<sp/>returned<sp/>(B/KB/MB/GB/TB).<sp/>Default<sp/>value<sp/>to<sp/>`&apos;&apos;`<sp/>(which<sp/>means<sp/>auto<sp/>detect).<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>unitSeparator<sp/>|<sp/>`string`｜`null`<sp/>|<sp/>Separator<sp/>to<sp/>use<sp/>between<sp/>number<sp/>and<sp/>unit.<sp/>Default<sp/>value<sp/>to<sp/>`&apos;&apos;`.<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Name<sp/><sp/><sp/><sp/>|<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------|------------------|-------------------------------------------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>results<sp/>|<sp/>`string`｜`null`<sp/>|<sp/>Return<sp/>null<sp/>upon<sp/>error.<sp/>String<sp/>value<sp/>otherwise.<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Example**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">bytes.format(1024);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>output:<sp/>&apos;1KB&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bytes.format(1000);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>output:<sp/>&apos;1000B&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bytes.format(1000,<sp/>{thousandsSeparator:<sp/>&apos;<sp/>&apos;});</highlight></codeline>
<codeline><highlight class="normal">//<sp/>output:<sp/>&apos;1<sp/>000B&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bytes.format(1024<sp/>*<sp/>1.7,<sp/>{decimalPlaces:<sp/>0});</highlight></codeline>
<codeline><highlight class="normal">//<sp/>output:<sp/>&apos;2KB&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bytes.format(1024,<sp/>{unitSeparator:<sp/>&apos;<sp/>&apos;});</highlight></codeline>
<codeline><highlight class="normal">//<sp/>output:<sp/>&apos;1<sp/>KB&apos;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>bytes.parse(string｜number<sp/>value):<sp/>number｜null</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Parse<sp/>the<sp/>string<sp/>value<sp/>into<sp/>an<sp/>integer<sp/>in<sp/>bytes.<sp/>If<sp/>no<sp/>unit<sp/>is<sp/>given,<sp/>or<sp/>`value`</highlight></codeline>
<codeline><highlight class="normal">is<sp/>a<sp/>number,<sp/>it<sp/>is<sp/>assumed<sp/>the<sp/>value<sp/>is<sp/>in<sp/>bytes.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Supported<sp/>units<sp/>and<sp/>abbreviations<sp/>are<sp/>as<sp/>follows<sp/>and<sp/>are<sp/>case-insensitive:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`b`<sp/>for<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`kb`<sp/>for<sp/>kilobytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`mb`<sp/>for<sp/>megabytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`gb`<sp/>for<sp/>gigabytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`tb`<sp/>for<sp/>terabytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`pb`<sp/>for<sp/>petabytes</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>units<sp/>are<sp/>in<sp/>powers<sp/>of<sp/>two,<sp/>not<sp/>ten.<sp/>This<sp/>means<sp/>1kb<sp/>=<sp/>1024b<sp/>according<sp/>to<sp/>this<sp/>parser.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Arguments**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Type<sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------------|--------|--------------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>value<sp/><sp/><sp/>|<sp/>`string`｜`number`<sp/>|<sp/>String<sp/>to<sp/>parse,<sp/>or<sp/>number<sp/>in<sp/>bytes.<sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Name<sp/><sp/><sp/><sp/>|<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------|-------------|-------------------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>results<sp/>|<sp/>`number`｜`null`<sp/>|<sp/>Return<sp/>null<sp/>upon<sp/>error.<sp/>Value<sp/>in<sp/>bytes<sp/>otherwise.<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Example**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">bytes.parse(&apos;1KB&apos;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>output:<sp/>1024</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bytes.parse(&apos;1024&apos;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>output:<sp/>1024</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bytes.parse(1024);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>output:<sp/>1024</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>License</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[MIT](LICENSE)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[ci-image]:<sp/>https://badgen.net/github/checks/visionmedia/bytes.js/master?label=ci</highlight></codeline>
<codeline><highlight class="normal">[ci-url]:<sp/>https://github.com/visionmedia/bytes.js/actions?query=workflow%3Aci</highlight></codeline>
<codeline><highlight class="normal">[coveralls-image]:<sp/>https://badgen.net/coveralls/c/github/visionmedia/bytes.js/master</highlight></codeline>
<codeline><highlight class="normal">[coveralls-url]:<sp/>https://coveralls.io/r/visionmedia/bytes.js?branch=master</highlight></codeline>
<codeline><highlight class="normal">[downloads-image]:<sp/>https://badgen.net/npm/dm/bytes</highlight></codeline>
<codeline><highlight class="normal">[downloads-url]:<sp/>https://npmjs.org/package/bytes</highlight></codeline>
<codeline><highlight class="normal">[npm-image]:<sp/>https://badgen.net/npm/v/bytes</highlight></codeline>
<codeline><highlight class="normal">[npm-url]:<sp/>https://npmjs.org/package/bytes</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/bytes/Readme.md"/>
  </compounddef>
</doxygen>
