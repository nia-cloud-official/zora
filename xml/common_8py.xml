<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="common_8py" kind="file" language="Python">
    <compoundname>common.py</compoundname>
    <innerclass refid="classgyp_1_1common_1_1memoize" prot="public">gyp::common::memoize</innerclass>
    <innerclass refid="classgyp_1_1common_1_1_gyp_error" prot="public">gyp::common::GypError</innerclass>
    <innerclass refid="classgyp_1_1common_1_1_ordered_set" prot="public">gyp::common::OrderedSet</innerclass>
    <innerclass refid="classgyp_1_1common_1_1_cycle_error" prot="public">gyp::common::CycleError</innerclass>
    <innernamespace refid="namespacegyp">gyp</innernamespace>
    <innernamespace refid="namespacegyp_1_1common">gyp::common</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacegyp_1_1common" refkind="compound"><highlight class="comment">#<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Google<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a<sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>errno</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>filecmp</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os.path</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>re</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>tempfile</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>subprocess</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>collections.abc<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>MutableSet</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/>A<sp/>minimal<sp/>memoizing<sp/>decorator.<sp/>It&apos;ll<sp/>blow<sp/>up<sp/>if<sp/>the<sp/>args<sp/>aren&apos;t<sp/>immutable,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/>among<sp/>other<sp/>&quot;problems&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="classgyp_1_1common_1_1memoize" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1memoize" kindref="compound">memoize</ref>:</highlight></codeline>
<codeline lineno="19" refid="classgyp_1_1common_1_1memoize_1a99201b654935aab8ffcd7238febff241" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1memoize_1a99201b654935aab8ffcd7238febff241" kindref="member">__init__</ref>(self,<sp/>func):</highlight></codeline>
<codeline lineno="20" refid="classgyp_1_1common_1_1memoize_1a9a743c72470df56e04e31f5924680428" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common_1_1memoize_1a9a743c72470df56e04e31f5924680428" kindref="member">func</ref><sp/>=<sp/>func</highlight></codeline>
<codeline lineno="21" refid="classgyp_1_1common_1_1memoize_1af3fae50653959874e0fe5145b7276f2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common_1_1memoize_1af3fae50653959874e0fe5145b7276f2c" kindref="member">cache</ref><sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="classgyp_1_1common_1_1memoize_1ae596e326dfd91a5298b0747661044008" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1memoize_1ae596e326dfd91a5298b0747661044008" kindref="member">__call__</ref>(self,<sp/>*args):</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classgyp_1_1common_1_1memoize_1af3fae50653959874e0fe5145b7276f2c" kindref="member">cache</ref>[args]</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>KeyError:</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>self.<ref refid="classgyp_1_1common_1_1memoize_1a9a743c72470df56e04e31f5924680428" kindref="member">func</ref>(*args)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common_1_1memoize_1af3fae50653959874e0fe5145b7276f2c" kindref="member">cache</ref>[args]<sp/>=<sp/>result</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="classgyp_1_1common_1_1_gyp_error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_gyp_error" kindref="compound">GypError</ref>(Exception):</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Error<sp/>class<sp/>representing<sp/>an<sp/>error,<sp/>which<sp/>is<sp/>to<sp/>be<sp/>presented</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/>to<sp/>the<sp/>user.<sp/><sp/>The<sp/>main<sp/>entry<sp/>point<sp/>will<sp/>catch<sp/>and<sp/>display<sp/>this.</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="namespacegyp_1_1common_1ae6fb1d829b57935daeda1b046ca11ccc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1ae6fb1d829b57935daeda1b046ca11ccc" kindref="member">ExceptionAppend</ref>(e,<sp/>msg):</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Append<sp/>a<sp/>message<sp/>to<sp/>the<sp/>given<sp/>exception&apos;s<sp/>message.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>e.args:</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.args<sp/>=<sp/>(msg,)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>len(e.args)<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.args<sp/>=<sp/>(str(e.args[0])<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>msg,)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.args<sp/>=<sp/>(str(e.args[0])<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>msg,)<sp/>+<sp/>e.args[1:]</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="namespacegyp_1_1common_1a6cf89010e0d5468d04c1f7f7fb42ead4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a6cf89010e0d5468d04c1f7f7fb42ead4" kindref="member">FindQualifiedTargets</ref>(target,<sp/>qualified_list):</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"><sp/><sp/>Given<sp/>a<sp/>list<sp/>of<sp/>qualified<sp/>targets,<sp/>return<sp/>the<sp/>qualified<sp/>targets<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"><sp/><sp/>specified<sp/>|target|.</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[t<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>t<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>qualified_list<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><ref refid="namespacegyp_1_1common_1a51180f038e57ff79c30f6231d1d7958f" kindref="member">ParseQualifiedTarget</ref>(t)[1]<sp/>==<sp/>target]</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="namespacegyp_1_1common_1a51180f038e57ff79c30f6231d1d7958f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a51180f038e57ff79c30f6231d1d7958f" kindref="member">ParseQualifiedTarget</ref>(target):</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Splits<sp/>a<sp/>qualified<sp/>target<sp/>into<sp/>a<sp/>build<sp/>file,<sp/>target<sp/>name<sp/>and<sp/>toolset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>NOTE:<sp/>rsplit<sp/>is<sp/>used<sp/>to<sp/>disambiguate<sp/>the<sp/>Windows<sp/>drive<sp/>letter<sp/>separator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>target_split<sp/>=<sp/>target.rsplit(</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">,<sp/>1)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(target_split)<sp/>==<sp/>2:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[build_file,<sp/>target]<sp/>=<sp/>target_split</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>build_file<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>target_split<sp/>=<sp/>target.rsplit(</highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>1)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(target_split)<sp/>==<sp/>2:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[target,<sp/>toolset]<sp/>=<sp/>target_split</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toolset<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[build_file,<sp/>target,<sp/>toolset]</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="namespacegyp_1_1common_1ad4fc9c35869c8abe1a3a0dc5e42c5263" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1ad4fc9c35869c8abe1a3a0dc5e42c5263" kindref="member">ResolveTarget</ref>(build_file,<sp/>target,<sp/>toolset):</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>function<sp/>resolves<sp/>a<sp/>target<sp/>into<sp/>a<sp/>canonical<sp/>form:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>a<sp/>fully<sp/>defined<sp/>build<sp/>file,<sp/>either<sp/>absolute<sp/>or<sp/>relative<sp/>to<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>a<sp/>target<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>a<sp/>toolset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>build_file<sp/>is<sp/>the<sp/>file<sp/>relative<sp/>to<sp/>which<sp/>&apos;target&apos;<sp/>is<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>target<sp/>is<sp/>the<sp/>qualified<sp/>target.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>toolset<sp/>is<sp/>the<sp/>default<sp/>toolset<sp/>for<sp/>that<sp/>target.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>[parsed_build_file,<sp/>target,<sp/>parsed_toolset]<sp/>=<sp/><ref refid="namespacegyp_1_1common_1a51180f038e57ff79c30f6231d1d7958f" kindref="member">ParseQualifiedTarget</ref>(target)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>parsed_build_file:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>build_file:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>a<sp/>relative<sp/>path,<sp/>parsed_build_file<sp/>is<sp/>relative<sp/>to<sp/>the<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>containing<sp/>build_file.<sp/><sp/>If<sp/>build_file<sp/>is<sp/>not<sp/>in<sp/>the<sp/>current<sp/>directory,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>parsed_build_file<sp/>is<sp/>not<sp/>a<sp/>usable<sp/>path<sp/>as-is.<sp/><sp/>Resolve<sp/>it<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>interpreting<sp/>it<sp/>as<sp/>relative<sp/>to<sp/>build_file.<sp/><sp/>If<sp/>parsed_build_file<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>absolute,<sp/>it<sp/>is<sp/>usable<sp/>as<sp/>a<sp/>path<sp/>regardless<sp/>of<sp/>the<sp/>current<sp/>directory,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>os.path.join<sp/>will<sp/>return<sp/>it<sp/>as-is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>build_file<sp/>=<sp/>os.path.normpath(</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.path.join(os.path.dirname(build_file),<sp/>parsed_build_file)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Further<sp/>(to<sp/>handle<sp/>cases<sp/>like<sp/>../cwd),<sp/>make<sp/>it<sp/>relative<sp/>to<sp/>cwd)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.isabs(build_file):</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>build_file<sp/>=<sp/><ref refid="namespacegyp_1_1common_1a8533ebdd9774c22ee7f7450c54239796" kindref="member">RelativePath</ref>(build_file,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>build_file<sp/>=<sp/>parsed_build_file</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>parsed_toolset:</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toolset<sp/>=<sp/>parsed_toolset</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[build_file,<sp/>target,<sp/>toolset]</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="namespacegyp_1_1common_1a07c15710a1e349c4f75efb69406be2f1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a07c15710a1e349c4f75efb69406be2f1" kindref="member">BuildFile</ref>(fully_qualified_target):</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Extracts<sp/>the<sp/>build<sp/>file<sp/>from<sp/>the<sp/>fully<sp/>qualified<sp/>target.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacegyp_1_1common_1a51180f038e57ff79c30f6231d1d7958f" kindref="member">ParseQualifiedTarget</ref>(fully_qualified_target)[0]</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="namespacegyp_1_1common_1a9d4e917fb02c16790daa4d9d4abb0758" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a9d4e917fb02c16790daa4d9d4abb0758" kindref="member">GetEnvironFallback</ref>(var_list,<sp/>default):</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Look<sp/>up<sp/>a<sp/>key<sp/>in<sp/>the<sp/>environment,<sp/>with<sp/>fallback<sp/>to<sp/>secondary<sp/>keys</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/>and<sp/>finally<sp/>falling<sp/>back<sp/>to<sp/>a<sp/>default<sp/>value.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>var<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>var_list:</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>var<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>os.environ:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.environ[var]</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="namespacegyp_1_1common_1a24688c0cf90537af3efa42115befe64b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a24688c0cf90537af3efa42115befe64b" kindref="member">QualifiedTarget</ref>(build_file,<sp/>target,<sp/>toolset):</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>&quot;Qualified&quot;<sp/>means<sp/>the<sp/>file<sp/>that<sp/>a<sp/>target<sp/>was<sp/>defined<sp/>in<sp/>and<sp/>the<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>name,<sp/>separated<sp/>by<sp/>a<sp/>colon,<sp/>suffixed<sp/>by<sp/>a<sp/>#<sp/>and<sp/>the<sp/>toolset<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>/path/to/file.gyp:target_name#toolset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>fully_qualified<sp/>=<sp/>build_file<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>+<sp/>target</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>toolset:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fully_qualified<sp/>=<sp/>fully_qualified<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal"><sp/>+<sp/>toolset</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fully_qualified</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">@memoize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="namespacegyp_1_1common_1a8533ebdd9774c22ee7f7450c54239796" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a8533ebdd9774c22ee7f7450c54239796" kindref="member">RelativePath</ref>(path,<sp/>relative_to,<sp/>follow_path_symlink=True):</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Assuming<sp/>both<sp/>|path|<sp/>and<sp/>|relative_to|<sp/>are<sp/>relative<sp/>to<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>directory,<sp/>returns<sp/>a<sp/>relative<sp/>path<sp/>that<sp/>identifies<sp/>path<sp/>relative<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>relative_to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>|follow_symlink_path|<sp/>is<sp/>true<sp/>(default)<sp/>and<sp/>|path|<sp/>is<sp/>a<sp/>symlink,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>this<sp/>method<sp/>returns<sp/>a<sp/>path<sp/>to<sp/>the<sp/>real<sp/>file<sp/>represented<sp/>by<sp/>|path|.<sp/>If<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>false,<sp/>this<sp/>method<sp/>returns<sp/>a<sp/>path<sp/>to<sp/>the<sp/>symlink.<sp/>If<sp/>|path|<sp/>is<sp/>not<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>symlink,<sp/>this<sp/>option<sp/>has<sp/>no<sp/>effect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Convert<sp/>to<sp/>normalized<sp/>(and<sp/>therefore<sp/>absolute<sp/>paths).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>follow_path_symlink:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>os.path.realpath(path)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>os.path.abspath(path)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>relative_to<sp/>=<sp/>os.path.realpath(relative_to)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>On<sp/>Windows,<sp/>we<sp/>can&apos;t<sp/>create<sp/>a<sp/>relative<sp/>path<sp/>to<sp/>a<sp/>different<sp/>drive,<sp/>so<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>use<sp/>the<sp/>absolute<sp/>path.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sys.platform<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;win32&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.path.splitdrive(path)[0].lower()</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>os.path.splitdrive(relative_to)[0].lower()</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>):</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Split<sp/>the<sp/>paths<sp/>into<sp/>components.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>path_split<sp/>=<sp/>path.split(os.path.sep)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>relative_to_split<sp/>=<sp/>relative_to.split(os.path.sep)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Determine<sp/>how<sp/>much<sp/>of<sp/>the<sp/>prefix<sp/>the<sp/>two<sp/>paths<sp/>share.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>prefix_len<sp/>=<sp/>len(os.path.commonprefix([path_split,<sp/>relative_to_split]))</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Put<sp/>enough<sp/>&quot;..&quot;<sp/>components<sp/>to<sp/>back<sp/>up<sp/>out<sp/>of<sp/>relative_to<sp/>to<sp/>the<sp/>common</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>prefix,<sp/>and<sp/>then<sp/>append<sp/>the<sp/>part<sp/>of<sp/>path_split<sp/>after<sp/>the<sp/>common<sp/>prefix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>relative_split<sp/>=<sp/>[os.path.pardir]<sp/>*<sp/>(</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len(relative_to_split)<sp/>-<sp/>prefix_len</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>+<sp/>path_split[prefix_len:]</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(relative_split)<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>paths<sp/>were<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Turn<sp/>it<sp/>back<sp/>into<sp/>a<sp/>string<sp/>and<sp/>we&apos;re<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.path.join(*relative_split)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">@memoize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="namespacegyp_1_1common_1a444243e74701615d1cdb73c45ab80575" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a444243e74701615d1cdb73c45ab80575" kindref="member">InvertRelativePath</ref>(path,<sp/>toplevel_dir=None):</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Given<sp/>a<sp/>path<sp/>like<sp/>foo/bar<sp/>that<sp/>is<sp/>relative<sp/>to<sp/>toplevel_dir,<sp/>return</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/>the<sp/>inverse<sp/>relative<sp/>path<sp/>back<sp/>to<sp/>the<sp/>toplevel_dir.</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/>E.g.<sp/>os.path.normpath(os.path.join(path,<sp/>InvertRelativePath(path)))</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/>should<sp/>always<sp/>produce<sp/>the<sp/>empty<sp/>string,<sp/>unless<sp/>the<sp/>path<sp/>contains<sp/>symlinks.</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>path:</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>toplevel_dir<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>toplevel_dir<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>toplevel_dir</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacegyp_1_1common_1a8533ebdd9774c22ee7f7450c54239796" kindref="member">RelativePath</ref>(toplevel_dir,<sp/>os.path.join(toplevel_dir,<sp/>path))</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="namespacegyp_1_1common_1a33bf5b7cd712c3ae3009fbe6d8522f13" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a33bf5b7cd712c3ae3009fbe6d8522f13" kindref="member">FixIfRelativePath</ref>(path,<sp/>relative_to):</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Like<sp/>RelativePath<sp/>but<sp/>returns<sp/>|path|<sp/>unchanged<sp/>if<sp/>it<sp/>is<sp/>absolute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>os.path.isabs(path):</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacegyp_1_1common_1a8533ebdd9774c22ee7f7450c54239796" kindref="member">RelativePath</ref>(path,<sp/>relative_to)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="namespacegyp_1_1common_1a44c828a533e5ef5b8d9435f02d37bb0e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a44c828a533e5ef5b8d9435f02d37bb0e" kindref="member">UnrelativePath</ref>(path,<sp/>relative_to):</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Assuming<sp/>that<sp/>|relative_to|<sp/>is<sp/>relative<sp/>to<sp/>the<sp/>current<sp/>directory,<sp/>and<sp/>|path|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>is<sp/>a<sp/>path<sp/>relative<sp/>to<sp/>the<sp/>dirname<sp/>of<sp/>|relative_to|,<sp/>returns<sp/>a<sp/>path<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>identifies<sp/>|path|<sp/>relative<sp/>to<sp/>the<sp/>current<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>rel_dir<sp/>=<sp/>os.path.dirname(relative_to)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.path.normpath(os.path.join(rel_dir,<sp/>path))</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">#<sp/>re<sp/>objects<sp/>used<sp/>by<sp/>EncodePOSIXShellArgument.<sp/><sp/>See<sp/>IEEE<sp/>1003.1<sp/>XCU.2.2<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">#<sp/>http://www.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_02</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">#<sp/>and<sp/>the<sp/>documentation<sp/>for<sp/>various<sp/>shells.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">#<sp/>_quote<sp/>is<sp/>a<sp/>pattern<sp/>that<sp/>should<sp/>match<sp/>any<sp/>argument<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>quoted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">#<sp/>with<sp/>double-quotes<sp/>by<sp/>EncodePOSIXShellArgument.<sp/><sp/>It<sp/>matches<sp/>the<sp/>following</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">#<sp/>characters<sp/>appearing<sp/>anywhere<sp/>in<sp/>an<sp/>argument:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>\t,<sp/>\n,<sp/>space<sp/><sp/>parameter<sp/>separators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>$<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expansions<sp/>(quoted<sp/>to<sp/>always<sp/>expand<sp/>within<sp/>one<sp/>argument)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>%<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>called<sp/>out<sp/>by<sp/>IEEE<sp/>1003.1<sp/>XCU.2.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>job<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>&apos;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quoting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>(,<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subshell<sp/>execution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>*,<sp/>?,<sp/>[<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pathname<sp/>expansion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command<sp/>delimiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>&lt;,<sp/>&gt;,<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>redirection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>{,<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brace<sp/>expansion<sp/>(bash)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>~<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tilde<sp/>expansion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">#<sp/>It<sp/>also<sp/>matches<sp/>the<sp/>empty<sp/>string,<sp/>because<sp/>&quot;&quot;<sp/>(or<sp/>&apos;&apos;)<sp/>is<sp/>the<sp/>only<sp/>way<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">#<sp/>represent<sp/>an<sp/>empty<sp/>string<sp/>literal<sp/>argument<sp/>to<sp/>a<sp/>POSIX<sp/>shell.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>does<sp/>not<sp/>match<sp/>the<sp/>characters<sp/>in<sp/>_escape,<sp/>because<sp/>those<sp/>need<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">#<sp/>backslash-escaped<sp/>regardless<sp/>of<sp/>whether<sp/>they<sp/>appear<sp/>in<sp/>a<sp/>double-quoted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">#<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="namespacegyp_1_1common_1a1b6d4a091fa4096bfac8838f69274633" refkind="member"><highlight class="normal">_quote<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">&quot;[\t\n<sp/>#$%&amp;&apos;()*;&lt;=&gt;?[{|}~]|^$&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">#<sp/>_escape<sp/>is<sp/>a<sp/>pattern<sp/>that<sp/>should<sp/>match<sp/>any<sp/>character<sp/>that<sp/>needs<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">#<sp/>escaped<sp/>with<sp/>a<sp/>backslash,<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>argument<sp/>matched<sp/>the<sp/>_quote</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">#<sp/>pattern.<sp/><sp/>_escape<sp/>is<sp/>used<sp/>with<sp/>re.sub<sp/>to<sp/>backslash<sp/>anything<sp/>in<sp/>_escape&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">#<sp/>first<sp/>match<sp/>group,<sp/>hence<sp/>the<sp/>(parentheses)<sp/>in<sp/>the<sp/>regular<sp/>expression.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">#<sp/>_escape<sp/>matches<sp/>the<sp/>following<sp/>characters<sp/>appearing<sp/>anywhere<sp/>in<sp/>an<sp/>argument:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>&quot;<sp/><sp/>to<sp/>prevent<sp/>POSIX<sp/>shells<sp/>from<sp/>interpreting<sp/>this<sp/>character<sp/>for<sp/>quoting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>\<sp/><sp/>to<sp/>prevent<sp/>POSIX<sp/>shells<sp/>from<sp/>interpreting<sp/>this<sp/>character<sp/>for<sp/>escaping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>`<sp/><sp/>to<sp/>prevent<sp/>POSIX<sp/>shells<sp/>from<sp/>interpreting<sp/>this<sp/>character<sp/>for<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/>substitution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Missing<sp/>from<sp/>this<sp/>list<sp/>is<sp/>$,<sp/>because<sp/>the<sp/>desired<sp/>behavior<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">#<sp/>EncodePOSIXShellArgument<sp/>is<sp/>to<sp/>permit<sp/>parameter<sp/>(variable)<sp/>expansion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Also<sp/>missing<sp/>from<sp/>this<sp/>list<sp/>is<sp/>!,<sp/>which<sp/>bash<sp/>will<sp/>interpret<sp/>as<sp/>the<sp/>history</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">#<sp/>expansion<sp/>character<sp/>when<sp/>history<sp/>is<sp/>enabled.<sp/><sp/>bash<sp/>does<sp/>not<sp/>enable<sp/>history</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">#<sp/>by<sp/>default<sp/>in<sp/>non-interactive<sp/>shells,<sp/>so<sp/>this<sp/>is<sp/>not<sp/>thought<sp/>to<sp/>be<sp/>a<sp/>problem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">#<sp/>!<sp/>was<sp/>omitted<sp/>from<sp/>this<sp/>list<sp/>because<sp/>bash<sp/>interprets<sp/>&quot;\!&quot;<sp/>as<sp/>a<sp/>literal<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">#<sp/>including<sp/>the<sp/>backslash<sp/>character<sp/>(avoiding<sp/>history<sp/>expansion<sp/>but<sp/>retaining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>backslash),<sp/>which<sp/>would<sp/>not<sp/>be<sp/>correct<sp/>for<sp/>argument<sp/>encoding.<sp/><sp/>Handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">#<sp/>this<sp/>case<sp/>properly<sp/>would<sp/>also<sp/>be<sp/>problematic<sp/>because<sp/>bash<sp/>allows<sp/>the<sp/>history</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">#<sp/>character<sp/>to<sp/>be<sp/>changed<sp/>with<sp/>the<sp/>histchars<sp/>shell<sp/>variable.<sp/><sp/>Fortunately,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">#<sp/>as<sp/>history<sp/>is<sp/>not<sp/>enabled<sp/>in<sp/>non-interactive<sp/>shells<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">#<sp/>EncodePOSIXShellArgument<sp/>is<sp/>only<sp/>expected<sp/>to<sp/>encode<sp/>for<sp/>non-interactive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">#<sp/>shells,<sp/>there<sp/>is<sp/>no<sp/>room<sp/>for<sp/>error<sp/>here<sp/>by<sp/>ignoring<sp/>!.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="namespacegyp_1_1common_1a4df6939018ea641c26d1e7b6629be9ef" refkind="member"><highlight class="normal">_escape<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&apos;([&quot;\\`])&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="namespacegyp_1_1common_1a2e45d4d865602a9046dc070c5545e87b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a2e45d4d865602a9046dc070c5545e87b" kindref="member">EncodePOSIXShellArgument</ref>(argument):</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Encodes<sp/>|argument|<sp/>suitably<sp/>for<sp/>consumption<sp/>by<sp/>POSIX<sp/>shells.</highlight></codeline>
<codeline lineno="269"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="270"><highlight class="stringliteral"><sp/><sp/>argument<sp/>may<sp/>be<sp/>quoted<sp/>and<sp/>escaped<sp/>as<sp/>necessary<sp/>to<sp/>ensure<sp/>that<sp/>POSIX<sp/>shells</highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral"><sp/><sp/>treat<sp/>the<sp/>returned<sp/>value<sp/>as<sp/>a<sp/>literal<sp/>representing<sp/>the<sp/>argument<sp/>passed<sp/>to</highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral"><sp/><sp/>this<sp/>function.<sp/><sp/>Parameter<sp/>(variable)<sp/>expansions<sp/>beginning<sp/>with<sp/>$<sp/>are<sp/>allowed</highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral"><sp/><sp/>to<sp/>remain<sp/>intact<sp/>without<sp/>escaping<sp/>the<sp/>$,<sp/>to<sp/>allow<sp/>the<sp/>argument<sp/>to<sp/>contain</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral"><sp/><sp/>references<sp/>to<sp/>variables<sp/>to<sp/>be<sp/>expanded<sp/>by<sp/>the<sp/>shell.</highlight></codeline>
<codeline lineno="275"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(argument,<sp/>str):</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument<sp/>=<sp/>str(argument)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>_quote.search(argument):</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quote<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quote<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>encoded<sp/>=<sp/>quote<sp/>+<sp/>re.sub(_escape,<sp/></highlight><highlight class="stringliteral">r&quot;\\\1&quot;</highlight><highlight class="normal">,<sp/>argument)<sp/>+<sp/>quote</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encoded</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="namespacegyp_1_1common_1a1681405bb09a2eda416079b3ed7de917" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a1681405bb09a2eda416079b3ed7de917" kindref="member">EncodePOSIXShellList</ref>(list):</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Encodes<sp/>|list|<sp/>suitably<sp/>for<sp/>consumption<sp/>by<sp/>POSIX<sp/>shells.</highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral"><sp/><sp/>Returns<sp/>EncodePOSIXShellArgument<sp/>for<sp/>each<sp/>item<sp/>in<sp/>list,<sp/>and<sp/>joins<sp/>them</highlight></codeline>
<codeline lineno="294"><highlight class="stringliteral"><sp/><sp/>together<sp/>using<sp/>the<sp/>space<sp/>character<sp/>as<sp/>an<sp/>argument<sp/>separator.</highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>encoded_arguments<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>argument<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list:</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoded_arguments.append(<ref refid="namespacegyp_1_1common_1a2e45d4d865602a9046dc070c5545e87b" kindref="member">EncodePOSIXShellArgument</ref>(argument))</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">.join(encoded_arguments)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="namespacegyp_1_1common_1a9df840aaceba6f500699dcf070dd78f8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a9df840aaceba6f500699dcf070dd78f8" kindref="member">DeepDependencyTargets</ref>(target_dicts,<sp/>roots):</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>recursive<sp/>list<sp/>of<sp/>target<sp/>dependencies.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>dependencies<sp/>=<sp/>set()</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>pending<sp/>=<sp/>set(roots)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>pending:</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Pluck<sp/>out<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>pending.pop()</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Skip<sp/>if<sp/>visited<sp/>already.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>r<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>dependencies:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependencies.add(r)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>its<sp/>children.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec<sp/>=<sp/>target_dicts[r]</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pending.update(set(spec.get(</highlight><highlight class="stringliteral">&quot;dependencies&quot;</highlight><highlight class="normal">,<sp/>[])))</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pending.update(set(spec.get(</highlight><highlight class="stringliteral">&quot;dependencies_original&quot;</highlight><highlight class="normal">,<sp/>[])))</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list(dependencies<sp/>-<sp/>set(roots))</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="namespacegyp_1_1common_1af5b1948b93a4d7ebab845f7a7747f364" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1af5b1948b93a4d7ebab845f7a7747f364" kindref="member">BuildFileTargets</ref>(target_list,<sp/>build_file):</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;From<sp/>a<sp/>target_list,<sp/>returns<sp/>the<sp/>subset<sp/>from<sp/>the<sp/>specified<sp/>build_file.</highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[p<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>p<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>target_list<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><ref refid="namespacegyp_1_1common_1a07c15710a1e349c4f75efb69406be2f1" kindref="member">BuildFile</ref>(p)<sp/>==<sp/>build_file]</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="namespacegyp_1_1common_1ae29bb9a2368860059458248dd76adeaa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1ae29bb9a2368860059458248dd76adeaa" kindref="member">AllTargets</ref>(target_list,<sp/>target_dicts,<sp/>build_file):</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>all<sp/>targets<sp/>(direct<sp/>and<sp/>dependencies)<sp/>for<sp/>the<sp/>specified<sp/>build_file.</highlight></codeline>
<codeline lineno="330"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>bftargets<sp/>=<sp/><ref refid="namespacegyp_1_1common_1af5b1948b93a4d7ebab845f7a7747f364" kindref="member">BuildFileTargets</ref>(target_list,<sp/>build_file)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>deptargets<sp/>=<sp/><ref refid="namespacegyp_1_1common_1a9df840aaceba6f500699dcf070dd78f8" kindref="member">DeepDependencyTargets</ref>(target_dicts,<sp/>bftargets)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bftargets<sp/>+<sp/>deptargets</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="namespacegyp_1_1common_1a42cc61308a39b4fc22c6bff47e2172d9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a42cc61308a39b4fc22c6bff47e2172d9" kindref="member">WriteOnDiff</ref>(filename):</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Write<sp/>to<sp/>a<sp/>file<sp/>only<sp/>if<sp/>the<sp/>new<sp/>contents<sp/>differ.</highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral"><sp/><sp/>Arguments:</highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename:<sp/>name<sp/>of<sp/>the<sp/>file<sp/>to<sp/>potentially<sp/>write<sp/>to.</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>A<sp/>file<sp/>like<sp/>object<sp/>which<sp/>will<sp/>write<sp/>to<sp/>temporary<sp/>file<sp/>and<sp/>only<sp/>overwrite</highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>target<sp/>if<sp/>it<sp/>differs<sp/>(on<sp/>close).</highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Writer:</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Wrapper<sp/>around<sp/>file<sp/>which<sp/>only<sp/>covers<sp/>the<sp/>target<sp/>if<sp/>it<sp/>differs.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>On<sp/>Cygwin<sp/>remove<sp/>the<sp/>&quot;dir&quot;<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>`C:`<sp/>prefixed<sp/>paths<sp/>are<sp/>treated<sp/>as<sp/>relative,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>consequently<sp/>ending<sp/>up<sp/>with<sp/>current<sp/>dir<sp/>&quot;/cygdrive/c/...&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>being<sp/>prefixed<sp/>to<sp/>those,<sp/>which<sp/>was</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>obviously<sp/>a<sp/>non-existent<sp/>path,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>example:<sp/>&quot;/cygdrive/c/&lt;some<sp/>folder&gt;/C:\&lt;my<sp/>win<sp/>style<sp/>abs<sp/>path&gt;&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>For<sp/>more<sp/>details<sp/>see:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>https://docs.python.org/2/library/tempfile.html#tempfile.mkstemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base_temp_dir<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><ref refid="namespacegyp_1_1common_1ae6f72854daa4facf72e33226a7b473d3" kindref="member">IsCygwin</ref>()<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>os.path.dirname(filename)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Pick<sp/>temporary<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="namespacegyp_1_1common_1ab464f3933f596bbdc7cfe5ebf5a1e766" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_fd,<sp/>self.tmp_path<sp/>=<sp/>tempfile.mkstemp(</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suffix=</highlight><highlight class="stringliteral">&quot;.tmp&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix=os.path.split(filename)[1]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.gyp.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir=base_temp_dir,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="366" refid="namespacegyp_1_1common_1a160883161ed0ca3e09d18978633cf206" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.tmp_file<sp/>=<sp/>os.fdopen(tmp_fd,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception:</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Don&apos;t<sp/>leave<sp/>turds<sp/>behind.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.unlink(self.tmp_path)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__getattr__(self,<sp/>attrname):</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Delegate<sp/>everything<sp/>else<sp/>to<sp/>self.tmp_file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getattr(self.tmp_file,<sp/>attrname)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">close(self):</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Close<sp/>tmp<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.tmp_file.close()</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Determine<sp/>if<sp/>different.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>same<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>same<sp/>=<sp/>filecmp.cmp(self.tmp_path,<sp/>filename,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>OSError<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>e.errno<sp/>!=<sp/>errno.ENOENT:</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>same:</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>new<sp/>file<sp/>is<sp/>identical<sp/>to<sp/>the<sp/>old<sp/>one,<sp/>just<sp/>get<sp/>rid<sp/>of<sp/>the<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.unlink(self.tmp_path)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>new<sp/>file<sp/>is<sp/>different<sp/>from<sp/>the<sp/>old<sp/>one,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>or<sp/>there<sp/>is<sp/>no<sp/>old<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Rename<sp/>the<sp/>new<sp/>file<sp/>to<sp/>the<sp/>permanent<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>tempfile.mkstemp<sp/>uses<sp/>an<sp/>overly<sp/>restrictive<sp/>mode,<sp/>resulting<sp/>in<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>file<sp/>that<sp/>can<sp/>only<sp/>be<sp/>read<sp/>by<sp/>the<sp/>owner,<sp/>regardless<sp/>of<sp/>the<sp/>umask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>There&apos;s<sp/>no<sp/>reason<sp/>to<sp/>not<sp/>respect<sp/>the<sp/>umask<sp/>here,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>which<sp/>means<sp/>that<sp/>an<sp/>extra<sp/>hoop<sp/>is<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>to<sp/>fetch<sp/>it<sp/>and<sp/>reset<sp/>the<sp/>new<sp/>file&apos;s<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>No<sp/>way<sp/>to<sp/>get<sp/>the<sp/>umask<sp/>without<sp/>setting<sp/>a<sp/>new<sp/>one?<sp/><sp/>Set<sp/>a<sp/>safe<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>then<sp/>set<sp/>it<sp/>back<sp/>to<sp/>the<sp/>old<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>umask<sp/>=<sp/>os.umask(0o77)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.umask(umask)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.chmod(self.tmp_path,<sp/>0o666<sp/>&amp;<sp/>~umask)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sys.platform<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;win32&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>os.path.exists(filename):</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>NOTE:<sp/>on<sp/>windows<sp/>(but<sp/>not<sp/>cygwin)<sp/>rename<sp/>will<sp/>not<sp/>replace<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>existing<sp/>file,<sp/>so<sp/>it<sp/>must<sp/>be<sp/>preceded<sp/>with<sp/>a<sp/>remove.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Sadly<sp/>there<sp/>is<sp/>no<sp/>way<sp/>to<sp/>make<sp/>the<sp/>switch<sp/>atomic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.remove(filename)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.rename(self.tmp_path,<sp/>filename)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception:</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Don&apos;t<sp/>leave<sp/>turds<sp/>behind.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.unlink(self.tmp_path)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">write(self,<sp/>s):</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.tmp_file.write(s.encode(</highlight><highlight class="stringliteral">&quot;utf-8&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Writer()</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425" refid="namespacegyp_1_1common_1a62411b7ed9f7220bb951ea26e91e4e15" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a62411b7ed9f7220bb951ea26e91e4e15" kindref="member">EnsureDirExists</ref>(path):</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Make<sp/>sure<sp/>the<sp/>directory<sp/>for<sp/>|path|<sp/>exists.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.makedirs(os.path.dirname(path))</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>OSError:</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="namespacegyp_1_1common_1aeb48ab17a03cd7c40f5ad72fac713486" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1aeb48ab17a03cd7c40f5ad72fac713486" kindref="member">GetFlavor</ref>(params):</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>|params.flavor|<sp/>if<sp/>it&apos;s<sp/>set,<sp/>the<sp/>system&apos;s<sp/>default<sp/>flavor<sp/>else.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>flavors<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cygwin&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;win&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;win32&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;win&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;darwin&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;mac&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;flavor&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>params:</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>params[</highlight><highlight class="stringliteral">&quot;flavor&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sys.platform<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>flavors:</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flavors[sys.platform]</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sys.platform.startswith(</highlight><highlight class="stringliteral">&quot;sunos&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;solaris&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sys.platform.startswith((</highlight><highlight class="stringliteral">&quot;dragonfly&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;freebsd&quot;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;freebsd&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sys.platform.startswith(</highlight><highlight class="stringliteral">&quot;openbsd&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;openbsd&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sys.platform.startswith(</highlight><highlight class="stringliteral">&quot;netbsd&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;netbsd&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sys.platform.startswith(</highlight><highlight class="stringliteral">&quot;aix&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;aix&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sys.platform.startswith((</highlight><highlight class="stringliteral">&quot;os390&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;zos&quot;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;zos&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;linux&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="namespacegyp_1_1common_1ab963414d748556424295353bddbca815" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1ab963414d748556424295353bddbca815" kindref="member">CopyTool</ref>(flavor,<sp/>out_path,<sp/>generator_flags={}):</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Finds<sp/>(flock|mac|win)_tool.gyp<sp/>in<sp/>the<sp/>gyp<sp/>directory<sp/>and<sp/>copies<sp/>it</highlight></codeline>
<codeline lineno="463"><highlight class="stringliteral"><sp/><sp/>to<sp/>|out_path|.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>aix<sp/>and<sp/>solaris<sp/>just<sp/>need<sp/>flock<sp/>emulation.<sp/>mac<sp/>and<sp/>win<sp/>use<sp/>more<sp/>complicated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>support<sp/>scripts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>prefix<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;aix&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;flock&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;solaris&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;flock&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;mac&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;mac&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;win&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;win&quot;</highlight><highlight class="normal">}.get(</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flavor,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>prefix:</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Slurp<sp/>input<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>source_path<sp/>=<sp/>os.path.join(</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.path.dirname(os.path.abspath(__file__)),<sp/></highlight><highlight class="stringliteral">&quot;%s_tool.py&quot;</highlight><highlight class="normal"><sp/>%<sp/>prefix</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>open(source_path)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>source_file:</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source<sp/>=<sp/>source_file.readlines()</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>custom<sp/>header<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>header<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Generated<sp/>by<sp/>gyp.<sp/>Do<sp/>not<sp/>edit.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>mac_toolchain_dir<sp/>=<sp/>generator_flags.get(</highlight><highlight class="stringliteral">&quot;mac_toolchain_dir&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>flavor<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;mac&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>mac_toolchain_dir:</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;import<sp/>os;\nos.environ[&apos;DEVELOPER_DIR&apos;]=&apos;%s&apos;\n&quot;</highlight><highlight class="normal"><sp/>%<sp/>mac_toolchain_dir</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>header<sp/>and<sp/>write<sp/>it<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>tool_path<sp/>=<sp/>os.path.join(out_path,<sp/></highlight><highlight class="stringliteral">&quot;gyp-%s-tool&quot;</highlight><highlight class="normal"><sp/>%<sp/>prefix)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>open(tool_path,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>tool_file:</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tool_file.write(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">.join([source[0],<sp/>header]<sp/>+<sp/>source[1:]))</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>file<sp/>executable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>os.chmod(tool_path,<sp/>0o755)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment">#<sp/>From<sp/>Alex<sp/>Martelli,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="comment">#<sp/>http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52560</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment">#<sp/>ASPN:<sp/>Python<sp/>Cookbook:<sp/>Remove<sp/>duplicates<sp/>from<sp/>a<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment">#<sp/>First<sp/>comment,<sp/>dated<sp/>2001/10/13.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(Also<sp/>in<sp/>the<sp/>printed<sp/>Python<sp/>Cookbook.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="namespacegyp_1_1common_1ad189f1004790fca1b7cdfc7c01dde48f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1ad189f1004790fca1b7cdfc7c01dde48f" kindref="member">uniquer</ref>(seq,<sp/>idfun=lambda<sp/>x:<sp/>x):</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>seen<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>item<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>seq:</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marker<sp/>=<sp/>idfun(item)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>marker<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>seen:</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seen[marker]<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.append(item)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Based<sp/>on<sp/>http://code.activestate.com/recipes/576694/.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="classgyp_1_1common_1_1_ordered_set" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_ordered_set" kindref="compound">OrderedSet</ref>(MutableSet):</highlight></codeline>
<codeline lineno="515" refid="classgyp_1_1common_1_1_ordered_set_1a15ad3994001ee097eb53d3997d76c654" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_ordered_set_1a15ad3994001ee097eb53d3997d76c654" kindref="member">__init__</ref>(self,<sp/>iterable=None):</highlight></codeline>
<codeline lineno="516" refid="classgyp_1_1common_1_1_ordered_set_1af1b8b89383fbf6b68d40659630b367d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common_1_1_ordered_set_1af1b8b89383fbf6b68d40659630b367d9" kindref="member">end</ref><sp/>=<sp/>end<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>+=<sp/>[</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>end,<sp/>end]<sp/><sp/></highlight><highlight class="comment">#<sp/>sentinel<sp/>node<sp/>for<sp/>doubly<sp/>linked<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518" refid="classgyp_1_1common_1_1_ordered_set_1ae885128e8fa7215c31fe197741b15f52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common_1_1_ordered_set_1ae885128e8fa7215c31fe197741b15f52" kindref="member">map</ref><sp/>=<sp/>{}<sp/><sp/></highlight><highlight class="comment">#<sp/>key<sp/>--&gt;<sp/>[key,<sp/>prev,<sp/>next]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>iterable<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self<sp/>|=<sp/>iterable</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="classgyp_1_1common_1_1_ordered_set_1a569723e10583b5fec2f0b6df69da5552" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_ordered_set_1a569723e10583b5fec2f0b6df69da5552" kindref="member">__len__</ref>(self):</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len(self.<ref refid="classgyp_1_1common_1_1_ordered_set_1ae885128e8fa7215c31fe197741b15f52" kindref="member">map</ref>)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="classgyp_1_1common_1_1_ordered_set_1ab56e783ae37ff5ca5eeb60cb60f46656" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_ordered_set_1ab56e783ae37ff5ca5eeb60cb60f46656" kindref="member">__contains__</ref>(self,<sp/>key):</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgyp_1_1common_1_1_ordered_set_1ae885128e8fa7215c31fe197741b15f52" kindref="member">map</ref></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="classgyp_1_1common_1_1_ordered_set_1a2c073ca43863dde578722800c04b4891" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_ordered_set_1a2c073ca43863dde578722800c04b4891" kindref="member">add</ref>(self,<sp/>key):</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgyp_1_1common_1_1_ordered_set_1ae885128e8fa7215c31fe197741b15f52" kindref="member">map</ref>:</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>self.<ref refid="classgyp_1_1common_1_1_ordered_set_1af1b8b89383fbf6b68d40659630b367d9" kindref="member">end</ref></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>end[1]</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr[2]<sp/>=<sp/>end[1]<sp/>=<sp/>self.<ref refid="classgyp_1_1common_1_1_ordered_set_1ae885128e8fa7215c31fe197741b15f52" kindref="member">map</ref>[key]<sp/>=<sp/>[key,<sp/>curr,<sp/>end]</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534" refid="classgyp_1_1common_1_1_ordered_set_1a6b8e2e2653bfab9f6e578d0f139a3de3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_ordered_set_1a6b8e2e2653bfab9f6e578d0f139a3de3" kindref="member">discard</ref>(self,<sp/>key):</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgyp_1_1common_1_1_ordered_set_1ae885128e8fa7215c31fe197741b15f52" kindref="member">map</ref>:</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key,<sp/>prev_item,<sp/>next_item<sp/>=<sp/>self.<ref refid="classgyp_1_1common_1_1_ordered_set_1ae885128e8fa7215c31fe197741b15f52" kindref="member">map</ref>.<ref refid="classgyp_1_1common_1_1_ordered_set_1a436d6a5622ffcefa6da764ae66affd51" kindref="member">pop</ref>(key)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_item[2]<sp/>=<sp/>next_item</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_item[1]<sp/>=<sp/>prev_item</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540" refid="classgyp_1_1common_1_1_ordered_set_1a5ddde6e540bf4d53d88487fbff208251" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_ordered_set_1a5ddde6e540bf4d53d88487fbff208251" kindref="member">__iter__</ref>(self):</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>self.<ref refid="classgyp_1_1common_1_1_ordered_set_1af1b8b89383fbf6b68d40659630b367d9" kindref="member">end</ref></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>end[2]</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>curr<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>end:</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>curr[0]</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>curr[2]</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547" refid="classgyp_1_1common_1_1_ordered_set_1ab64d6fd478cf8870ee9b1149cccb3cfc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_ordered_set_1ab64d6fd478cf8870ee9b1149cccb3cfc" kindref="member">__reversed__</ref>(self):</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>self.<ref refid="classgyp_1_1common_1_1_ordered_set_1af1b8b89383fbf6b68d40659630b367d9" kindref="member">end</ref></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>end[1]</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>curr<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>end:</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>curr[0]</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>curr[1]</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>second<sp/>argument<sp/>is<sp/>an<sp/>addition<sp/>that<sp/>causes<sp/>a<sp/>pylint<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555" refid="classgyp_1_1common_1_1_ordered_set_1a436d6a5622ffcefa6da764ae66affd51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_ordered_set_1a436d6a5622ffcefa6da764ae66affd51" kindref="member">pop</ref>(self,<sp/>last=True):<sp/><sp/></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=W0221</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self:</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>KeyError(</highlight><highlight class="stringliteral">&quot;set<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>self.<ref refid="classgyp_1_1common_1_1_ordered_set_1af1b8b89383fbf6b68d40659630b367d9" kindref="member">end</ref>[1][0]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>last<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>self.<ref refid="classgyp_1_1common_1_1_ordered_set_1af1b8b89383fbf6b68d40659630b367d9" kindref="member">end</ref>[2][0]</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common_1_1_ordered_set_1a6b8e2e2653bfab9f6e578d0f139a3de3" kindref="member">discard</ref>(key)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="classgyp_1_1common_1_1_ordered_set_1a1057cb2b6c9f31d15993faa75c83149e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_ordered_set_1a1057cb2b6c9f31d15993faa75c83149e" kindref="member">__repr__</ref>(self):</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self:</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f</highlight><highlight class="stringliteral">&quot;{self.__class__.__name__}()&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f</highlight><highlight class="stringliteral">&quot;{self.__class__.__name__}({list(self)!r})&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567" refid="classgyp_1_1common_1_1_ordered_set_1a45067bdaa589ce2ebac403239b581de1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_ordered_set_1a45067bdaa589ce2ebac403239b581de1" kindref="member">__eq__</ref>(self,<sp/>other):</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(other,<sp/>OrderedSet):</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len(self)<sp/>==<sp/>len(other)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>list(self)<sp/>==<sp/>list(other)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set(self)<sp/>==<sp/>set(other)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Extensions<sp/>to<sp/>the<sp/>recipe.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573" refid="classgyp_1_1common_1_1_ordered_set_1ad06fb05b41cd5ff5172ac98c74454cbe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_ordered_set_1ad06fb05b41cd5ff5172ac98c74454cbe" kindref="member">update</ref>(self,<sp/>iterable):</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>iterable:</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self:</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common_1_1_ordered_set_1a2c073ca43863dde578722800c04b4891" kindref="member">add</ref>(i)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579" refid="classgyp_1_1common_1_1_cycle_error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_cycle_error" kindref="compound">CycleError</ref>(Exception):</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;An<sp/>exception<sp/>raised<sp/>when<sp/>an<sp/>unexpected<sp/>cycle<sp/>is<sp/>detected.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582" refid="classgyp_1_1common_1_1_cycle_error_1a66ab1348fb6fadccfafa130d43b44c9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_cycle_error_1a66ab1348fb6fadccfafa130d43b44c9b" kindref="member">__init__</ref>(self,<sp/>nodes):</highlight></codeline>
<codeline lineno="583" refid="classgyp_1_1common_1_1_cycle_error_1a2e607a3af0c61a217a1ad7134e8417b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgyp_1_1common_1_1_cycle_error_1a2e607a3af0c61a217a1ad7134e8417b2" kindref="member">nodes</ref><sp/>=<sp/>nodes</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585" refid="classgyp_1_1common_1_1_cycle_error_1a47df8e5d1c23a686e5fd9abdfb9414ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgyp_1_1common_1_1_cycle_error_1a47df8e5d1c23a686e5fd9abdfb9414ac" kindref="member">__str__</ref>(self):</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;CycleError:<sp/>cycle<sp/>involving:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(self.<ref refid="classgyp_1_1common_1_1_cycle_error_1a2e607a3af0c61a217a1ad7134e8417b2" kindref="member">nodes</ref>)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589" refid="namespacegyp_1_1common_1a959a06d815b87d3cb6ddd564bac597fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a959a06d815b87d3cb6ddd564bac597fd" kindref="member">TopologicallySorted</ref>(graph,<sp/>get_edges):</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;Topologically<sp/>sort<sp/>based<sp/>on<sp/>a<sp/>user<sp/>provided<sp/>edge<sp/>definition.</highlight></codeline>
<codeline lineno="591"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="592"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="593"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>graph:<sp/>A<sp/>list<sp/>of<sp/>node<sp/>names.</highlight></codeline>
<codeline lineno="594"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>get_edges:<sp/>A<sp/>function<sp/>mapping<sp/>from<sp/>node<sp/>name<sp/>to<sp/>a<sp/>hashable<sp/>collection</highlight></codeline>
<codeline lineno="595"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>node<sp/>names<sp/>which<sp/>this<sp/>node<sp/>has<sp/>outgoing<sp/>edges<sp/>to.</highlight></codeline>
<codeline lineno="596"><highlight class="stringliteral"><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="597"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>A<sp/>list<sp/>containing<sp/>all<sp/>of<sp/>the<sp/>node<sp/>in<sp/>graph<sp/>in<sp/>topological<sp/>order.</highlight></codeline>
<codeline lineno="598"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>It<sp/>is<sp/>assumed<sp/>that<sp/>calling<sp/>get_edges<sp/>once<sp/>for<sp/>each<sp/>node<sp/>and<sp/>caching<sp/>is</highlight></codeline>
<codeline lineno="599"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>cheaper<sp/>than<sp/>repeatedly<sp/>calling<sp/>get_edges.</highlight></codeline>
<codeline lineno="600"><highlight class="stringliteral"><sp/><sp/>Raises:</highlight></codeline>
<codeline lineno="601"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>CycleError<sp/>in<sp/>the<sp/>event<sp/>of<sp/>a<sp/>cycle.</highlight></codeline>
<codeline lineno="602"><highlight class="stringliteral"><sp/><sp/>Example:</highlight></codeline>
<codeline lineno="603"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>graph<sp/>=<sp/>{&apos;a&apos;:<sp/>&apos;$(b)<sp/>$(c)&apos;,<sp/>&apos;b&apos;:<sp/>&apos;hi&apos;,<sp/>&apos;c&apos;:<sp/>&apos;$(b)&apos;}</highlight></codeline>
<codeline lineno="604"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>def<sp/>GetEdges(node):</highlight></codeline>
<codeline lineno="605"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>re.findall(r&apos;\$\(([^))]\)&apos;,<sp/>graph[node])</highlight></codeline>
<codeline lineno="606"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>print<sp/>TopologicallySorted(graph.keys(),<sp/>GetEdges)</highlight></codeline>
<codeline lineno="607"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>==&gt;</highlight></codeline>
<codeline lineno="608"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>[&apos;a&apos;,<sp/>&apos;c&apos;,<sp/>b&apos;]</highlight></codeline>
<codeline lineno="609"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>get_edges<sp/>=<sp/><ref refid="classgyp_1_1common_1_1memoize" kindref="compound">memoize</ref>(get_edges)</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>visited<sp/>=<sp/>set()</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>visiting<sp/>=<sp/>set()</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>ordered_nodes<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">Visit(node):</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>node<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>visiting:</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classgyp_1_1common_1_1_cycle_error" kindref="compound">CycleError</ref>(visiting)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>node<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>visited:</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited.add(node)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visiting.add(node)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>neighbor<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>get_edges(node):</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Visit(neighbor)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visiting.remove(node)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ordered_nodes.insert(0,<sp/>node)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>node<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sorted(graph):</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Visit(node)</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ordered_nodes</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632" refid="namespacegyp_1_1common_1a640222462da2ef3272c47d05459eb35e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1a640222462da2ef3272c47d05459eb35e" kindref="member">CrossCompileRequested</ref>():</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO:<sp/>figure<sp/>out<sp/>how<sp/>to<sp/>not<sp/>build<sp/>extra<sp/>host<sp/>objects<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>non-cross-compile<sp/>case<sp/>when<sp/>this<sp/>is<sp/>enabled,<sp/>and<sp/>enable<sp/>unconditionally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.environ.get(</highlight><highlight class="stringliteral">&quot;GYP_CROSSCOMPILE&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>os.environ.get(</highlight><highlight class="stringliteral">&quot;AR_host&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>os.environ.get(</highlight><highlight class="stringliteral">&quot;CC_host&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>os.environ.get(</highlight><highlight class="stringliteral">&quot;CXX_host&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>os.environ.get(</highlight><highlight class="stringliteral">&quot;AR_target&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>os.environ.get(</highlight><highlight class="stringliteral">&quot;CC_target&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>os.environ.get(</highlight><highlight class="stringliteral">&quot;CXX_target&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646" refid="namespacegyp_1_1common_1ae6f72854daa4facf72e33226a7b473d3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegyp_1_1common_1ae6f72854daa4facf72e33226a7b473d3" kindref="member">IsCygwin</ref>():</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>subprocess.Popen(</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;uname&quot;</highlight><highlight class="normal">,<sp/>stdout=subprocess.PIPE,<sp/>stderr=subprocess.STDOUT</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdout<sp/>=<sp/>out.communicate()[0].decode(</highlight><highlight class="stringliteral">&quot;utf-8&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;CYGWIN&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>str(stdout)</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception:</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/common.py"/>
  </compounddef>
</doxygen>
