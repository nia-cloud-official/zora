<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="backend_2node__modules_2npmlog_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>npmlog</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>logger<sp/>util<sp/>that<sp/>npm<sp/>uses.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>logger<sp/>is<sp/>very<sp/>basic.<sp/><sp/>It<sp/>does<sp/>the<sp/>logging<sp/>for<sp/>npm.<sp/><sp/>It<sp/>supports</highlight></codeline>
<codeline><highlight class="normal">custom<sp/>levels<sp/>and<sp/>colored<sp/>output.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">By<sp/>default,<sp/>logs<sp/>are<sp/>written<sp/>to<sp/>stderr.<sp/><sp/>If<sp/>you<sp/>want<sp/>to<sp/>send<sp/>log<sp/>messages</highlight></codeline>
<codeline><highlight class="normal">to<sp/>outputs<sp/>other<sp/>than<sp/>streams,<sp/>then<sp/>you<sp/>can<sp/>change<sp/>the<sp/>`log.stream`</highlight></codeline>
<codeline><highlight class="normal">member,<sp/>or<sp/>you<sp/>can<sp/>just<sp/>listen<sp/>to<sp/>the<sp/>events<sp/>that<sp/>it<sp/>emits,<sp/>and<sp/>do</highlight></codeline>
<codeline><highlight class="normal">whatever<sp/>you<sp/>want<sp/>with<sp/>them.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Installation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```console</highlight></codeline>
<codeline><highlight class="normal">npm<sp/>install<sp/>npmlog<sp/>--save</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Basic<sp/>Usage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```javascript</highlight></codeline>
<codeline><highlight class="normal">var<sp/>log<sp/>=<sp/>require(&apos;npmlog&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>additional<sp/>stuff<sp/>---------------------------+</highlight></codeline>
<codeline><highlight class="normal">//<sp/>message<sp/>----------+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">//<sp/>prefix<sp/>----+<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">//<sp/>level<sp/>-+<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/><sp/><sp/>v<sp/><sp/><sp/><sp/><sp/><sp/>v<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>log.info(&apos;fyi&apos;,<sp/>&apos;I<sp/>have<sp/>a<sp/>kitty<sp/>cat:<sp/>%j&apos;,<sp/>myKittyCat)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.level</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>{String}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>level<sp/>to<sp/>display<sp/>logs<sp/>at.<sp/><sp/>Any<sp/>logs<sp/>at<sp/>or<sp/>above<sp/>this<sp/>level<sp/>will<sp/>be</highlight></codeline>
<codeline><highlight class="normal">displayed.<sp/><sp/>The<sp/>special<sp/>level<sp/>`silent`<sp/>will<sp/>prevent<sp/>anything<sp/>from<sp/>being</highlight></codeline>
<codeline><highlight class="normal">displayed<sp/>ever.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.record</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>{Array}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">An<sp/>array<sp/>of<sp/>all<sp/>the<sp/>log<sp/>messages<sp/>that<sp/>have<sp/>been<sp/>entered.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.maxRecordSize</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>{Number}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>maximum<sp/>number<sp/>of<sp/>records<sp/>to<sp/>keep.<sp/><sp/>If<sp/>log.record<sp/>gets<sp/>bigger<sp/>than</highlight></codeline>
<codeline><highlight class="normal">10%<sp/>over<sp/>this<sp/>value,<sp/>then<sp/>it<sp/>is<sp/>sliced<sp/>down<sp/>to<sp/>90%<sp/>of<sp/>this<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>reason<sp/>for<sp/>the<sp/>10%<sp/>window<sp/>is<sp/>so<sp/>that<sp/>it<sp/>doesn&apos;t<sp/>have<sp/>to<sp/>resize<sp/>a</highlight></codeline>
<codeline><highlight class="normal">large<sp/>array<sp/>on<sp/>every<sp/>log<sp/>entry.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.prefixStyle</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>{Object}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>style<sp/>object<sp/>that<sp/>specifies<sp/>how<sp/>prefixes<sp/>are<sp/>styled.<sp/><sp/>(See<sp/>below)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.headingStyle</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>{Object}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>style<sp/>object<sp/>that<sp/>specifies<sp/>how<sp/>the<sp/>heading<sp/>is<sp/>styled.<sp/><sp/>(See<sp/>below)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.heading</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>{String}<sp/>Default:<sp/>&quot;&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>set,<sp/>a<sp/>heading<sp/>that<sp/>is<sp/>printed<sp/>at<sp/>the<sp/>start<sp/>of<sp/>every<sp/>line.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.stream</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>{Stream}<sp/>Default:<sp/>`process.stderr`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>stream<sp/>where<sp/>output<sp/>is<sp/>written.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.enableColor()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Force<sp/>colors<sp/>to<sp/>be<sp/>used<sp/>on<sp/>all<sp/>messages,<sp/>regardless<sp/>of<sp/>the<sp/>output</highlight></codeline>
<codeline><highlight class="normal">stream.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.disableColor()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Disable<sp/>colors<sp/>on<sp/>all<sp/>messages.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.enableProgress()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Enable<sp/>the<sp/>display<sp/>of<sp/>log<sp/>activity<sp/>spinner<sp/>and<sp/>progress<sp/>bar</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.disableProgress()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Disable<sp/>the<sp/>display<sp/>of<sp/>a<sp/>progress<sp/>bar</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.enableUnicode()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Force<sp/>the<sp/>unicode<sp/>theme<sp/>to<sp/>be<sp/>used<sp/>for<sp/>the<sp/>progress<sp/>bar.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.disableUnicode()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Disable<sp/>the<sp/>use<sp/>of<sp/>unicode<sp/>in<sp/>the<sp/>progress<sp/>bar.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.setGaugeTemplate(template)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Set<sp/>a<sp/>template<sp/>for<sp/>outputting<sp/>the<sp/>progress<sp/>bar.<sp/>See<sp/>the<sp/>[gauge<sp/>documentation]<sp/>for<sp/>details.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[gauge<sp/>documentation]:<sp/>https://npmjs.com/package/gauge</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.setGaugeThemeset(themes)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Select<sp/>a<sp/>themeset<sp/>to<sp/>pick<sp/>themes<sp/>from<sp/>for<sp/>the<sp/>progress<sp/>bar.<sp/>See<sp/>the<sp/>[gauge<sp/>documentation]<sp/>for<sp/>details.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.pause()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Stop<sp/>emitting<sp/>messages<sp/>to<sp/>the<sp/>stream,<sp/>but<sp/>do<sp/>not<sp/>drop<sp/>them.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.resume()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Emit<sp/>all<sp/>buffered<sp/>messages<sp/>that<sp/>were<sp/>written<sp/>while<sp/>paused.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.log(level,<sp/>prefix,<sp/>message,<sp/>...)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`level`<sp/>{String}<sp/>The<sp/>level<sp/>to<sp/>emit<sp/>the<sp/>message<sp/>at</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`prefix`<sp/>{String}<sp/>A<sp/>string<sp/>prefix.<sp/><sp/>Set<sp/>to<sp/>&quot;&quot;<sp/>to<sp/>skip.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`message...`<sp/>Arguments<sp/>to<sp/>`util.format`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Emit<sp/>a<sp/>log<sp/>message<sp/>at<sp/>the<sp/>specified<sp/>level.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log\[level](prefix,<sp/>message,<sp/>...)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>example,</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>log.silly(prefix,<sp/>message,<sp/>...)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>log.verbose(prefix,<sp/>message,<sp/>...)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>log.info(prefix,<sp/>message,<sp/>...)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>log.http(prefix,<sp/>message,<sp/>...)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>log.warn(prefix,<sp/>message,<sp/>...)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>log.error(prefix,<sp/>message,<sp/>...)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Like<sp/>`log.log(level,<sp/>prefix,<sp/>message,<sp/>...)`.<sp/><sp/>In<sp/>this<sp/>way,<sp/>each<sp/>level<sp/>is</highlight></codeline>
<codeline><highlight class="normal">given<sp/>a<sp/>shorthand,<sp/>so<sp/>you<sp/>can<sp/>do<sp/>`log.info(prefix,<sp/>message)`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.addLevel(level,<sp/>n,<sp/>style,<sp/>disp)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`level`<sp/>{String}<sp/>Level<sp/>indicator</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`n`<sp/>{Number}<sp/>The<sp/>numeric<sp/>level</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`style`<sp/>{Object}<sp/>Object<sp/>with<sp/>fg,<sp/>bg,<sp/>inverse,<sp/>etc.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`disp`<sp/>{String}<sp/>Optional<sp/>replacement<sp/>for<sp/>`level`<sp/>in<sp/>the<sp/>output.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sets<sp/>up<sp/>a<sp/>new<sp/>level<sp/>with<sp/>a<sp/>shorthand<sp/>function<sp/>and<sp/>so<sp/>forth.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>if<sp/>the<sp/>number<sp/>is<sp/>`Infinity`,<sp/>then<sp/>setting<sp/>the<sp/>level<sp/>to<sp/>that</highlight></codeline>
<codeline><highlight class="normal">will<sp/>cause<sp/>all<sp/>log<sp/>messages<sp/>to<sp/>be<sp/>suppressed.<sp/><sp/>If<sp/>the<sp/>number<sp/>is</highlight></codeline>
<codeline><highlight class="normal">`-Infinity`,<sp/>then<sp/>the<sp/>only<sp/>way<sp/>to<sp/>show<sp/>it<sp/>is<sp/>to<sp/>enable<sp/>all<sp/>log<sp/>messages.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.newItem(name,<sp/>todo,<sp/>weight)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`name`<sp/>{String}<sp/>Optional;<sp/>progress<sp/>item<sp/>name.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`todo`<sp/>{Number}<sp/>Optional;<sp/>total<sp/>amount<sp/>of<sp/>work<sp/>to<sp/>be<sp/>done.<sp/>Default<sp/>0.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`weight`<sp/>{Number}<sp/>Optional;<sp/>the<sp/>weight<sp/>of<sp/>this<sp/>item<sp/>relative<sp/>to<sp/>others.<sp/>Default<sp/>1.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>adds<sp/>a<sp/>new<sp/>`are-we-there-yet`<sp/>item<sp/>tracker<sp/>to<sp/>the<sp/>progress<sp/>tracker.<sp/>The</highlight></codeline>
<codeline><highlight class="normal">object<sp/>returned<sp/>has<sp/>the<sp/>`log[level]`<sp/>methods<sp/>but<sp/>is<sp/>otherwise<sp/>an</highlight></codeline>
<codeline><highlight class="normal">`are-we-there-yet`<sp/>`Tracker`<sp/>object.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.newStream(name,<sp/>todo,<sp/>weight)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>adds<sp/>a<sp/>new<sp/>`are-we-there-yet`<sp/>stream<sp/>tracker<sp/>to<sp/>the<sp/>progress<sp/>tracker.<sp/>The</highlight></codeline>
<codeline><highlight class="normal">object<sp/>returned<sp/>has<sp/>the<sp/>`log[level]`<sp/>methods<sp/>but<sp/>is<sp/>otherwise<sp/>an</highlight></codeline>
<codeline><highlight class="normal">`are-we-there-yet`<sp/>`TrackerStream`<sp/>object.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>log.newGroup(name,<sp/>weight)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>adds<sp/>a<sp/>new<sp/>`are-we-there-yet`<sp/>tracker<sp/>group<sp/>to<sp/>the<sp/>progress<sp/>tracker.<sp/>The</highlight></codeline>
<codeline><highlight class="normal">object<sp/>returned<sp/>has<sp/>the<sp/>`log[level]`<sp/>methods<sp/>but<sp/>is<sp/>otherwise<sp/>an</highlight></codeline>
<codeline><highlight class="normal">`are-we-there-yet`<sp/>`TrackerGroup`<sp/>object.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Events</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Events<sp/>are<sp/>all<sp/>emitted<sp/>with<sp/>the<sp/>message<sp/>object.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`log`<sp/>Emitted<sp/>for<sp/>all<sp/>messages</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`log.&lt;level&gt;`<sp/>Emitted<sp/>for<sp/>all<sp/>messages<sp/>with<sp/>the<sp/>`&lt;level&gt;`<sp/>level.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`&lt;prefix&gt;`<sp/>Messages<sp/>with<sp/>prefixes<sp/>also<sp/>emit<sp/>their<sp/>prefix<sp/>as<sp/>an<sp/>event.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Style<sp/>Objects</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Style<sp/>objects<sp/>can<sp/>have<sp/>the<sp/>following<sp/>fields:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`fg`<sp/>{String}<sp/>Color<sp/>for<sp/>the<sp/>foreground<sp/>text</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`bg`<sp/>{String}<sp/>Color<sp/>for<sp/>the<sp/>background</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`bold`,<sp/>`inverse`,<sp/>`underline`<sp/>{Boolean}<sp/>Set<sp/>the<sp/>associated<sp/>property</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`bell`<sp/>{Boolean}<sp/>Make<sp/>a<sp/>noise<sp/>(This<sp/>is<sp/>pretty<sp/>annoying,<sp/>probably.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Message<sp/>Objects</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Every<sp/>log<sp/>event<sp/>is<sp/>emitted<sp/>with<sp/>a<sp/>message<sp/>object,<sp/>and<sp/>the<sp/>`log.record`</highlight></codeline>
<codeline><highlight class="normal">list<sp/>contains<sp/>all<sp/>of<sp/>them<sp/>that<sp/>have<sp/>been<sp/>created.<sp/><sp/>They<sp/>have<sp/>the</highlight></codeline>
<codeline><highlight class="normal">following<sp/>fields:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`id`<sp/>{Number}</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`level`<sp/>{String}</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`prefix`<sp/>{String}</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`message`<sp/>{String}<sp/>Result<sp/>of<sp/>`util.format()`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`messageRaw`<sp/>{Array}<sp/>Arguments<sp/>to<sp/>`util.format()`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Blocking<sp/>TTYs</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">We<sp/>use<sp/>[`set-blocking`](https://npmjs.com/package/set-blocking)<sp/>to<sp/>set</highlight></codeline>
<codeline><highlight class="normal">stderr<sp/>and<sp/>stdout<sp/>blocking<sp/>if<sp/>they<sp/>are<sp/>tty&apos;s<sp/>and<sp/>have<sp/>the<sp/>setBlocking<sp/>call.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>a<sp/>work<sp/>around<sp/>for<sp/>an<sp/>issue<sp/>in<sp/>early<sp/>versions<sp/>of<sp/>Node.js<sp/>6.x,<sp/>which</highlight></codeline>
<codeline><highlight class="normal">made<sp/>stderr<sp/>and<sp/>stdout<sp/>non-blocking<sp/>on<sp/>OSX.<sp/>(They<sp/>are<sp/>always<sp/>blocking</highlight></codeline>
<codeline><highlight class="normal">Windows<sp/>and<sp/>were<sp/>never<sp/>blocking<sp/>on<sp/>Linux.)<sp/>`npmlog`<sp/>needs<sp/>them<sp/>to<sp/>be<sp/>blocking</highlight></codeline>
<codeline><highlight class="normal">so<sp/>that<sp/>it<sp/>can<sp/>allow<sp/>output<sp/>to<sp/>stdout<sp/>and<sp/>stderr<sp/>to<sp/>be<sp/>interlaced.</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/npmlog/README.md"/>
  </compounddef>
</doxygen>
