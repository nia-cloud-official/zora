<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2tar-stream_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2tar-stream_2_r_e_a_d_m_e</compoundname>
    <title>tar-stream</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2tar-stream_2_r_e_a_d_m_e_1autotoc_md3782"/> tar-stream is a streaming tar parser and generator and nothing else. It is streams2 and operates purely using streams which means you can easily extract/parse tarballs without ever hitting the file system.</para>
<para>Note that you still need to gunzip your data if you have a <computeroutput>.tar.gz</computeroutput>. We recommend using <ulink url="https://github.com/mafintosh/gunzip-maybe">gunzip-maybe</ulink> in conjunction with this.</para>
<para><programlisting><codeline><highlight class="normal">npm<sp/>install<sp/>tar-stream</highlight></codeline>
</programlisting></para>
<para><ulink url="http://travis-ci.org/mafintosh/tar-stream"><image type="html" name="https://secure.travis-ci.org/mafintosh/tar-stream.png" alt="build status" inline="yes"></image>
</ulink> <ulink url="http://opensource.org/licenses/MIT"><image type="html" name="https://img.shields.io/badge/license-MIT-blue.svg" alt="License" inline="yes"></image>
</ulink></para>
<sect1 id="md_backend_2node__modules_2tar-stream_2_r_e_a_d_m_e_1autotoc_md3783">
<title>Usage</title><para>tar-stream exposes two streams, <ulink url="https://github.com/mafintosh/tar-stream#packing">pack</ulink> which creates tarballs and <ulink url="https://github.com/mafintosh/tar-stream#extracting">extract</ulink> which extracts tarballs. To <ulink url="https://github.com/mafintosh/tar-stream#modifying-existing-tarballs">modify an existing tarball</ulink> use both.</para>
<para>It implementes USTAR with additional support for pax extended headers. It should be compatible with all popular tar distributions out there (gnutar, bsdtar etc)</para>
</sect1>
<sect1 id="md_backend_2node__modules_2tar-stream_2_r_e_a_d_m_e_1autotoc_md3784">
<title>Related</title><para>If you want to pack/unpack directories on the file system check out <ulink url="https://github.com/mafintosh/tar-fs">tar-fs</ulink> which provides file system bindings to this module.</para>
</sect1>
<sect1 id="md_backend_2node__modules_2tar-stream_2_r_e_a_d_m_e_1autotoc_md3785">
<title>Packing</title><para>To create a pack stream use <computeroutput>tar.pack()</computeroutput> and call <computeroutput>pack.entry(header, [callback])</computeroutput> to add tar entries.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>tar<sp/>=<sp/>require(&apos;tar-stream&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>pack<sp/>=<sp/>tar.pack()<sp/>//<sp/>pack<sp/>is<sp/>a<sp/>streams2<sp/>stream</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>add<sp/>a<sp/>file<sp/>called<sp/>my-test.txt<sp/>with<sp/>the<sp/>content<sp/>&quot;Hello<sp/>World!&quot;</highlight></codeline>
<codeline><highlight class="normal">pack.entry({<sp/>name:<sp/>&apos;my-test.txt&apos;<sp/>},<sp/>&apos;Hello<sp/>World!&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>add<sp/>a<sp/>file<sp/>called<sp/>my-stream-test.txt<sp/>from<sp/>a<sp/>stream</highlight></codeline>
<codeline><highlight class="normal">var<sp/>entry<sp/>=<sp/>pack.entry({<sp/>name:<sp/>&apos;my-stream-test.txt&apos;,<sp/>size:<sp/>11<sp/>},<sp/>function(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>the<sp/>stream<sp/>was<sp/>added</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>no<sp/>more<sp/>entries</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pack.finalize()</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">entry.write(&apos;hello&apos;)</highlight></codeline>
<codeline><highlight class="normal">entry.write(&apos;<sp/>&apos;)</highlight></codeline>
<codeline><highlight class="normal">entry.write(&apos;world&apos;)</highlight></codeline>
<codeline><highlight class="normal">entry.end()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>pipe<sp/>the<sp/>pack<sp/>stream<sp/>somewhere</highlight></codeline>
<codeline><highlight class="normal">pack.pipe(process.stdout)</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2tar-stream_2_r_e_a_d_m_e_1autotoc_md3786">
<title>Extracting</title><para>To extract a stream use <computeroutput>tar.extract()</computeroutput> and listen for <lsquo/>extract.on(&apos;entry<rsquo/>, (header, stream, next) )`</para>
<para><programlisting><codeline><highlight class="normal"><sp/>js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>extract<sp/>=<sp/>tar.extract()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">extract.on(&apos;entry&apos;,<sp/>function(header,<sp/>stream,<sp/>next)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>header<sp/>is<sp/>the<sp/>tar<sp/>header</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>stream<sp/>is<sp/>the<sp/>content<sp/>body<sp/>(might<sp/>be<sp/>an<sp/>empty<sp/>stream)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>call<sp/>next<sp/>when<sp/>you<sp/>are<sp/>done<sp/>with<sp/>this<sp/>entry</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>stream.on(&apos;end&apos;,<sp/>function()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>next()<sp/>//<sp/>ready<sp/>for<sp/>next<sp/>entry</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>stream.resume()<sp/>//<sp/>just<sp/>auto<sp/>drain<sp/>the<sp/>stream</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">extract.on(&apos;finish&apos;,<sp/>function()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>all<sp/>entries<sp/>read</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">pack.pipe(extract)</highlight></codeline>
</programlisting></para>
<para>The tar archive is streamed sequentially, meaning you <bold>must</bold> drain each entry&apos;s stream as you get them or else the main extract stream will receive backpressure and stop reading.</para>
</sect1>
<sect1 id="md_backend_2node__modules_2tar-stream_2_r_e_a_d_m_e_1autotoc_md3787">
<title>Headers</title><para>The header object using in <computeroutput>entry</computeroutput> should contain the following properties. Most of these values can be found by stat&apos;ing a file.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>js</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>name:<sp/>&apos;path/to/this/entry.txt&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size:<sp/>1314,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>entry<sp/>size.<sp/>defaults<sp/>to<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mode:<sp/>0o644,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>entry<sp/>mode.<sp/>defaults<sp/>to<sp/>to<sp/>0o755<sp/>for<sp/>dirs<sp/>and<sp/>0o644<sp/>otherwise</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mtime:<sp/>new<sp/>Date(),<sp/>//<sp/>last<sp/>modified<sp/>date<sp/>for<sp/>entry.<sp/>defaults<sp/>to<sp/>now.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>type:<sp/>&apos;file&apos;,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>type<sp/>of<sp/>entry.<sp/>defaults<sp/>to<sp/>file.<sp/>can<sp/>be:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>file<sp/>|<sp/>link<sp/>|<sp/>symlink<sp/>|<sp/>directory<sp/>|<sp/>block-device</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>character-device<sp/>|<sp/>fifo<sp/>|<sp/>contiguous-file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>linkname:<sp/>&apos;path&apos;,<sp/><sp/>//<sp/>linked<sp/>file<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uid:<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>uid<sp/>of<sp/>entry<sp/>owner.<sp/>defaults<sp/>to<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gid:<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>gid<sp/>of<sp/>entry<sp/>owner.<sp/>defaults<sp/>to<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uname:<sp/>&apos;maf&apos;,<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>uname<sp/>of<sp/>entry<sp/>owner.<sp/>defaults<sp/>to<sp/>null</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gname:<sp/>&apos;staff&apos;,<sp/><sp/><sp/><sp/>//<sp/>gname<sp/>of<sp/>entry<sp/>owner.<sp/>defaults<sp/>to<sp/>null</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>devmajor:<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>device<sp/>major<sp/>version.<sp/>defaults<sp/>to<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>devminor:<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>device<sp/>minor<sp/>version.<sp/>defaults<sp/>to<sp/>0</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2tar-stream_2_r_e_a_d_m_e_1autotoc_md3788">
<title>Modifying existing tarballs</title><para>Using tar-stream it is easy to rewrite paths / change modes etc in an existing tarball.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>extract<sp/>=<sp/>tar.extract()</highlight></codeline>
<codeline><highlight class="normal">var<sp/>pack<sp/>=<sp/>tar.pack()</highlight></codeline>
<codeline><highlight class="normal">var<sp/>path<sp/>=<sp/>require(&apos;path&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">extract.on(&apos;entry&apos;,<sp/>function(header,<sp/>stream,<sp/>callback)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>let&apos;s<sp/>prefix<sp/>all<sp/>names<sp/>with<sp/>&apos;tmp&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>header.name<sp/>=<sp/>path.join(&apos;tmp&apos;,<sp/>header.name)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>write<sp/>the<sp/>new<sp/>entry<sp/>to<sp/>the<sp/>pack<sp/>stream</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>stream.pipe(pack.entry(header,<sp/>callback))</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">extract.on(&apos;finish&apos;,<sp/>function()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>all<sp/>entries<sp/>done<sp/>-<sp/>lets<sp/>finalize<sp/>it</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pack.finalize()</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>pipe<sp/>the<sp/>old<sp/>tarball<sp/>to<sp/>the<sp/>extractor</highlight></codeline>
<codeline><highlight class="normal">oldTarballStream.pipe(extract)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>pipe<sp/>the<sp/>new<sp/>tarball<sp/>the<sp/>another<sp/>stream</highlight></codeline>
<codeline><highlight class="normal">pack.pipe(newTarballStream)</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2tar-stream_2_r_e_a_d_m_e_1autotoc_md3789">
<title>Saving tarball to fs</title><para><programlisting><codeline><highlight class="normal"><sp/>js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>fs<sp/>=<sp/>require(&apos;fs&apos;)</highlight></codeline>
<codeline><highlight class="normal">var<sp/>tar<sp/>=<sp/>require(&apos;tar-stream&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>pack<sp/>=<sp/>tar.pack()<sp/>//<sp/>pack<sp/>is<sp/>a<sp/>streams2<sp/>stream</highlight></codeline>
<codeline><highlight class="normal">var<sp/>path<sp/>=<sp/>&apos;YourTarBall.tar&apos;</highlight></codeline>
<codeline><highlight class="normal">var<sp/>yourTarball<sp/>=<sp/>fs.createWriteStream(path)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>add<sp/>a<sp/>file<sp/>called<sp/>YourFile.txt<sp/>with<sp/>the<sp/>content<sp/>&quot;Hello<sp/>World!&quot;</highlight></codeline>
<codeline><highlight class="normal">pack.entry({name:<sp/>&apos;YourFile.txt&apos;},<sp/>&apos;Hello<sp/>World!&apos;,<sp/>function<sp/>(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(err)<sp/>throw<sp/>err</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pack.finalize()</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>pipe<sp/>the<sp/>pack<sp/>stream<sp/>to<sp/>your<sp/>file</highlight></codeline>
<codeline><highlight class="normal">pack.pipe(yourTarball)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">yourTarball.on(&apos;close&apos;,<sp/>function<sp/>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>console.log(path<sp/>+<sp/>&apos;<sp/>has<sp/>been<sp/>written&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fs.stat(path,<sp/>function(err,<sp/>stats)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(err)<sp/>throw<sp/>err</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(stats)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(&apos;Got<sp/>file<sp/>info<sp/>successfully!&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>})</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2tar-stream_2_r_e_a_d_m_e_1autotoc_md3790">
<title>Performance</title><para><ulink url="https://github.com/mafintosh/tar-fs/blob/master/README.md#performance">See tar-fs for a performance comparison with node-tar</ulink></para>
</sect1>
<sect1 id="md_backend_2node__modules_2tar-stream_2_r_e_a_d_m_e_1autotoc_md3791">
<title>License</title><para>MIT </para>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/tar-stream/README.md"/>
  </compounddef>
</doxygen>
