<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="backend_2node__modules_2promise-retry_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>node-promise-retry</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[![NPM<sp/>version][npm-image]][npm-url]<sp/>[![Downloads][downloads-image]][npm-url]<sp/>[![Build<sp/>Status][travis-image]][travis-url]<sp/>[![Dependency<sp/>status][david-dm-image]][david-dm-url]<sp/>[![Dev<sp/>Dependency<sp/>status][david-dm-dev-image]][david-dm-dev-url]<sp/>[![Greenkeeper<sp/>badge][greenkeeper-image]][greenkeeper-url]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[npm-url]:https://npmjs.org/package/promise-retry</highlight></codeline>
<codeline><highlight class="normal">[downloads-image]:http://img.shields.io/npm/dm/promise-retry.svg</highlight></codeline>
<codeline><highlight class="normal">[npm-image]:http://img.shields.io/npm/v/promise-retry.svg</highlight></codeline>
<codeline><highlight class="normal">[travis-url]:https://travis-ci.org/IndigoUnited/node-promise-retry</highlight></codeline>
<codeline><highlight class="normal">[travis-image]:http://img.shields.io/travis/IndigoUnited/node-promise-retry/master.svg</highlight></codeline>
<codeline><highlight class="normal">[david-dm-url]:https://david-dm.org/IndigoUnited/node-promise-retry</highlight></codeline>
<codeline><highlight class="normal">[david-dm-image]:https://img.shields.io/david/IndigoUnited/node-promise-retry.svg</highlight></codeline>
<codeline><highlight class="normal">[david-dm-dev-url]:https://david-dm.org/IndigoUnited/node-promise-retry?type=dev</highlight></codeline>
<codeline><highlight class="normal">[david-dm-dev-image]:https://img.shields.io/david/dev/IndigoUnited/node-promise-retry.svg</highlight></codeline>
<codeline><highlight class="normal">[greenkeeper-image]:https://badges.greenkeeper.io/IndigoUnited/node-promise-retry.svg</highlight></codeline>
<codeline><highlight class="normal">[greenkeeper-url]:https://greenkeeper.io/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Retries<sp/>a<sp/>function<sp/>that<sp/>returns<sp/>a<sp/>promise,<sp/>leveraging<sp/>the<sp/>power<sp/>of<sp/>the<sp/>[retry](https://github.com/tim-kos/node-retry)<sp/>module<sp/>to<sp/>the<sp/>promises<sp/>world.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">There&apos;s<sp/>already<sp/>some<sp/>modules<sp/>that<sp/>are<sp/>able<sp/>to<sp/>retry<sp/>functions<sp/>that<sp/>return<sp/>promises<sp/>but</highlight></codeline>
<codeline><highlight class="normal">they<sp/>were<sp/>rather<sp/>difficult<sp/>to<sp/>use<sp/>or<sp/>do<sp/>not<sp/>offer<sp/>an<sp/>easy<sp/>way<sp/>to<sp/>do<sp/>conditional<sp/>retries.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Installation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`$<sp/>npm<sp/>install<sp/>promise-retry`</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Usage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>promiseRetry(fn,<sp/>[options])</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Calls<sp/>`fn`<sp/>until<sp/>the<sp/>returned<sp/>promise<sp/>ends<sp/>up<sp/>fulfilled<sp/>or<sp/>rejected<sp/>with<sp/>an<sp/>error<sp/>different<sp/>than</highlight></codeline>
<codeline><highlight class="normal">a<sp/>`retry`<sp/>error.<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">The<sp/>`options`<sp/>argument<sp/>is<sp/>an<sp/>object<sp/>which<sp/>maps<sp/>to<sp/>the<sp/>[retry](https://github.com/tim-kos/node-retry)<sp/>module<sp/>options:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>`retries`:<sp/>The<sp/>maximum<sp/>amount<sp/>of<sp/>times<sp/>to<sp/>retry<sp/>the<sp/>operation.<sp/>Default<sp/>is<sp/>`10`.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`factor`:<sp/>The<sp/>exponential<sp/>factor<sp/>to<sp/>use.<sp/>Default<sp/>is<sp/>`2`.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`minTimeout`:<sp/>The<sp/>number<sp/>of<sp/>milliseconds<sp/>before<sp/>starting<sp/>the<sp/>first<sp/>retry.<sp/>Default<sp/>is<sp/>`1000`.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`maxTimeout`:<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>milliseconds<sp/>between<sp/>two<sp/>retries.<sp/>Default<sp/>is<sp/>`Infinity`.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`randomize`:<sp/>Randomizes<sp/>the<sp/>timeouts<sp/>by<sp/>multiplying<sp/>with<sp/>a<sp/>factor<sp/>between<sp/>`1`<sp/>to<sp/>`2`.<sp/>Default<sp/>is<sp/>`false`.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`fn`<sp/>function<sp/>will<sp/>receive<sp/>a<sp/>`retry`<sp/>function<sp/>as<sp/>its<sp/>first<sp/>argument<sp/>that<sp/>should<sp/>be<sp/>called<sp/>with<sp/>an<sp/>error<sp/>whenever<sp/>you<sp/>want<sp/>to<sp/>retry<sp/>`fn`.<sp/>The<sp/>`retry`<sp/>function<sp/>will<sp/>always<sp/>throw<sp/>an<sp/>error.<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">If<sp/>there<sp/>are<sp/>retries<sp/>left,<sp/>it<sp/>will<sp/>throw<sp/>a<sp/>special<sp/>`retry`<sp/>error<sp/>that<sp/>will<sp/>be<sp/>handled<sp/>internally<sp/>to<sp/>call<sp/>`fn`<sp/>again.</highlight></codeline>
<codeline><highlight class="normal">If<sp/>there<sp/>are<sp/>no<sp/>retries<sp/>left,<sp/>it<sp/>will<sp/>throw<sp/>the<sp/>actual<sp/>error<sp/>passed<sp/>to<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>prefer,<sp/>you<sp/>can<sp/>pass<sp/>the<sp/>options<sp/>first<sp/>using<sp/>the<sp/>alternative<sp/>function<sp/>signature<sp/>`promiseRetry([options],<sp/>fn)`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Example</highlight></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>promiseRetry<sp/>=<sp/>require(&apos;promise-retry&apos;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Simple<sp/>example</highlight></codeline>
<codeline><highlight class="normal">promiseRetry(function<sp/>(retry,<sp/>number)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(&apos;attempt<sp/>number&apos;,<sp/>number);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>doSomething()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.catch(retry);</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">.then(function<sp/>(value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>..</highlight></codeline>
<codeline><highlight class="normal">},<sp/>function<sp/>(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>..</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Conditional<sp/>example</highlight></codeline>
<codeline><highlight class="normal">promiseRetry(function<sp/>(retry,<sp/>number)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(&apos;attempt<sp/>number&apos;,<sp/>number);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>doSomething()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.catch(function<sp/>(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(err.code<sp/>===<sp/>&apos;ETIMEDOUT&apos;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retry(err);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>err;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">.then(function<sp/>(value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>..</highlight></codeline>
<codeline><highlight class="normal">},<sp/>function<sp/>(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>..</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`$<sp/>npm<sp/>test`</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>License</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Released<sp/>under<sp/>the<sp/>[MIT<sp/>License](http://www.opensource.org/licenses/mit-license.php).</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/promise-retry/README.md"/>
  </compounddef>
</doxygen>
