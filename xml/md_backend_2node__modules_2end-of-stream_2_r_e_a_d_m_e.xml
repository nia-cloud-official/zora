<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2end-of-stream_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2end-of-stream_2_r_e_a_d_m_e</compoundname>
    <title>end-of-stream</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2end-of-stream_2_r_e_a_d_m_e_1autotoc_md869"/> A node module that calls a callback when a readable/writable/duplex stream has completed or failed. <verbatim>npm install end-of-stream
</verbatim> <ulink url="https://travis-ci.org/mafintosh/end-of-stream"><image type="html" name="https://travis-ci.org/mafintosh/end-of-stream.svg?branch=master" alt="Build status" inline="yes"></image>
</ulink></para>
<sect1 id="md_backend_2node__modules_2end-of-stream_2_r_e_a_d_m_e_1autotoc_md870">
<title>Usage</title><para>Simply pass a stream and a callback to the <computeroutput>eos</computeroutput>. Both legacy streams, streams2 and stream3 are supported.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>eos<sp/>=<sp/>require(&apos;end-of-stream&apos;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">eos(readableStream,<sp/>function(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>this<sp/>will<sp/>be<sp/>set<sp/>to<sp/>the<sp/>stream<sp/>instance</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(err)<sp/>return<sp/>console.log(&apos;stream<sp/>had<sp/>an<sp/>error<sp/>or<sp/>closed<sp/>early&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(&apos;stream<sp/>has<sp/>ended&apos;,<sp/>this<sp/>===<sp/>readableStream);</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">eos(writableStream,<sp/>function(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(err)<sp/>return<sp/>console.log(&apos;stream<sp/>had<sp/>an<sp/>error<sp/>or<sp/>closed<sp/>early&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(&apos;stream<sp/>has<sp/>finished&apos;,<sp/>this<sp/>===<sp/>writableStream);</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">eos(duplexStream,<sp/>function(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(err)<sp/>return<sp/>console.log(&apos;stream<sp/>had<sp/>an<sp/>error<sp/>or<sp/>closed<sp/>early&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(&apos;stream<sp/>has<sp/>ended<sp/>and<sp/>finished&apos;,<sp/>this<sp/>===<sp/>duplexStream);</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">eos(duplexStream,<sp/>{readable:false},<sp/>function(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(err)<sp/>return<sp/>console.log(&apos;stream<sp/>had<sp/>an<sp/>error<sp/>or<sp/>closed<sp/>early&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(&apos;stream<sp/>has<sp/>finished<sp/>but<sp/>might<sp/>still<sp/>be<sp/>readable&apos;);</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">eos(duplexStream,<sp/>{writable:false},<sp/>function(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(err)<sp/>return<sp/>console.log(&apos;stream<sp/>had<sp/>an<sp/>error<sp/>or<sp/>closed<sp/>early&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(&apos;stream<sp/>has<sp/>ended<sp/>but<sp/>might<sp/>still<sp/>be<sp/>writable&apos;);</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">eos(readableStream,<sp/>{error:false},<sp/>function(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>do<sp/>not<sp/>treat<sp/>emit(&apos;error&apos;,<sp/>err)<sp/>as<sp/>a<sp/>end-of-stream</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2end-of-stream_2_r_e_a_d_m_e_1autotoc_md871">
<title>License</title><para>MIT</para>
</sect1>
<sect1 id="md_backend_2node__modules_2end-of-stream_2_r_e_a_d_m_e_1autotoc_md872">
<title>Related</title><para><computeroutput>end-of-stream</computeroutput> is part of the <ulink url="https://github.com/maxogden/mississippi">mississippi stream utility collection</ulink> which includes more useful stream modules similar to this one. </para>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/end-of-stream/README.md"/>
  </compounddef>
</doxygen>
