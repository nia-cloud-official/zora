<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="namespacegyp_1_1easy__xml" kind="namespace" language="Python">
    <compoundname>gyp::easy_xml</compoundname>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespacegyp_1_1easy__xml_1a03e57b2d733adca141b4087d10832468" prot="protected" static="no" mutable="no">
        <type>dict</type>
        <definition>dict gyp::easy_xml._xml_escape_map</definition>
        <argsstring></argsstring>
        <name>_xml_escape_map</name>
        <qualifiedname>gyp.easy_xml._xml_escape_map</qualifiedname>
        <initializer>=  {
    &apos;&quot;&apos;: &quot;&amp;quot;&quot;,
    &quot;&apos;&quot;: &quot;&amp;apos;&quot;,
    &quot;&lt;&quot;: &quot;&amp;lt;&quot;,
    &quot;&gt;&quot;: &quot;&amp;gt;&quot;,
    &quot;&amp;&quot;: &quot;&amp;amp;&quot;,
    &quot;\n&quot;: &quot;&amp;#xA;&quot;,
    &quot;\r&quot;: &quot;&amp;#xD;&quot;,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py" line="141" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegyp_1_1easy__xml_1ad080a7c07b995a44d4da1def783e191a" prot="protected" static="no" mutable="no">
        <type></type>
        <definition>gyp::easy_xml._xml_escape_re</definition>
        <argsstring></argsstring>
        <name>_xml_escape_re</name>
        <qualifiedname>gyp.easy_xml._xml_escape_re</qualifiedname>
        <initializer>=  re.compile(&quot;(%s)&quot; % &quot;|&quot;.join(map(re.escape, _xml_escape_map.keys())))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py" line="152" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py" bodystart="152" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacegyp_1_1easy__xml_1af9076fbcacf7b9a10d1c59a49c08d97a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gyp.easy_xml.XmlToString</definition>
        <argsstring>(content, encoding=&quot;utf-8&quot;, pretty=False)</argsstring>
        <name>XmlToString</name>
        <qualifiedname>gyp.easy_xml.XmlToString</qualifiedname>
        <param>
          <type>content</type>
          <defname>content</defname>
        </param>
        <param>
          <type>encoding</type>
          <defname>encoding</defname>
          <defval>&quot;utf-8&quot;</defval>
        </param>
        <param>
          <type>pretty</type>
          <defname>pretty</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim> Writes the XML content to disk, touching the file only if it has changed.

Visual Studio files have a lot of pre-defined structures.  This function makes
it easy to represent these structures as Python data structures, instead of
having to create a lot of function calls.

Each XML element of the content is represented as a list composed of:
1. The name of the element, a string,
2. The attributes of the element, a dictionary (optional), and
3+. The content of the element, if any.  Strings are simple text nodes and
  lists are child elements.

Example 1:
  &lt;test/&gt;
becomes
  [&apos;test&apos;]

Example 2:
  &lt;myelement a=&apos;value1&apos; b=&apos;value2&apos;&gt;
     &lt;childtype&gt;This is&lt;/childtype&gt;
     &lt;childtype&gt;it!&lt;/childtype&gt;
  &lt;/myelement&gt;

becomes
  [&apos;myelement&apos;, {&apos;a&apos;:&apos;value1&apos;, &apos;b&apos;:&apos;value2&apos;},
     [&apos;childtype&apos;, &apos;This is&apos;],
     [&apos;childtype&apos;, &apos;it!&apos;],
  ]

Args:
content:  The structured content to be converted.
encoding: The encoding to report on the first XML line.
pretty: True if we want pretty printing with indents and new lines.

Returns:
The XML content as a string.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py" line="12" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py" bodystart="12" bodyend="59"/>
        <references refid="namespacegyp_1_1easy__xml_1ac7f66029e9129c662361b77caee46401" compoundref="easy__xml_8py" startline="60" endline="109">gyp.easy_xml._ConstructContentList</references>
        <referencedby refid="namespacegyp_1_1easy__xml_1a48ff9e84a26be6ee00b6882e1864f6a6" compoundref="easy__xml_8py" startline="111" endline="140">gyp.easy_xml.WriteXmlIfChanged</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacegyp_1_1easy__xml_1ac7f66029e9129c662361b77caee46401" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gyp.easy_xml._ConstructContentList</definition>
        <argsstring>(xml_parts, specification, pretty, level=0)</argsstring>
        <name>_ConstructContentList</name>
        <qualifiedname>gyp.easy_xml._ConstructContentList</qualifiedname>
        <param>
          <type>xml_parts</type>
          <defname>xml_parts</defname>
        </param>
        <param>
          <type>specification</type>
          <defname>specification</defname>
        </param>
        <param>
          <type>pretty</type>
          <defname>pretty</defname>
        </param>
        <param>
          <type>level</type>
          <defname>level</defname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim> Appends the XML parts corresponding to the specification.

Args:
xml_parts: A list of XML parts to be appended to.
specification:  The specification of the element.  See EasyXml docs.
pretty: True if we want pretty printing with indents and new lines.
level: Indentation level.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py" line="60" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py" bodystart="60" bodyend="109"/>
        <references refid="namespacegyp_1_1easy__xml_1ac7f66029e9129c662361b77caee46401" compoundref="easy__xml_8py" startline="60" endline="109">gyp.easy_xml._ConstructContentList</references>
        <references refid="namespacegyp_1_1easy__xml_1a993445741df15aaa06fe1cdd8444de73" compoundref="easy__xml_8py" startline="155" endline="166">gyp.easy_xml._XmlEscape</references>
        <referencedby refid="namespacegyp_1_1easy__xml_1ac7f66029e9129c662361b77caee46401" compoundref="easy__xml_8py" startline="60" endline="109">gyp.easy_xml._ConstructContentList</referencedby>
        <referencedby refid="namespacegyp_1_1easy__xml_1af9076fbcacf7b9a10d1c59a49c08d97a" compoundref="easy__xml_8py" startline="12" endline="59">gyp.easy_xml.XmlToString</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacegyp_1_1easy__xml_1a48ff9e84a26be6ee00b6882e1864f6a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gyp.easy_xml.WriteXmlIfChanged</definition>
        <argsstring>(content, path, encoding=&quot;utf-8&quot;, pretty=False, win32=(sys.platform==&quot;win32&quot;))</argsstring>
        <name>WriteXmlIfChanged</name>
        <qualifiedname>gyp.easy_xml.WriteXmlIfChanged</qualifiedname>
        <param>
          <type>content</type>
          <defname>content</defname>
        </param>
        <param>
          <type>path</type>
          <defname>path</defname>
        </param>
        <param>
          <type>encoding</type>
          <defname>encoding</defname>
          <defval>&quot;utf-8&quot;</defval>
        </param>
        <param>
          <type>pretty</type>
          <defname>pretty</defname>
          <defval>False</defval>
        </param>
        <param>
          <type>win32</type>
          <defname>win32</defname>
          <defval>(sys.platform==&quot;win32&quot;)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim> Writes the XML content to disk, touching the file only if it has changed.

Args:
content:  The structured content to be written.
path: Location of the file.
encoding: The encoding to report on the first line of the XML file.
pretty: True if we want pretty printing with indents and new lines.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py" line="110" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py" bodystart="111" bodyend="140"/>
        <references refid="namespacegyp_1_1easy__xml_1af9076fbcacf7b9a10d1c59a49c08d97a" compoundref="easy__xml_8py" startline="12" endline="59">gyp.easy_xml.XmlToString</references>
      </memberdef>
      <memberdef kind="function" id="namespacegyp_1_1easy__xml_1a993445741df15aaa06fe1cdd8444de73" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gyp.easy_xml._XmlEscape</definition>
        <argsstring>(value, attr=False)</argsstring>
        <name>_XmlEscape</name>
        <qualifiedname>gyp.easy_xml._XmlEscape</qualifiedname>
        <param>
          <type>value</type>
          <defname>value</defname>
        </param>
        <param>
          <type>attr</type>
          <defname>attr</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim> Escape a string for inclusion in XML.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py" line="155" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py" bodystart="155" bodyend="166"/>
        <referencedby refid="namespacegyp_1_1easy__xml_1ac7f66029e9129c662361b77caee46401" compoundref="easy__xml_8py" startline="60" endline="109">gyp.easy_xml._ConstructContentList</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py" line="1" column="1"/>
  </compounddef>
</doxygen>
