<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="namespacegyp_1_1_m_s_v_s_util" kind="namespace" language="Python">
    <compoundname>gyp::MSVSUtil</compoundname>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespacegyp_1_1_m_s_v_s_util_1a9108321beb6a3cfb332776732c8f3a4b" prot="public" static="no" mutable="no">
        <type>dict</type>
        <definition>dict gyp::MSVSUtil.TARGET_TYPE_EXT</definition>
        <argsstring></argsstring>
        <name>TARGET_TYPE_EXT</name>
        <qualifiedname>gyp.MSVSUtil.TARGET_TYPE_EXT</qualifiedname>
        <initializer>=  {
    &quot;executable&quot;: &quot;exe&quot;,
    &quot;loadable_module&quot;: &quot;dll&quot;,
    &quot;shared_library&quot;: &quot;dll&quot;,
    &quot;static_library&quot;: &quot;lib&quot;,
    &quot;windows_driver&quot;: &quot;sys&quot;,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" line="12" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" bodystart="12" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacegyp_1_1_m_s_v_s_util_1a4a4cb2bf8ce33246d1277c90c6fbb094" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gyp.MSVSUtil._GetLargePdbShimCcPath</definition>
        <argsstring>()</argsstring>
        <name>_GetLargePdbShimCcPath</name>
        <qualifiedname>gyp.MSVSUtil._GetLargePdbShimCcPath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Returns the path of the large_pdb_shim.cc file.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" line="21" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" bodystart="21" bodyend="29"/>
        <referencedby refid="namespacegyp_1_1_m_s_v_s_util_1ae17c81ec653d2e6fbc85242db5fd30bd" compoundref="_m_s_v_s_util_8py" startline="169" endline="272">gyp.MSVSUtil.InsertLargePdbShims</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacegyp_1_1_m_s_v_s_util_1acba4a54e38709d19bbde83024cff6da8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gyp.MSVSUtil._DeepCopySomeKeys</definition>
        <argsstring>(in_dict, keys)</argsstring>
        <name>_DeepCopySomeKeys</name>
        <qualifiedname>gyp.MSVSUtil._DeepCopySomeKeys</qualifiedname>
        <param>
          <type>in_dict</type>
          <defname>in_dict</defname>
        </param>
        <param>
          <type>keys</type>
          <defname>keys</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Performs a partial deep-copy on |in_dict|, only copying the keys in |keys|.

Arguments:
in_dict: The dictionary to copy.
keys: The keys to be copied. If a key is in this list and doesn&apos;t exist in
    |in_dict| this is not an error.
Returns:
The partially deep-copied dictionary.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" line="30" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" bodystart="30" bodyend="47"/>
        <referencedby refid="namespacegyp_1_1_m_s_v_s_util_1ae17c81ec653d2e6fbc85242db5fd30bd" compoundref="_m_s_v_s_util_8py" startline="169" endline="272">gyp.MSVSUtil.InsertLargePdbShims</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacegyp_1_1_m_s_v_s_util_1acf497f03234f455f52f09625a6c9ce50" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gyp.MSVSUtil._SuffixName</definition>
        <argsstring>(name, suffix)</argsstring>
        <name>_SuffixName</name>
        <qualifiedname>gyp.MSVSUtil._SuffixName</qualifiedname>
        <param>
          <type>name</type>
          <defname>name</defname>
        </param>
        <param>
          <type>suffix</type>
          <defname>suffix</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Add a suffix to the end of a target.

Arguments:
name: name of the target (foo#target)
suffix: the suffix to be added
Returns:
Target name with suffix added (foo_suffix#target)
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" line="48" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" bodystart="48" bodyend="61"/>
        <referencedby refid="namespacegyp_1_1_m_s_v_s_util_1a4cdefb42e91d7747789db935c5310046" compoundref="_m_s_v_s_util_8py" startline="62" endline="73">gyp.MSVSUtil._ShardName</referencedby>
        <referencedby refid="namespacegyp_1_1_m_s_v_s_util_1ae17c81ec653d2e6fbc85242db5fd30bd" compoundref="_m_s_v_s_util_8py" startline="169" endline="272">gyp.MSVSUtil.InsertLargePdbShims</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacegyp_1_1_m_s_v_s_util_1a4cdefb42e91d7747789db935c5310046" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gyp.MSVSUtil._ShardName</definition>
        <argsstring>(name, number)</argsstring>
        <name>_ShardName</name>
        <qualifiedname>gyp.MSVSUtil._ShardName</qualifiedname>
        <param>
          <type>name</type>
          <defname>name</defname>
        </param>
        <param>
          <type>number</type>
          <defname>number</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Add a shard number to the end of a target.

Arguments:
name: name of the target (foo#target)
number: shard number
Returns:
Target name with shard added (foo_1#target)
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" line="62" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" bodystart="62" bodyend="73"/>
        <references refid="namespacegyp_1_1_m_s_v_s_util_1acf497f03234f455f52f09625a6c9ce50" compoundref="_m_s_v_s_util_8py" startline="48" endline="61">gyp.MSVSUtil._SuffixName</references>
        <referencedby refid="namespacegyp_1_1_m_s_v_s_util_1aaff9bd36c35afd64173c231f3f536cc5" compoundref="_m_s_v_s_util_8py" startline="74" endline="129">gyp.MSVSUtil.ShardTargets</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacegyp_1_1_m_s_v_s_util_1aaff9bd36c35afd64173c231f3f536cc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gyp.MSVSUtil.ShardTargets</definition>
        <argsstring>(target_list, target_dicts)</argsstring>
        <name>ShardTargets</name>
        <qualifiedname>gyp.MSVSUtil.ShardTargets</qualifiedname>
        <param>
          <type>target_list</type>
          <defname>target_list</defname>
        </param>
        <param>
          <type>target_dicts</type>
          <defname>target_dicts</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Shard some targets apart to work around the linkers limits.

Arguments:
target_list: List of target pairs: &apos;base/base.gyp:base&apos;.
target_dicts: Dict of target properties keyed on target pair.
Returns:
Tuple of the new sharded versions of the inputs.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" line="74" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" bodystart="74" bodyend="129"/>
        <references refid="namespacegyp_1_1_m_s_v_s_util_1a4cdefb42e91d7747789db935c5310046" compoundref="_m_s_v_s_util_8py" startline="62" endline="73">gyp.MSVSUtil._ShardName</references>
      </memberdef>
      <memberdef kind="function" id="namespacegyp_1_1_m_s_v_s_util_1ad16d6f5e7cb9d8d62ec659f1ca019910" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gyp.MSVSUtil._GetPdbPath</definition>
        <argsstring>(target_dict, config_name, vars)</argsstring>
        <name>_GetPdbPath</name>
        <qualifiedname>gyp.MSVSUtil._GetPdbPath</qualifiedname>
        <param>
          <type>target_dict</type>
          <defname>target_dict</defname>
        </param>
        <param>
          <type>config_name</type>
          <defname>config_name</defname>
        </param>
        <param>
          <type>vars</type>
          <defname>vars</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Returns the path to the PDB file that will be generated by a given
configuration.

The lookup proceeds as follows:
- Look for an explicit path in the VCLinkerTool configuration block.
- Look for an &apos;msvs_large_pdb_path&apos; variable.
- Use &apos;&lt;(PRODUCT_DIR)/&lt;(product_name).(exe|dll).pdb&apos; if &apos;product_name&apos; is
  specified.
- Use &apos;&lt;(PRODUCT_DIR)/&lt;(target_name).(exe|dll).pdb&apos;.

Arguments:
target_dict: The target dictionary to be searched.
config_name: The name of the configuration of interest.
vars: A dictionary of common GYP variables with generator-specific values.
Returns:
The path of the corresponding PDB file.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" line="130" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" bodystart="130" bodyend="168"/>
        <referencedby refid="namespacegyp_1_1_m_s_v_s_util_1ae17c81ec653d2e6fbc85242db5fd30bd" compoundref="_m_s_v_s_util_8py" startline="169" endline="272">gyp.MSVSUtil.InsertLargePdbShims</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacegyp_1_1_m_s_v_s_util_1ae17c81ec653d2e6fbc85242db5fd30bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gyp.MSVSUtil.InsertLargePdbShims</definition>
        <argsstring>(target_list, target_dicts, vars)</argsstring>
        <name>InsertLargePdbShims</name>
        <qualifiedname>gyp.MSVSUtil.InsertLargePdbShims</qualifiedname>
        <param>
          <type>target_list</type>
          <defname>target_list</defname>
        </param>
        <param>
          <type>target_dicts</type>
          <defname>target_dicts</defname>
        </param>
        <param>
          <type>vars</type>
          <defname>vars</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Insert a shim target that forces the linker to use 4KB pagesize PDBs.

This is a workaround for targets with PDBs greater than 1GB in size, the
limit for the 1KB pagesize PDBs created by the linker by default.

Arguments:
target_list: List of target pairs: &apos;base/base.gyp:base&apos;.
target_dicts: Dict of target properties keyed on target pair.
vars: A dictionary of common GYP variables with generator-specific values.
Returns:
Tuple of the shimmed version of the inputs.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" line="169" column="1" bodyfile="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" bodystart="169" bodyend="272"/>
        <references refid="namespacegyp_1_1_m_s_v_s_util_1acba4a54e38709d19bbde83024cff6da8" compoundref="_m_s_v_s_util_8py" startline="30" endline="47">gyp.MSVSUtil._DeepCopySomeKeys</references>
        <references refid="namespacegyp_1_1_m_s_v_s_util_1a4a4cb2bf8ce33246d1277c90c6fbb094" compoundref="_m_s_v_s_util_8py" startline="21" endline="29">gyp.MSVSUtil._GetLargePdbShimCcPath</references>
        <references refid="namespacegyp_1_1_m_s_v_s_util_1ad16d6f5e7cb9d8d62ec659f1ca019910" compoundref="_m_s_v_s_util_8py" startline="130" endline="168">gyp.MSVSUtil._GetPdbPath</references>
        <references refid="namespacegyp_1_1_m_s_v_s_util_1acf497f03234f455f52f09625a6c9ce50" compoundref="_m_s_v_s_util_8py" startline="48" endline="61">gyp.MSVSUtil._SuffixName</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Utility functions shared amongst the Windows generators.</verbatim> </para>
    </detaileddescription>
    <location file="backend/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py" line="1" column="1"/>
  </compounddef>
</doxygen>
