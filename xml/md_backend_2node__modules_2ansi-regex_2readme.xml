<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2ansi-regex_2readme" kind="page">
    <compoundname>md_backend_2node__modules_2ansi-regex_2readme</compoundname>
    <title>ansi-regex</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2ansi-regex_2readme_1autotoc_md168"/> <blockquote><para><zwj/>Regular expression for matching <ulink url="https://en.wikipedia.org/wiki/ANSI_escape_code">ANSI escape codes</ulink> </para>
</blockquote></para>
<sect1 id="md_backend_2node__modules_2ansi-regex_2readme_1autotoc_md169">
<title>Install</title><para><programlisting><codeline><highlight class="normal">$<sp/>npm<sp/>install<sp/>ansi-regex</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2ansi-regex_2readme_1autotoc_md170">
<title>Usage</title><para><programlisting filename=".js"><codeline><highlight class="normal">const<sp/>ansiRegex<sp/>=<sp/>require(&apos;ansi-regex&apos;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ansiRegex().test(&apos;\u001B[4mcake\u001B[0m&apos;);</highlight></codeline>
<codeline><highlight class="normal">//=&gt;<sp/>true</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ansiRegex().test(&apos;cake&apos;);</highlight></codeline>
<codeline><highlight class="normal">//=&gt;<sp/>false</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;\u001B[4mcake\u001B[0m&apos;.match(ansiRegex());</highlight></codeline>
<codeline><highlight class="normal">//=&gt;<sp/>[&apos;\u001B[4m&apos;,<sp/>&apos;\u001B[0m&apos;]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;\u001B[4mcake\u001B[0m&apos;.match(ansiRegex({onlyFirst:<sp/>true}));</highlight></codeline>
<codeline><highlight class="normal">//=&gt;<sp/>[&apos;\u001B[4m&apos;]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;\u001B]8;;https://github.com\u0007click\u001B]8;;\u0007&apos;.match(ansiRegex());</highlight></codeline>
<codeline><highlight class="normal">//=&gt;<sp/>[&apos;\u001B]8;;https://github.com\u0007&apos;,<sp/>&apos;\u001B]8;;\u0007&apos;]</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2ansi-regex_2readme_1autotoc_md171">
<title>API</title><sect2 id="md_backend_2node__modules_2ansi-regex_2readme_1autotoc_md172">
<title>ansiRegex(options?)</title><para>Returns a regex for matching ANSI escape codes.</para>
<sect3 id="md_backend_2node__modules_2ansi-regex_2readme_1autotoc_md173">
<title>options</title><para>Type: <computeroutput>object</computeroutput></para>
<sect4 id="md_backend_2node__modules_2ansi-regex_2readme_1autotoc_md174">
<title>onlyFirst</title><para>Type: <computeroutput>boolean</computeroutput><linebreak/>
 Default: <computeroutput>false</computeroutput> *(Matches any ANSI escape codes in a string)*</para>
<para>Match only the first ANSI escape.</para>
</sect4>
</sect3>
</sect2>
</sect1>
<sect1 id="md_backend_2node__modules_2ansi-regex_2readme_1autotoc_md175">
<title>FAQ</title><sect2 id="md_backend_2node__modules_2ansi-regex_2readme_1autotoc_md176">
<title>Why do you test for codes not in the ECMA 48 standard?</title><para>Some of the codes we run as a test are codes that we acquired finding various lists of non-standard or manufacturer specific codes. We test for both standard and non-standard codes, as most of them follow the same or similar format and can be safely matched in strings without the risk of removing actual string content. There are a few non-standard control codes that do not follow the traditional format (i.e. they end in numbers) thus forcing us to exclude them from the test because we cannot reliably match them.</para>
<para>On the historical side, those ECMA standards were established in the early 90&apos;s whereas the VT100, for example, was designed in the mid/late 70&apos;s. At that point in time, control codes were still pretty ungoverned and engineers used them for a multitude of things, namely to activate hardware ports that may have been proprietary. Somewhere else you see a similar &apos;anarchy&apos; of codes is in the x86 architecture for processors; there are a ton of &quot;interrupts&quot; that can mean different things on certain brands of processors, most of which have been phased out.</para>
</sect2>
</sect1>
<sect1 id="md_backend_2node__modules_2ansi-regex_2readme_1autotoc_md177">
<title>Maintainers</title><para><itemizedlist>
<listitem><para><ulink url="https://github.com/sindresorhus">Sindre Sorhus</ulink></para>
</listitem><listitem><para><ulink url="https://github.com/qix-">Josh Junon</ulink></para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para> <bold> <ulink url="https://tidelift.com/subscription/pkg/npm-ansi-regex?utm_source=npm-ansi-regex&amp;utm_medium=referral&amp;utm_campaign=readme">Get professional support for this package with a Tidelift subscription</ulink> </bold> <linebreak/>
 <subscript> Tidelift helps make open source sustainable for maintainers while giving companies<linebreak/>
assurances about security, maintenance, and licensing for their dependencies. </subscript>  </para>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/ansi-regex/readme.md"/>
  </compounddef>
</doxygen>
