<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2media-typer_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2media-typer_2_r_e_a_d_m_e</compoundname>
    <title>media-typer</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2media-typer_2_r_e_a_d_m_e_1autotoc_md1842"/> <ulink url="https://npmjs.org/package/media-typer"><image type="html" name="https://img.shields.io/npm/v/media-typer.svg?style=flat" alt="NPM Version" inline="yes"></image>
</ulink> <ulink url="https://npmjs.org/package/media-typer"><image type="html" name="https://img.shields.io/npm/dm/media-typer.svg?style=flat" alt="NPM Downloads" inline="yes"></image>
</ulink> <ulink url="http://nodejs.org/download/"><image type="html" name="https://img.shields.io/badge/node.js-%3E%3D_0.6-brightgreen.svg?style=flat" alt="Node.js Version" inline="yes"></image>
</ulink> <ulink url="https://travis-ci.org/jshttp/media-typer"><image type="html" name="https://img.shields.io/travis/jshttp/media-typer.svg?style=flat" alt="Build Status" inline="yes"></image>
</ulink> <ulink url="https://coveralls.io/r/jshttp/media-typer"><image type="html" name="https://img.shields.io/coveralls/jshttp/media-typer.svg?style=flat" alt="Test Coverage" inline="yes"></image>
</ulink></para>
<para>Simple RFC 6838 media type parser</para>
<sect1 id="md_backend_2node__modules_2media-typer_2_r_e_a_d_m_e_1autotoc_md1843">
<title>Installation</title><para><programlisting filename=".sh"><codeline><highlight class="normal">$<sp/>npm<sp/>install<sp/>media-typer</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2media-typer_2_r_e_a_d_m_e_1autotoc_md1844">
<title>API</title><para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>typer<sp/>=<sp/>require(&apos;media-typer&apos;)</highlight></codeline>
</programlisting></para>
<sect2 id="md_backend_2node__modules_2media-typer_2_r_e_a_d_m_e_1autotoc_md1845">
<title>typer.parse(string)</title><para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>obj<sp/>=<sp/>typer.parse(&apos;image/svg+xml;<sp/>charset=utf-8&apos;)</highlight></codeline>
</programlisting></para>
<para>Parse a media type string. This will return an object with the following properties (examples are shown for the string <lsquo/>&apos;image/svg+xml; charset=utf-8<rsquo/>`):</para>
<para><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The type of the media type (always lower case). Example: <lsquo/>&apos;image<rsquo/>`</para>
</listitem><listitem><para><computeroutput>subtype</computeroutput>: The subtype of the media type (always lower case). Example: <lsquo/>&apos;svg<rsquo/>`</para>
</listitem><listitem><para><computeroutput>suffix</computeroutput>: The suffix of the media type (always lower case). Example: <lsquo/>&apos;xml<rsquo/>`</para>
</listitem><listitem><para><computeroutput>parameters</computeroutput>: An object of the parameters in the media type (name of parameter always lower case). Example: <lsquo/>{charset: &apos;utf-8<rsquo/>}`</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_backend_2node__modules_2media-typer_2_r_e_a_d_m_e_1autotoc_md1846">
<title>typer.parse(req)</title><para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>obj<sp/>=<sp/>typer.parse(req)</highlight></codeline>
</programlisting></para>
<para>Parse the <computeroutput>content-type</computeroutput> header from the given <computeroutput>req</computeroutput>. Short-cut for <lsquo/>typer.parse(req.headers[&apos;content-type<rsquo/>])`.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2media-typer_2_r_e_a_d_m_e_1autotoc_md1847">
<title>typer.parse(res)</title><para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>obj<sp/>=<sp/>typer.parse(res)</highlight></codeline>
</programlisting></para>
<para>Parse the <computeroutput>content-type</computeroutput> header set on the given <computeroutput>res</computeroutput>. Short-cut for <lsquo/>typer.parse(res.getHeader(&apos;content-type<rsquo/>))`.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2media-typer_2_r_e_a_d_m_e_1autotoc_md1848">
<title>typer.format(obj)</title><para><programlisting filename=".js"><codeline><highlight class="normal">var<sp/>obj<sp/>=<sp/>typer.format({type:<sp/>&apos;image&apos;,<sp/>subtype:<sp/>&apos;svg&apos;,<sp/>suffix:<sp/>&apos;xml&apos;})</highlight></codeline>
</programlisting></para>
<para>Format an object into a media type string. This will return a string of the mime type for the given object. For the properties of the object, see the documentation for <computeroutput>typer.parse(string)</computeroutput>.</para>
</sect2>
</sect1>
<sect1 id="md_backend_2node__modules_2media-typer_2_r_e_a_d_m_e_1autotoc_md1849">
<title>License</title><para>[MIT](LICENSE) </para>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/media-typer/README.md"/>
  </compounddef>
</doxygen>
