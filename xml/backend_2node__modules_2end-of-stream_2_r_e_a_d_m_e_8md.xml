<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="backend_2node__modules_2end-of-stream_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>end-of-stream</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>node<sp/>module<sp/>that<sp/>calls<sp/>a<sp/>callback<sp/>when<sp/>a<sp/>readable/writable/duplex<sp/>stream<sp/>has<sp/>completed<sp/>or<sp/>failed.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>npm<sp/>install<sp/>end-of-stream</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[![Build<sp/>status](https://travis-ci.org/mafintosh/end-of-stream.svg?branch=master)](https://travis-ci.org/mafintosh/end-of-stream)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Usage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Simply<sp/>pass<sp/>a<sp/>stream<sp/>and<sp/>a<sp/>callback<sp/>to<sp/>the<sp/>`eos`.</highlight></codeline>
<codeline><highlight class="normal">Both<sp/>legacy<sp/>streams,<sp/>streams2<sp/>and<sp/>stream3<sp/>are<sp/>supported.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```<sp/>js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>eos<sp/>=<sp/>require(&apos;end-of-stream&apos;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">eos(readableStream,<sp/>function(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>this<sp/>will<sp/>be<sp/>set<sp/>to<sp/>the<sp/>stream<sp/>instance</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(err)<sp/>return<sp/>console.log(&apos;stream<sp/>had<sp/>an<sp/>error<sp/>or<sp/>closed<sp/>early&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(&apos;stream<sp/>has<sp/>ended&apos;,<sp/>this<sp/>===<sp/>readableStream);</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">eos(writableStream,<sp/>function(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(err)<sp/>return<sp/>console.log(&apos;stream<sp/>had<sp/>an<sp/>error<sp/>or<sp/>closed<sp/>early&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(&apos;stream<sp/>has<sp/>finished&apos;,<sp/>this<sp/>===<sp/>writableStream);</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">eos(duplexStream,<sp/>function(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(err)<sp/>return<sp/>console.log(&apos;stream<sp/>had<sp/>an<sp/>error<sp/>or<sp/>closed<sp/>early&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(&apos;stream<sp/>has<sp/>ended<sp/>and<sp/>finished&apos;,<sp/>this<sp/>===<sp/>duplexStream);</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">eos(duplexStream,<sp/>{readable:false},<sp/>function(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(err)<sp/>return<sp/>console.log(&apos;stream<sp/>had<sp/>an<sp/>error<sp/>or<sp/>closed<sp/>early&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(&apos;stream<sp/>has<sp/>finished<sp/>but<sp/>might<sp/>still<sp/>be<sp/>readable&apos;);</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">eos(duplexStream,<sp/>{writable:false},<sp/>function(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(err)<sp/>return<sp/>console.log(&apos;stream<sp/>had<sp/>an<sp/>error<sp/>or<sp/>closed<sp/>early&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(&apos;stream<sp/>has<sp/>ended<sp/>but<sp/>might<sp/>still<sp/>be<sp/>writable&apos;);</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">eos(readableStream,<sp/>{error:false},<sp/>function(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>do<sp/>not<sp/>treat<sp/>emit(&apos;error&apos;,<sp/>err)<sp/>as<sp/>a<sp/>end-of-stream</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>License</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MIT</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Related</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`end-of-stream`<sp/>is<sp/>part<sp/>of<sp/>the<sp/>[mississippi<sp/>stream<sp/>utility<sp/>collection](https://github.com/maxogden/mississippi)<sp/>which<sp/>includes<sp/>more<sp/>useful<sp/>stream<sp/>modules<sp/>similar<sp/>to<sp/>this<sp/>one.</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/end-of-stream/README.md"/>
  </compounddef>
</doxygen>
