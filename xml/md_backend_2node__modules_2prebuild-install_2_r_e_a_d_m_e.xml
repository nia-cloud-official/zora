<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e</compoundname>
    <title>prebuild-install</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e_1autotoc_md2720"/> <blockquote><para><zwj/><bold>A command line tool to easily install prebuilt binaries for multiple versions of Node.js &amp; Electron on a specific platform.</bold> By default it downloads prebuilt binaries from a GitHub release. </para>
</blockquote></para>
<para><ulink url="https://www.npmjs.com/package/prebuild-install"><image type="html" name="https://img.shields.io/npm/v/prebuild-install.svg" alt="npm" inline="yes"></image>
</ulink> <image type="html" name="https://img.shields.io/node/v/prebuild-install.svg" alt="Node version" inline="yes"></image>
 <ulink url="https://github.com/prebuild/prebuild-install/actions/workflows/test.yml"><image type="html" name="https://img.shields.io/github/workflow/status/prebuild/prebuild-install/Test?label=test" alt="Test" inline="yes"></image>
</ulink> <ulink url="https://standardjs.com"><image type="html" name="https://img.shields.io/badge/standard-informational?logo=javascript\&amp;logoColor=fff" alt="Standard" inline="yes"></image>
</ulink> <ulink url="https://common-changelog.org"><image type="html" name="https://common-changelog.org/badge.svg" alt="Common Changelog" inline="yes"></image>
</ulink></para>
<sect1 id="md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e_1autotoc_md2721">
<title>Note</title><para>**Instead of <ulink url="https://github.com/prebuild/prebuild"><computeroutput>prebuild</computeroutput></ulink> paired with <ulink url="https://github.com/prebuild/prebuild-install"><computeroutput>prebuild-install</computeroutput></ulink>, we recommend <ulink url="https://github.com/prebuild/prebuildify"><computeroutput>prebuildify</computeroutput></ulink> paired with <ulink url="https://github.com/prebuild/node-gyp-build"><computeroutput>node-gyp-build</computeroutput></ulink>.**</para>
<para>With <computeroutput>prebuildify</computeroutput>, all prebuilt binaries are shipped inside the package that is published to npm, which means there&apos;s no need for a separate download step like you find in <computeroutput>prebuild</computeroutput>. The irony of this approach is that it is faster to download all prebuilt binaries for every platform when they are bundled than it is to download a single prebuilt binary as an install script.</para>
<para>Upsides:</para>
<para><orderedlist>
<listitem><para>No extra download step, making it more reliable and faster to install.</para>
</listitem><listitem><para>Supports changing runtime versions locally and using the same install between Node.js and Electron. Reinstalling or rebuilding is not necessary, as all prebuilt binaries are in the npm tarball and the correct one is simply picked on runtime.</para>
</listitem><listitem><para>The <computeroutput>node-gyp-build</computeroutput> runtime dependency is dependency-free and will remain so out of principle, because introducing dependencies would negate the shorter install time.</para>
</listitem><listitem><para>Prebuilt binaries work even if npm install scripts are disabled.</para>
</listitem><listitem><para>The npm package checksum covers prebuilt binaries too.</para>
</listitem></orderedlist>
</para>
<para>Downsides:</para>
<para><orderedlist>
<listitem><para>The installed npm package is larger on disk. Using <ulink url="https://nodejs.org/api/n-api.html">Node-API</ulink> alleviates this because Node-API binaries are runtime-agnostic and forward-compatible.</para>
</listitem><listitem><para>Publishing is mildly more complicated, because <computeroutput>npm publish</computeroutput> must be done after compiling and fetching prebuilt binaries (typically in CI).</para>
</listitem></orderedlist>
</para>
</sect1>
<sect1 id="md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e_1autotoc_md2722">
<title>Usage</title><para>Use <ulink url="https://github.com/prebuild/prebuild"><computeroutput>prebuild</computeroutput></ulink> to create and upload prebuilt binaries. Then change your package.json install script to:</para>
<para><programlisting filename=".json"><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;scripts&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;install&quot;:<sp/>&quot;prebuild-install<sp/>||<sp/>node-gyp<sp/>rebuild&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>When a consumer then installs your package with npm thus triggering the above install script, <computeroutput>prebuild-install</computeroutput> will download a suitable prebuilt binary, or exit with a non-zero exit code if there is none, which triggers <computeroutput>node-gyp rebuild</computeroutput> in order to build from source.</para>
<para>Options (see below) can be passed to <computeroutput>prebuild-install</computeroutput> like so:</para>
<para><programlisting filename=".json"><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;scripts&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;install&quot;:<sp/>&quot;prebuild-install<sp/>-r<sp/>napi<sp/>||<sp/>node-gyp<sp/>rebuild&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<sect2 id="md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e_1autotoc_md2723">
<title>Help</title><para><programlisting><codeline><highlight class="normal">prebuild-install<sp/>[options]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>--download<sp/><sp/><sp/><sp/>-d<sp/><sp/>[url]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(download<sp/>prebuilds,<sp/>no<sp/>url<sp/>means<sp/>github)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--target<sp/><sp/><sp/><sp/><sp/><sp/>-t<sp/><sp/>version<sp/><sp/><sp/><sp/><sp/>(version<sp/>to<sp/>install<sp/>for)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--runtime<sp/><sp/><sp/><sp/><sp/>-r<sp/><sp/>runtime<sp/><sp/><sp/><sp/><sp/>(Node<sp/>runtime<sp/>[node,<sp/>napi<sp/>or<sp/>electron]<sp/>to<sp/>build<sp/>or<sp/>install<sp/>for,<sp/>default<sp/>is<sp/>node)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--path<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-p<sp/><sp/>path<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(make<sp/>a<sp/>prebuild-install<sp/>here)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--token<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-T<sp/><sp/>gh-token<sp/><sp/><sp/><sp/>(github<sp/>token<sp/>for<sp/>private<sp/>repos)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--arch<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arch<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(target<sp/>CPU<sp/>architecture,<sp/>see<sp/>Node<sp/>OS<sp/>module<sp/>docs,<sp/>default<sp/>is<sp/>current<sp/>arch)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--platform<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>platform<sp/><sp/><sp/><sp/>(target<sp/>platform,<sp/>see<sp/>Node<sp/>OS<sp/>module<sp/>docs,<sp/>default<sp/>is<sp/>current<sp/>platform)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--tag-prefix<sp/>&lt;prefix&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(github<sp/>tag<sp/>prefix,<sp/>default<sp/>is<sp/>&quot;v&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--build-from-source<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(skip<sp/>prebuild<sp/>download)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--verbose<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(log<sp/>verbosely)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--libc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(use<sp/>provided<sp/>libc<sp/>rather<sp/>than<sp/>system<sp/>default)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--debug<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(set<sp/>Debug<sp/>or<sp/>Release<sp/>configuration)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--version<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(print<sp/>prebuild-install<sp/>version<sp/>and<sp/>exit)</highlight></codeline>
</programlisting></para>
<para>When <computeroutput>prebuild-install</computeroutput> is run via an <computeroutput>npm</computeroutput> script, options <computeroutput>--build-from-source</computeroutput>, <computeroutput>--debug</computeroutput>, <computeroutput>--download</computeroutput>, <computeroutput>--target</computeroutput>, <computeroutput>--runtime</computeroutput>, <computeroutput>--arch</computeroutput> <computeroutput>--platform</computeroutput> and <computeroutput>--libc</computeroutput> may be passed through via arguments given to the <computeroutput>npm</computeroutput> command.</para>
<para>Alternatively you can set environment variables <computeroutput>npm_config_build_from_source=true</computeroutput>, <computeroutput>npm_config_platform</computeroutput>, <computeroutput>npm_config_arch</computeroutput>, <computeroutput>npm_config_target</computeroutput> <computeroutput>npm_config_runtime</computeroutput> and <computeroutput>npm_config_libc</computeroutput>.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e_1autotoc_md2724">
<title>Libc</title><para>On non-glibc Linux platforms, the Libc name is appended to platform name. For example, musl-based environments are called <computeroutput>linuxmusl</computeroutput>. If <computeroutput>--libc=glibc</computeroutput> is passed as option, glibc is discarded and platform is called as just <computeroutput>linux</computeroutput>. This can be used for example to build cross-platform packages on Alpine Linux.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e_1autotoc_md2725">
<title>Private Repositories</title><para><computeroutput>prebuild-install</computeroutput> supports downloading prebuilds from private GitHub repositories using the <computeroutput>-T &lt;github-token&gt;</computeroutput>:</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>prebuild-install<sp/>-T<sp/>&lt;github-token&gt;</highlight></codeline>
</programlisting></para>
<para>If you don&apos;t want to use the token on cli you can put it in <computeroutput>~/.prebuild-installrc</computeroutput>:</para>
<para><programlisting><codeline><highlight class="normal">token=&lt;github-token&gt;</highlight></codeline>
</programlisting></para>
<para>Alternatively you can specify it in the <computeroutput>prebuild-install_token</computeroutput> environment variable.</para>
<para>Note that using a GitHub token uses the API to resolve the correct release meaning that you are subject to the (<ulink url="https://developer.github.com/v3/rate_limit/">GitHub Rate Limit</ulink>).</para>
</sect2>
<sect2 id="md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e_1autotoc_md2726">
<title>Create GitHub Token</title><para>To create a token:</para>
<para><itemizedlist>
<listitem><para>Go to <ulink url="https://github.com/settings/tokens">this page</ulink></para>
</listitem><listitem><para>Click the <computeroutput>Generate new token</computeroutput> button</para>
</listitem><listitem><para>Give the token a name and click the <computeroutput>Generate token</computeroutput> button, see below</para>
</listitem></itemizedlist>
</para>
<para><image type="html" name="https://cloud.githubusercontent.com/assets/13285808/20844584/d0b85268-b8c0-11e6-8b08-2b19522165a9.png" alt="prebuild-token" inline="yes"></image>
</para>
<para>The default scopes should be fine.</para>
</sect2>
<sect2 id="md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e_1autotoc_md2727">
<title>Custom binaries</title><para>The end user can override binary download location through environment variables in their .npmrc file. The variable needs to meet the mask <computeroutput>% your package name _binary_host</computeroutput> or <computeroutput>% your package name _binary_host_mirror</computeroutput>. For example:</para>
<para><programlisting><codeline><highlight class="normal">leveldown_binary_host=http://overriden-host.com/overriden-path</highlight></codeline>
</programlisting></para>
<para>Note that the package version subpath and file name will still be appended. So if you are installing <computeroutput>leveldown@1.2.3</computeroutput> the resulting url will be:</para>
<para><programlisting><codeline><highlight class="normal">http://overriden-host.com/overriden-path/v1.2.3/leveldown-v1.2.3-node-v57-win32-x64.tar.gz</highlight></codeline>
</programlisting></para>
<sect3 id="md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e_1autotoc_md2728">
<title>Local prebuilds</title><para>If you want to use prebuilds from your local filesystem, you can use the <computeroutput>% your package name _local_prebuilds</computeroutput> .npmrc variable to set a path to the folder containing prebuilds. For example:</para>
<para><programlisting><codeline><highlight class="normal">leveldown_local_prebuilds=/path/to/prebuilds</highlight></codeline>
</programlisting></para>
<para>This option will look directly in that folder for bundles created with <computeroutput>prebuild</computeroutput>, for example:</para>
<para><programlisting><codeline><highlight class="normal">/path/to/prebuilds/leveldown-v1.2.3-node-v57-win32-x64.tar.gz</highlight></codeline>
</programlisting></para>
<para>Non-absolute paths resolve relative to the directory of the package invoking prebuild-install, e.g. for nested dependencies.</para>
</sect3>
</sect2>
<sect2 id="md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e_1autotoc_md2729">
<title>Cache</title><para>All prebuilt binaries are cached to minimize traffic. So first <computeroutput>prebuild-install</computeroutput> picks binaries from the cache and if no binary could be found, it will be downloaded. Depending on the environment, the cache folder is determined in the following order:</para>
<para><itemizedlist>
<listitem><para><computeroutput>${npm_config_cache}/_prebuilds</computeroutput></para>
</listitem><listitem><para><computeroutput>${APP_DATA}/npm-cache/_prebuilds</computeroutput></para>
</listitem><listitem><para><computeroutput>${HOME}/.npm/_prebuilds</computeroutput></para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
<sect1 id="md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e_1autotoc_md2730">
<title>Install</title><para>With <ulink url="https://npmjs.org">npm</ulink> do:</para>
<para><programlisting><codeline><highlight class="normal">npm<sp/>install<sp/>prebuild-install</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e_1autotoc_md2731">
<title>License</title><para><ulink url="./LICENSE">MIT</ulink> </para>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/prebuild-install/README.md"/>
  </compounddef>
</doxygen>
