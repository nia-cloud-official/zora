<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="backend_2node__modules_2ansi-regex_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>readme.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>ansi-regex</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Regular<sp/>expression<sp/>for<sp/>matching<sp/>[ANSI<sp/>escape<sp/>codes](https://en.wikipedia.org/wiki/ANSI_escape_code)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Install</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">$<sp/>npm<sp/>install<sp/>ansi-regex</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Usage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>ansiRegex<sp/>=<sp/>require(&apos;ansi-regex&apos;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ansiRegex().test(&apos;\u001B[4mcake\u001B[0m&apos;);</highlight></codeline>
<codeline><highlight class="normal">//=&gt;<sp/>true</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ansiRegex().test(&apos;cake&apos;);</highlight></codeline>
<codeline><highlight class="normal">//=&gt;<sp/>false</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;\u001B[4mcake\u001B[0m&apos;.match(ansiRegex());</highlight></codeline>
<codeline><highlight class="normal">//=&gt;<sp/>[&apos;\u001B[4m&apos;,<sp/>&apos;\u001B[0m&apos;]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;\u001B[4mcake\u001B[0m&apos;.match(ansiRegex({onlyFirst:<sp/>true}));</highlight></codeline>
<codeline><highlight class="normal">//=&gt;<sp/>[&apos;\u001B[4m&apos;]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;\u001B]8;;https://github.com\u0007click\u001B]8;;\u0007&apos;.match(ansiRegex());</highlight></codeline>
<codeline><highlight class="normal">//=&gt;<sp/>[&apos;\u001B]8;;https://github.com\u0007&apos;,<sp/>&apos;\u001B]8;;\u0007&apos;]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>API</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>ansiRegex(options?)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Returns<sp/>a<sp/>regex<sp/>for<sp/>matching<sp/>ANSI<sp/>escape<sp/>codes.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>options</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Type:<sp/>`object`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>onlyFirst</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Type:<sp/>`boolean`&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">Default:<sp/>`false`<sp/>*(Matches<sp/>any<sp/>ANSI<sp/>escape<sp/>codes<sp/>in<sp/>a<sp/>string)*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Match<sp/>only<sp/>the<sp/>first<sp/>ANSI<sp/>escape.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>FAQ</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Why<sp/>do<sp/>you<sp/>test<sp/>for<sp/>codes<sp/>not<sp/>in<sp/>the<sp/>ECMA<sp/>48<sp/>standard?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Some<sp/>of<sp/>the<sp/>codes<sp/>we<sp/>run<sp/>as<sp/>a<sp/>test<sp/>are<sp/>codes<sp/>that<sp/>we<sp/>acquired<sp/>finding<sp/>various<sp/>lists<sp/>of<sp/>non-standard<sp/>or<sp/>manufacturer<sp/>specific<sp/>codes.<sp/>We<sp/>test<sp/>for<sp/>both<sp/>standard<sp/>and<sp/>non-standard<sp/>codes,<sp/>as<sp/>most<sp/>of<sp/>them<sp/>follow<sp/>the<sp/>same<sp/>or<sp/>similar<sp/>format<sp/>and<sp/>can<sp/>be<sp/>safely<sp/>matched<sp/>in<sp/>strings<sp/>without<sp/>the<sp/>risk<sp/>of<sp/>removing<sp/>actual<sp/>string<sp/>content.<sp/>There<sp/>are<sp/>a<sp/>few<sp/>non-standard<sp/>control<sp/>codes<sp/>that<sp/>do<sp/>not<sp/>follow<sp/>the<sp/>traditional<sp/>format<sp/>(i.e.<sp/>they<sp/>end<sp/>in<sp/>numbers)<sp/>thus<sp/>forcing<sp/>us<sp/>to<sp/>exclude<sp/>them<sp/>from<sp/>the<sp/>test<sp/>because<sp/>we<sp/>cannot<sp/>reliably<sp/>match<sp/>them.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">On<sp/>the<sp/>historical<sp/>side,<sp/>those<sp/>ECMA<sp/>standards<sp/>were<sp/>established<sp/>in<sp/>the<sp/>early<sp/>90&apos;s<sp/>whereas<sp/>the<sp/>VT100,<sp/>for<sp/>example,<sp/>was<sp/>designed<sp/>in<sp/>the<sp/>mid/late<sp/>70&apos;s.<sp/>At<sp/>that<sp/>point<sp/>in<sp/>time,<sp/>control<sp/>codes<sp/>were<sp/>still<sp/>pretty<sp/>ungoverned<sp/>and<sp/>engineers<sp/>used<sp/>them<sp/>for<sp/>a<sp/>multitude<sp/>of<sp/>things,<sp/>namely<sp/>to<sp/>activate<sp/>hardware<sp/>ports<sp/>that<sp/>may<sp/>have<sp/>been<sp/>proprietary.<sp/>Somewhere<sp/>else<sp/>you<sp/>see<sp/>a<sp/>similar<sp/>&apos;anarchy&apos;<sp/>of<sp/>codes<sp/>is<sp/>in<sp/>the<sp/>x86<sp/>architecture<sp/>for<sp/>processors;<sp/>there<sp/>are<sp/>a<sp/>ton<sp/>of<sp/>&quot;interrupts&quot;<sp/>that<sp/>can<sp/>mean<sp/>different<sp/>things<sp/>on<sp/>certain<sp/>brands<sp/>of<sp/>processors,<sp/>most<sp/>of<sp/>which<sp/>have<sp/>been<sp/>phased<sp/>out.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Maintainers</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>[Sindre<sp/>Sorhus](https://github.com/sindresorhus)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Josh<sp/>Junon](https://github.com/qix-)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;div<sp/>align=&quot;center&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;b&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;https://tidelift.com/subscription/pkg/npm-ansi-regex?utm_source=npm-ansi-regex&amp;utm_medium=referral&amp;utm_campaign=readme&quot;&gt;Get<sp/>professional<sp/>support<sp/>for<sp/>this<sp/>package<sp/>with<sp/>a<sp/>Tidelift<sp/>subscription&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/b&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;sub&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tidelift<sp/>helps<sp/>make<sp/>open<sp/>source<sp/>sustainable<sp/>for<sp/>maintainers<sp/>while<sp/>giving<sp/>companies&lt;br&gt;assurances<sp/>about<sp/>security,<sp/>maintenance,<sp/>and<sp/>licensing<sp/>for<sp/>their<sp/>dependencies.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/sub&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/div&gt;</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/ansi-regex/readme.md"/>
  </compounddef>
</doxygen>
