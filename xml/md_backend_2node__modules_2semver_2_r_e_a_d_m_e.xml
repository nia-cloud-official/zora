<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2semver_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2semver_2_r_e_a_d_m_e</compoundname>
    <title>semver(1) â€“ The semantic versioner for npm</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="md_backend_2node__modules_2semver_2_r_e_a_d_m_e_1autotoc_md3068">
<title>Install</title><para><programlisting filename=".bash"><codeline><highlight class="normal">npm<sp/>install<sp/>semver</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Usage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">As<sp/>a<sp/>node<sp/>module:</highlight></codeline>
</programlisting> js const semver = require(&apos;semver&apos;)</para>
<para>semver.valid(&apos;1.2.3&apos;) // &apos;1.2.3&apos; semver.valid(&apos;a.b.c&apos;) // null semver.clean(&apos; =v1.2.3 &apos;) // &apos;1.2.3&apos; semver.satisfies(&apos;1.2.3&apos;, &apos;1.x || &gt;=2.5.0 || 5.0.0 - 7.2.3&apos;) // true semver.gt(&apos;1.2.3&apos;, &apos;9.8.7&apos;) // false semver.lt(&apos;1.2.3&apos;, &apos;9.8.7&apos;) // true semver.minVersion(&apos;&gt;=1.0.0&apos;) // &apos;1.0.0&apos; semver.valid(semver.coerce(&apos;v2&apos;)) // &apos;2.0.0&apos; semver.valid(semver.coerce(&apos;42.6.7.9.3-alpha&apos;)) // &apos;42.6.7&apos; <programlisting><codeline><highlight class="normal">You<sp/>can<sp/>also<sp/>just<sp/>load<sp/>the<sp/>module<sp/>for<sp/>the<sp/>function<sp/>that<sp/>you<sp/>care<sp/>about,<sp/>if</highlight></codeline>
<codeline><highlight class="normal">you&apos;d<sp/>like<sp/>to<sp/>minimize<sp/>your<sp/>footprint.</highlight></codeline>
</programlisting> js // load the whole API at once in a single object const semver = require(&apos;semver&apos;)</para>
<para>// or just load the bits you need // all of them listed here, just pick and choose what you want</para>
<para>// classes const SemVer = require(&apos;semver/classes/semver&apos;) const Comparator = require(&apos;semver/classes/comparator&apos;) const Range = require(&apos;semver/classes/range&apos;)</para>
<para>// functions for working with versions const semverParse = require(&apos;semver/functions/parse&apos;) const semverValid = require(&apos;semver/functions/valid&apos;) const semverClean = require(&apos;semver/functions/clean&apos;) const semverInc = require(&apos;semver/functions/inc&apos;) const semverDiff = require(&apos;semver/functions/diff&apos;) const semverMajor = require(&apos;semver/functions/major&apos;) const semverMinor = require(&apos;semver/functions/minor&apos;) const semverPatch = require(&apos;semver/functions/patch&apos;) const semverPrerelease = require(&apos;semver/functions/prerelease&apos;) const semverCompare = require(&apos;semver/functions/compare&apos;) const semverRcompare = require(&apos;semver/functions/rcompare&apos;) const semverCompareLoose = require(&apos;semver/functions/compare-loose&apos;) const semverCompareBuild = require(&apos;semver/functions/compare-build&apos;) const semverSort = require(&apos;semver/functions/sort&apos;) const semverRsort = require(&apos;semver/functions/rsort&apos;)</para>
<para>// low-level comparators between versions const semverGt = require(&apos;semver/functions/gt&apos;) const semverLt = require(&apos;semver/functions/lt&apos;) const semverEq = require(&apos;semver/functions/eq&apos;) const semverNeq = require(&apos;semver/functions/neq&apos;) const semverGte = require(&apos;semver/functions/gte&apos;) const semverLte = require(&apos;semver/functions/lte&apos;) const semverCmp = require(&apos;semver/functions/cmp&apos;) const semverCoerce = require(&apos;semver/functions/coerce&apos;)</para>
<para>// working with ranges const semverSatisfies = require(&apos;semver/functions/satisfies&apos;) const semverMaxSatisfying = require(&apos;semver/ranges/max-satisfying&apos;) const semverMinSatisfying = require(&apos;semver/ranges/min-satisfying&apos;) const semverToComparators = require(&apos;semver/ranges/to-comparators&apos;) const semverMinVersion = require(&apos;semver/ranges/min-version&apos;) const semverValidRange = require(&apos;semver/ranges/valid&apos;) const semverOutside = require(&apos;semver/ranges/outside&apos;) const semverGtr = require(&apos;semver/ranges/gtr&apos;) const semverLtr = require(&apos;semver/ranges/ltr&apos;) const semverIntersects = require(&apos;semver/ranges/intersects&apos;) const simplifyRange = require(&apos;semver/ranges/simplify&apos;) const rangeSubset = require(&apos;semver/ranges/subset&apos;) <programlisting><codeline><highlight class="normal">As<sp/>a<sp/>command-line<sp/>utility:</highlight></codeline>
</programlisting> $ semver -h</para>
<para>A JavaScript implementation of the <ulink url="https://semver.org/">https://semver.org/</ulink> specification Copyright Isaac Z. Schlueter</para>
<para>Usage: semver [options] &lt;version&gt; [&lt;version&gt; [...]] Prints valid versions sorted by SemVer precedence</para>
<para>Options: -r <ndash/>range &lt;range&gt; Print versions that match the specified range.</para>
<para>-i <ndash/>increment [&lt;level&gt;] Increment a version by the specified level. Level can be one of: major, minor, patch, premajor, preminor, prepatch, or prerelease. Default level is &apos;patch&apos;. Only one version may be specified.</para>
<para><ndash/>preid &lt;identifier&gt; Identifier to be used to prefix premajor, preminor, prepatch or prerelease version increments.</para>
<para>-l <ndash/>loose Interpret versions and ranges loosely</para>
<para>-n &lt;0|1&gt; This is the base to be used for the prerelease identifier.</para>
<para>-p <ndash/>include-prerelease Always include prerelease versions in range matching</para>
<para>-c <ndash/>coerce Coerce a string into SemVer if possible (does not imply <ndash/>loose)</para>
<para><ndash/>rtl Coerce version strings right to left</para>
<para><ndash/>ltr Coerce version strings left to right (default)</para>
<para>Program exits successfully if any valid version satisfies all supplied ranges, and prints all satisfying versions.</para>
<para>If no satisfying versions are found, then exits failure.</para>
<para>Versions are printed in ascending order, so supplying multiple versions to the utility will just sort them. <programlisting><codeline><highlight class="normal">##<sp/>Versions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>&quot;version&quot;<sp/>is<sp/>described<sp/>by<sp/>the<sp/>`v2.0.0`<sp/>specification<sp/>found<sp/>at</highlight></codeline>
<codeline><highlight class="normal">&lt;https://semver.org/&gt;.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>leading<sp/>`&quot;=&quot;`<sp/>or<sp/>`&quot;v&quot;`<sp/>character<sp/>is<sp/>stripped<sp/>off<sp/>and<sp/>ignored.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Ranges</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>`version<sp/>range`<sp/>is<sp/>a<sp/>set<sp/>of<sp/>`comparators`<sp/>which<sp/>specify<sp/>versions</highlight></codeline>
<codeline><highlight class="normal">that<sp/>satisfy<sp/>the<sp/>range.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>`comparator`<sp/>is<sp/>composed<sp/>of<sp/>an<sp/>`operator`<sp/>and<sp/>a<sp/>`version`.<sp/><sp/>The<sp/>set</highlight></codeline>
<codeline><highlight class="normal">of<sp/>primitive<sp/>`operators`<sp/>is:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`&lt;`<sp/>Less<sp/>than</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`&lt;=`<sp/>Less<sp/>than<sp/>or<sp/>equal<sp/>to</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`&gt;`<sp/>Greater<sp/>than</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`&gt;=`<sp/>Greater<sp/>than<sp/>or<sp/>equal<sp/>to</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`=`<sp/>Equal.<sp/><sp/>If<sp/>no<sp/>operator<sp/>is<sp/>specified,<sp/>then<sp/>equality<sp/>is<sp/>assumed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>so<sp/>this<sp/>operator<sp/>is<sp/>optional,<sp/>but<sp/>MAY<sp/>be<sp/>included.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>the<sp/>comparator<sp/>`&gt;=1.2.7`<sp/>would<sp/>match<sp/>the<sp/>versions</highlight></codeline>
<codeline><highlight class="normal">`1.2.7`,<sp/>`1.2.8`,<sp/>`2.5.3`,<sp/>and<sp/>`1.3.9`,<sp/>but<sp/>not<sp/>the<sp/>versions<sp/>`1.2.6`</highlight></codeline>
<codeline><highlight class="normal">or<sp/>`1.1.0`.<sp/>The<sp/>comparator<sp/>`&gt;1`<sp/>is<sp/>equivalent<sp/>to<sp/>`&gt;=2.0.0`<sp/>and</highlight></codeline>
<codeline><highlight class="normal">would<sp/>match<sp/>the<sp/>versions<sp/>`2.0.0`<sp/>and<sp/>`3.1.0`,<sp/>but<sp/>not<sp/>the<sp/>versions</highlight></codeline>
<codeline><highlight class="normal">`1.0.1`<sp/>or<sp/>`1.1.0`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Comparators<sp/>can<sp/>be<sp/>joined<sp/>by<sp/>whitespace<sp/>to<sp/>form<sp/>a<sp/>`comparator<sp/>set`,</highlight></codeline>
<codeline><highlight class="normal">which<sp/>is<sp/>satisfied<sp/>by<sp/>the<sp/>**intersection**<sp/>of<sp/>all<sp/>of<sp/>the<sp/>comparators</highlight></codeline>
<codeline><highlight class="normal">it<sp/>includes.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>range<sp/>is<sp/>composed<sp/>of<sp/>one<sp/>or<sp/>more<sp/>comparator<sp/>sets,<sp/>joined<sp/>by<sp/>`||`.<sp/><sp/>A</highlight></codeline>
<codeline><highlight class="normal">version<sp/>matches<sp/>a<sp/>range<sp/>if<sp/>and<sp/>only<sp/>if<sp/>every<sp/>comparator<sp/>in<sp/>at<sp/>least</highlight></codeline>
<codeline><highlight class="normal">one<sp/>of<sp/>the<sp/>`||`-separated<sp/>comparator<sp/>sets<sp/>is<sp/>satisfied<sp/>by<sp/>the<sp/>version.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>the<sp/>range<sp/>`&gt;=1.2.7<sp/>&lt;1.3.0`<sp/>would<sp/>match<sp/>the<sp/>versions</highlight></codeline>
<codeline><highlight class="normal">`1.2.7`,<sp/>`1.2.8`,<sp/>and<sp/>`1.2.99`,<sp/>but<sp/>not<sp/>the<sp/>versions<sp/>`1.2.6`,<sp/>`1.3.0`,</highlight></codeline>
<codeline><highlight class="normal">or<sp/>`1.1.0`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>range<sp/>`1.2.7<sp/>||<sp/>&gt;=1.2.9<sp/>&lt;2.0.0`<sp/>would<sp/>match<sp/>the<sp/>versions<sp/>`1.2.7`,</highlight></codeline>
<codeline><highlight class="normal">`1.2.9`,<sp/>and<sp/>`1.4.6`,<sp/>but<sp/>not<sp/>the<sp/>versions<sp/>`1.2.8`<sp/>or<sp/>`2.0.0`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Prerelease<sp/>Tags</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>a<sp/>version<sp/>has<sp/>a<sp/>prerelease<sp/>tag<sp/>(for<sp/>example,<sp/>`1.2.3-alpha.3`)<sp/>then</highlight></codeline>
<codeline><highlight class="normal">it<sp/>will<sp/>only<sp/>be<sp/>allowed<sp/>to<sp/>satisfy<sp/>comparator<sp/>sets<sp/>if<sp/>at<sp/>least<sp/>one</highlight></codeline>
<codeline><highlight class="normal">comparator<sp/>with<sp/>the<sp/>same<sp/>`[major,<sp/>minor,<sp/>patch]`<sp/>tuple<sp/>also<sp/>has<sp/>a</highlight></codeline>
<codeline><highlight class="normal">prerelease<sp/>tag.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>the<sp/>range<sp/>`&gt;1.2.3-alpha.3`<sp/>would<sp/>be<sp/>allowed<sp/>to<sp/>match<sp/>the</highlight></codeline>
<codeline><highlight class="normal">version<sp/>`1.2.3-alpha.7`,<sp/>but<sp/>it<sp/>would<sp/>*not*<sp/>be<sp/>satisfied<sp/>by</highlight></codeline>
<codeline><highlight class="normal">`3.4.5-alpha.9`,<sp/>even<sp/>though<sp/>`3.4.5-alpha.9`<sp/>is<sp/>technically<sp/>&quot;greater</highlight></codeline>
<codeline><highlight class="normal">than&quot;<sp/>`1.2.3-alpha.3`<sp/>according<sp/>to<sp/>the<sp/>SemVer<sp/>sort<sp/>rules.<sp/><sp/>The<sp/>version</highlight></codeline>
<codeline><highlight class="normal">range<sp/>only<sp/>accepts<sp/>prerelease<sp/>tags<sp/>on<sp/>the<sp/>`1.2.3`<sp/>version.<sp/><sp/>The</highlight></codeline>
<codeline><highlight class="normal">version<sp/>`3.4.5`<sp/>*would*<sp/>satisfy<sp/>the<sp/>range,<sp/>because<sp/>it<sp/>does<sp/>not<sp/>have<sp/>a</highlight></codeline>
<codeline><highlight class="normal">prerelease<sp/>flag,<sp/>and<sp/>`3.4.5`<sp/>is<sp/>greater<sp/>than<sp/>`1.2.3-alpha.7`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>purpose<sp/>for<sp/>this<sp/>behavior<sp/>is<sp/>twofold.<sp/><sp/>First,<sp/>prerelease<sp/>versions</highlight></codeline>
<codeline><highlight class="normal">frequently<sp/>are<sp/>updated<sp/>very<sp/>quickly,<sp/>and<sp/>contain<sp/>many<sp/>breaking<sp/>changes</highlight></codeline>
<codeline><highlight class="normal">that<sp/>are<sp/>(by<sp/>the<sp/>author&apos;s<sp/>design)<sp/>not<sp/>yet<sp/>fit<sp/>for<sp/>public<sp/>consumption.</highlight></codeline>
<codeline><highlight class="normal">Therefore,<sp/>by<sp/>default,<sp/>they<sp/>are<sp/>excluded<sp/>from<sp/>range<sp/>matching</highlight></codeline>
<codeline><highlight class="normal">semantics.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Second,<sp/>a<sp/>user<sp/>who<sp/>has<sp/>opted<sp/>into<sp/>using<sp/>a<sp/>prerelease<sp/>version<sp/>has</highlight></codeline>
<codeline><highlight class="normal">clearly<sp/>indicated<sp/>the<sp/>intent<sp/>to<sp/>use<sp/>*that<sp/>specific*<sp/>set<sp/>of</highlight></codeline>
<codeline><highlight class="normal">alpha/beta/rc<sp/>versions.<sp/><sp/>By<sp/>including<sp/>a<sp/>prerelease<sp/>tag<sp/>in<sp/>the<sp/>range,</highlight></codeline>
<codeline><highlight class="normal">the<sp/>user<sp/>is<sp/>indicating<sp/>that<sp/>they<sp/>are<sp/>aware<sp/>of<sp/>the<sp/>risk.<sp/><sp/>However,<sp/>it</highlight></codeline>
<codeline><highlight class="normal">is<sp/>still<sp/>not<sp/>appropriate<sp/>to<sp/>assume<sp/>that<sp/>they<sp/>have<sp/>opted<sp/>into<sp/>taking<sp/>a</highlight></codeline>
<codeline><highlight class="normal">similar<sp/>risk<sp/>on<sp/>the<sp/>*next*<sp/>set<sp/>of<sp/>prerelease<sp/>versions.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>this<sp/>behavior<sp/>can<sp/>be<sp/>suppressed<sp/>(treating<sp/>all<sp/>prerelease</highlight></codeline>
<codeline><highlight class="normal">versions<sp/>as<sp/>if<sp/>they<sp/>were<sp/>normal<sp/>versions,<sp/>for<sp/>the<sp/>purpose<sp/>of<sp/>range</highlight></codeline>
<codeline><highlight class="normal">matching)<sp/>by<sp/>setting<sp/>the<sp/>`includePrerelease`<sp/>flag<sp/>on<sp/>the<sp/>options</highlight></codeline>
<codeline><highlight class="normal">object<sp/>to<sp/>any</highlight></codeline>
<codeline><highlight class="normal">[functions](https://github.com/npm/node-semver#functions)<sp/>that<sp/>do</highlight></codeline>
<codeline><highlight class="normal">range<sp/>matching.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Prerelease<sp/>Identifiers</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>method<sp/>`.inc`<sp/>takes<sp/>an<sp/>additional<sp/>`identifier`<sp/>string<sp/>argument<sp/>that</highlight></codeline>
<codeline><highlight class="normal">will<sp/>append<sp/>the<sp/>value<sp/>of<sp/>the<sp/>string<sp/>as<sp/>a<sp/>prerelease<sp/>identifier:</highlight></codeline>
</programlisting> javascript semver.inc(&apos;1.2.3&apos;, &apos;prerelease&apos;, &apos;beta&apos;) // &apos;1.2.4-beta.0&apos; <programlisting><codeline><highlight class="normal">command-line<sp/>example:</highlight></codeline>
</programlisting> bash $ semver 1.2.3 -i prerelease <ndash/>preid beta 1.2.4-beta.0 <programlisting><codeline><highlight class="normal">Which<sp/>then<sp/>can<sp/>be<sp/>used<sp/>to<sp/>increment<sp/>further:</highlight></codeline>
</programlisting> bash $ semver 1.2.4-beta.0 -i prerelease 1.2.4-beta.1 <programlisting><codeline><highlight class="normal">####<sp/>Prerelease<sp/>Identifier<sp/>Base</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>method<sp/>`.inc`<sp/>takes<sp/>an<sp/>optional<sp/>parameter<sp/>&apos;identifierBase&apos;<sp/>string</highlight></codeline>
<codeline><highlight class="normal">that<sp/>will<sp/>let<sp/>you<sp/>let<sp/>your<sp/>prerelease<sp/>number<sp/>as<sp/>zero-based<sp/>or<sp/>one-based.</highlight></codeline>
<codeline><highlight class="normal">Set<sp/>to<sp/>`false`<sp/>to<sp/>omit<sp/>the<sp/>prerelease<sp/>number<sp/>altogether.</highlight></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>do<sp/>not<sp/>specify<sp/>this<sp/>parameter,<sp/>it<sp/>will<sp/>default<sp/>to<sp/>zero-based.</highlight></codeline>
</programlisting> javascript semver.inc(&apos;1.2.3&apos;, &apos;prerelease&apos;, &apos;beta&apos;, &apos;1&apos;) // &apos;1.2.4-beta.1&apos; <programlisting></programlisting> javascript semver.inc(&apos;1.2.3&apos;, &apos;prerelease&apos;, &apos;beta&apos;, false) // &apos;1.2.4-beta&apos; <programlisting><codeline><highlight class="normal">command-line<sp/>example:</highlight></codeline>
</programlisting> bash $ semver 1.2.3 -i prerelease <ndash/>preid beta -n 1 1.2.4-beta.1 <programlisting></programlisting> bash $ semver 1.2.3 -i prerelease <ndash/>preid beta -n false 1.2.4-beta <programlisting><codeline><highlight class="normal">###<sp/>Advanced<sp/>Range<sp/>Syntax</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Advanced<sp/>range<sp/>syntax<sp/>desugars<sp/>to<sp/>primitive<sp/>comparators<sp/>in</highlight></codeline>
<codeline><highlight class="normal">deterministic<sp/>ways.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Advanced<sp/>ranges<sp/>may<sp/>be<sp/>combined<sp/>in<sp/>the<sp/>same<sp/>way<sp/>as<sp/>primitive</highlight></codeline>
<codeline><highlight class="normal">comparators<sp/>using<sp/>white<sp/>space<sp/>or<sp/>`||`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Hyphen<sp/>Ranges<sp/>`X.Y.Z<sp/>-<sp/>A.B.C`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Specifies<sp/>an<sp/>inclusive<sp/>set.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`1.2.3<sp/>-<sp/>2.3.4`<sp/>:=<sp/>`&gt;=1.2.3<sp/>&lt;=2.3.4`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>a<sp/>partial<sp/>version<sp/>is<sp/>provided<sp/>as<sp/>the<sp/>first<sp/>version<sp/>in<sp/>the<sp/>inclusive</highlight></codeline>
<codeline><highlight class="normal">range,<sp/>then<sp/>the<sp/>missing<sp/>pieces<sp/>are<sp/>replaced<sp/>with<sp/>zeroes.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`1.2<sp/>-<sp/>2.3.4`<sp/>:=<sp/>`&gt;=1.2.0<sp/>&lt;=2.3.4`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>a<sp/>partial<sp/>version<sp/>is<sp/>provided<sp/>as<sp/>the<sp/>second<sp/>version<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">inclusive<sp/>range,<sp/>then<sp/>all<sp/>versions<sp/>that<sp/>start<sp/>with<sp/>the<sp/>supplied<sp/>parts</highlight></codeline>
<codeline><highlight class="normal">of<sp/>the<sp/>tuple<sp/>are<sp/>accepted,<sp/>but<sp/>nothing<sp/>that<sp/>would<sp/>be<sp/>greater<sp/>than<sp/>the</highlight></codeline>
<codeline><highlight class="normal">provided<sp/>tuple<sp/>parts.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`1.2.3<sp/>-<sp/>2.3`<sp/>:=<sp/>`&gt;=1.2.3<sp/>&lt;2.4.0-0`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`1.2.3<sp/>-<sp/>2`<sp/>:=<sp/>`&gt;=1.2.3<sp/>&lt;3.0.0-0`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>X-Ranges<sp/>`1.2.x`<sp/>`1.X`<sp/>`1.2.*`<sp/>`*`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Any<sp/>of<sp/>`X`,<sp/>`x`,<sp/>or<sp/>`*`<sp/>may<sp/>be<sp/>used<sp/>to<sp/>&quot;stand<sp/>in&quot;<sp/>for<sp/>one<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal">numeric<sp/>values<sp/>in<sp/>the<sp/>`[major,<sp/>minor,<sp/>patch]`<sp/>tuple.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`*`<sp/>:=<sp/>`&gt;=0.0.0`<sp/>(Any<sp/>non-prerelease<sp/>version<sp/>satisfies,<sp/>unless</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>`includePrerelease`<sp/>is<sp/>specified,<sp/>in<sp/>which<sp/>case<sp/>any<sp/>version<sp/>at<sp/>all</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>satisfies)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`1.x`<sp/>:=<sp/>`&gt;=1.0.0<sp/>&lt;2.0.0-0`<sp/>(Matching<sp/>major<sp/>version)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`1.2.x`<sp/>:=<sp/>`&gt;=1.2.0<sp/>&lt;1.3.0-0`<sp/>(Matching<sp/>major<sp/>and<sp/>minor<sp/>versions)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>partial<sp/>version<sp/>range<sp/>is<sp/>treated<sp/>as<sp/>an<sp/>X-Range,<sp/>so<sp/>the<sp/>special</highlight></codeline>
<codeline><highlight class="normal">character<sp/>is<sp/>in<sp/>fact<sp/>optional.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`&quot;&quot;`<sp/>(empty<sp/>string)<sp/>:=<sp/>`*`<sp/>:=<sp/>`&gt;=0.0.0`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`1`<sp/>:=<sp/>`1.x.x`<sp/>:=<sp/>`&gt;=1.0.0<sp/>&lt;2.0.0-0`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`1.2`<sp/>:=<sp/>`1.2.x`<sp/>:=<sp/>`&gt;=1.2.0<sp/>&lt;1.3.0-0`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Tilde<sp/>Ranges<sp/>`~1.2.3`<sp/>`~1.2`<sp/>`~1`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Allows<sp/>patch-level<sp/>changes<sp/>if<sp/>a<sp/>minor<sp/>version<sp/>is<sp/>specified<sp/>on<sp/>the</highlight></codeline>
<codeline><highlight class="normal">comparator.<sp/><sp/>Allows<sp/>minor-level<sp/>changes<sp/>if<sp/>not.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`~1.2.3`<sp/>:=<sp/>`&gt;=1.2.3<sp/>&lt;1.(2+1).0`<sp/>:=<sp/>`&gt;=1.2.3<sp/>&lt;1.3.0-0`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`~1.2`<sp/>:=<sp/>`&gt;=1.2.0<sp/>&lt;1.(2+1).0`<sp/>:=<sp/>`&gt;=1.2.0<sp/>&lt;1.3.0-0`<sp/>(Same<sp/>as<sp/>`1.2.x`)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`~1`<sp/>:=<sp/>`&gt;=1.0.0<sp/>&lt;(1+1).0.0`<sp/>:=<sp/>`&gt;=1.0.0<sp/>&lt;2.0.0-0`<sp/>(Same<sp/>as<sp/>`1.x`)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`~0.2.3`<sp/>:=<sp/>`&gt;=0.2.3<sp/>&lt;0.(2+1).0`<sp/>:=<sp/>`&gt;=0.2.3<sp/>&lt;0.3.0-0`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`~0.2`<sp/>:=<sp/>`&gt;=0.2.0<sp/>&lt;0.(2+1).0`<sp/>:=<sp/>`&gt;=0.2.0<sp/>&lt;0.3.0-0`<sp/>(Same<sp/>as<sp/>`0.2.x`)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`~0`<sp/>:=<sp/>`&gt;=0.0.0<sp/>&lt;(0+1).0.0`<sp/>:=<sp/>`&gt;=0.0.0<sp/>&lt;1.0.0-0`<sp/>(Same<sp/>as<sp/>`0.x`)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`~1.2.3-beta.2`<sp/>:=<sp/>`&gt;=1.2.3-beta.2<sp/>&lt;1.3.0-0`<sp/>Note<sp/>that<sp/>prereleases<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>`1.2.3`<sp/>version<sp/>will<sp/>be<sp/>allowed,<sp/>if<sp/>they<sp/>are<sp/>greater<sp/>than<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>equal<sp/>to<sp/>`beta.2`.<sp/><sp/>So,<sp/>`1.2.3-beta.4`<sp/>would<sp/>be<sp/>allowed,<sp/>but</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>`1.2.4-beta.2`<sp/>would<sp/>not,<sp/>because<sp/>it<sp/>is<sp/>a<sp/>prerelease<sp/>of<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>different<sp/>`[major,<sp/>minor,<sp/>patch]`<sp/>tuple.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Caret<sp/>Ranges<sp/>`^1.2.3`<sp/>`^0.2.5`<sp/>`^0.0.4`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Allows<sp/>changes<sp/>that<sp/>do<sp/>not<sp/>modify<sp/>the<sp/>left-most<sp/>non-zero<sp/>element<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`[major,<sp/>minor,<sp/>patch]`<sp/>tuple.<sp/><sp/>In<sp/>other<sp/>words,<sp/>this<sp/>allows<sp/>patch<sp/>and</highlight></codeline>
<codeline><highlight class="normal">minor<sp/>updates<sp/>for<sp/>versions<sp/>`1.0.0`<sp/>and<sp/>above,<sp/>patch<sp/>updates<sp/>for</highlight></codeline>
<codeline><highlight class="normal">versions<sp/>`0.X<sp/>&gt;=0.1.0`,<sp/>and<sp/>*no*<sp/>updates<sp/>for<sp/>versions<sp/>`0.0.X`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Many<sp/>authors<sp/>treat<sp/>a<sp/>`0.x`<sp/>version<sp/>as<sp/>if<sp/>the<sp/>`x`<sp/>were<sp/>the<sp/>major</highlight></codeline>
<codeline><highlight class="normal">&quot;breaking-change&quot;<sp/>indicator.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Caret<sp/>ranges<sp/>are<sp/>ideal<sp/>when<sp/>an<sp/>author<sp/>may<sp/>make<sp/>breaking<sp/>changes</highlight></codeline>
<codeline><highlight class="normal">between<sp/>`0.2.4`<sp/>and<sp/>`0.3.0`<sp/>releases,<sp/>which<sp/>is<sp/>a<sp/>common<sp/>practice.</highlight></codeline>
<codeline><highlight class="normal">However,<sp/>it<sp/>presumes<sp/>that<sp/>there<sp/>will<sp/>*not*<sp/>be<sp/>breaking<sp/>changes<sp/>between</highlight></codeline>
<codeline><highlight class="normal">`0.2.4`<sp/>and<sp/>`0.2.5`.<sp/><sp/>It<sp/>allows<sp/>for<sp/>changes<sp/>that<sp/>are<sp/>presumed<sp/>to<sp/>be</highlight></codeline>
<codeline><highlight class="normal">additive<sp/>(but<sp/>non-breaking),<sp/>according<sp/>to<sp/>commonly<sp/>observed<sp/>practices.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`^1.2.3`<sp/>:=<sp/>`&gt;=1.2.3<sp/>&lt;2.0.0-0`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`^0.2.3`<sp/>:=<sp/>`&gt;=0.2.3<sp/>&lt;0.3.0-0`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`^0.0.3`<sp/>:=<sp/>`&gt;=0.0.3<sp/>&lt;0.0.4-0`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`^1.2.3-beta.2`<sp/>:=<sp/>`&gt;=1.2.3-beta.2<sp/>&lt;2.0.0-0`<sp/>Note<sp/>that<sp/>prereleases<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>`1.2.3`<sp/>version<sp/>will<sp/>be<sp/>allowed,<sp/>if<sp/>they<sp/>are<sp/>greater<sp/>than<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>equal<sp/>to<sp/>`beta.2`.<sp/><sp/>So,<sp/>`1.2.3-beta.4`<sp/>would<sp/>be<sp/>allowed,<sp/>but</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>`1.2.4-beta.2`<sp/>would<sp/>not,<sp/>because<sp/>it<sp/>is<sp/>a<sp/>prerelease<sp/>of<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>different<sp/>`[major,<sp/>minor,<sp/>patch]`<sp/>tuple.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`^0.0.3-beta`<sp/>:=<sp/>`&gt;=0.0.3-beta<sp/>&lt;0.0.4-0`<sp/><sp/>Note<sp/>that<sp/>prereleases<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>`0.0.3`<sp/>version<sp/>*only*<sp/>will<sp/>be<sp/>allowed,<sp/>if<sp/>they<sp/>are<sp/>greater<sp/>than<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>equal<sp/>to<sp/>`beta`.<sp/><sp/>So,<sp/>`0.0.3-pr.2`<sp/>would<sp/>be<sp/>allowed.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>parsing<sp/>caret<sp/>ranges,<sp/>a<sp/>missing<sp/>`patch`<sp/>value<sp/>desugars<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal">number<sp/>`0`,<sp/>but<sp/>will<sp/>allow<sp/>flexibility<sp/>within<sp/>that<sp/>value,<sp/>even<sp/>if<sp/>the</highlight></codeline>
<codeline><highlight class="normal">major<sp/>and<sp/>minor<sp/>versions<sp/>are<sp/>both<sp/>`0`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`^1.2.x`<sp/>:=<sp/>`&gt;=1.2.0<sp/>&lt;2.0.0-0`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`^0.0.x`<sp/>:=<sp/>`&gt;=0.0.0<sp/>&lt;0.1.0-0`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`^0.0`<sp/>:=<sp/>`&gt;=0.0.0<sp/>&lt;0.1.0-0`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>missing<sp/>`minor`<sp/>and<sp/>`patch`<sp/>values<sp/>will<sp/>desugar<sp/>to<sp/>zero,<sp/>but<sp/>also</highlight></codeline>
<codeline><highlight class="normal">allow<sp/>flexibility<sp/>within<sp/>those<sp/>values,<sp/>even<sp/>if<sp/>the<sp/>major<sp/>version<sp/>is</highlight></codeline>
<codeline><highlight class="normal">zero.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`^1.x`<sp/>:=<sp/>`&gt;=1.0.0<sp/>&lt;2.0.0-0`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`^0.x`<sp/>:=<sp/>`&gt;=0.0.0<sp/>&lt;1.0.0-0`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Range<sp/>Grammar</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Putting<sp/>all<sp/>this<sp/>together,<sp/>here<sp/>is<sp/>a<sp/>Backus-Naur<sp/>grammar<sp/>for<sp/>ranges,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>the<sp/>benefit<sp/>of<sp/>parser<sp/>authors:</highlight></codeline>
</programlisting> bnf range-set ::= range ( logical-or range ) * logical-or ::= ( &apos; &apos; ) * &apos;||&apos; ( &apos; &apos; ) * range ::= hyphen | simple ( &apos; &apos; simple ) * | &apos;&apos; hyphen ::= partial &apos; - &apos; partial simple ::= primitive | partial | tilde | caret primitive ::= ( &apos;&lt;&apos; | &apos;&gt;&apos; | &apos;&gt;=&apos; | &apos;&lt;=&apos; | &apos;=&apos; ) partial partial ::= xr ( &apos;.&apos; xr ( &apos;.&apos; xr qualifier ? )? )? xr ::= &apos;x&apos; | &apos;X&apos; | &apos;*&apos; | nr nr ::= &apos;0&apos; | [&apos;1&apos;-&apos;9&apos;] ( [&apos;0&apos;-&apos;9&apos;] ) * tilde ::= &apos;~&apos; partial caret ::= &apos;^&apos; partial qualifier ::= ( &apos;-&apos; pre )? ( &apos;+&apos; build )? pre ::= parts build ::= parts parts ::= part ( &apos;.&apos; part ) * part ::= nr | [-0-9A-Za-z]+ <programlisting><codeline><highlight class="normal">##<sp/>Functions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">All<sp/>methods<sp/>and<sp/>classes<sp/>take<sp/>a<sp/>final<sp/>`options`<sp/>object<sp/>argument.<sp/><sp/>All</highlight></codeline>
<codeline><highlight class="normal">options<sp/>in<sp/>this<sp/>object<sp/>are<sp/>`false`<sp/>by<sp/>default.<sp/><sp/>The<sp/>options<sp/>supported</highlight></codeline>
<codeline><highlight class="normal">are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>`loose`<sp/><sp/>Be<sp/>more<sp/>forgiving<sp/>about<sp/>not-quite-valid<sp/>semver<sp/>strings.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>(Any<sp/>resulting<sp/>output<sp/>will<sp/>always<sp/>be<sp/>100%<sp/>strict<sp/>compliant,<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>course.)<sp/><sp/>For<sp/>backwards<sp/>compatibility<sp/>reasons,<sp/>if<sp/>the<sp/>`options`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>argument<sp/>is<sp/>a<sp/>boolean<sp/>value<sp/>instead<sp/>of<sp/>an<sp/>object,<sp/>it<sp/>is<sp/>interpreted</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>to<sp/>be<sp/>the<sp/>`loose`<sp/>param.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`includePrerelease`<sp/><sp/>Set<sp/>to<sp/>suppress<sp/>the<sp/>[default</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>behavior](https://github.com/npm/node-semver#prerelease-tags)<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>excluding<sp/>prerelease<sp/>tagged<sp/>versions<sp/>from<sp/>ranges<sp/>unless<sp/>they<sp/>are</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>explicitly<sp/>opted<sp/>into.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Strict-mode<sp/>Comparators<sp/>and<sp/>Ranges<sp/>will<sp/>be<sp/>strict<sp/>about<sp/>the<sp/>SemVer</highlight></codeline>
<codeline><highlight class="normal">strings<sp/>that<sp/>they<sp/>parse.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`valid(v)`:<sp/>Return<sp/>the<sp/>parsed<sp/>version,<sp/>or<sp/>null<sp/>if<sp/>it&apos;s<sp/>not<sp/>valid.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`inc(v,<sp/>release)`:<sp/>Return<sp/>the<sp/>version<sp/>incremented<sp/>by<sp/>the<sp/>release</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>type<sp/>(`major`,<sp/><sp/><sp/>`premajor`,<sp/>`minor`,<sp/>`preminor`,<sp/>`patch`,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>`prepatch`,<sp/>or<sp/>`prerelease`),<sp/>or<sp/>null<sp/>if<sp/>it&apos;s<sp/>not<sp/>valid</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`premajor`<sp/>in<sp/>one<sp/>call<sp/>will<sp/>bump<sp/>the<sp/>version<sp/>up<sp/>to<sp/>the<sp/>next<sp/>major</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>version<sp/>and<sp/>down<sp/>to<sp/>a<sp/>prerelease<sp/>of<sp/>that<sp/>major<sp/>version.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>`preminor`,<sp/>and<sp/>`prepatch`<sp/>work<sp/>the<sp/>same<sp/>way.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>If<sp/>called<sp/>from<sp/>a<sp/>non-prerelease<sp/>version,<sp/>the<sp/>`prerelease`<sp/>will<sp/>work<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>same<sp/>as<sp/>`prepatch`.<sp/>It<sp/>increments<sp/>the<sp/>patch<sp/>version,<sp/>then<sp/>makes<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>prerelease.<sp/>If<sp/>the<sp/>input<sp/>version<sp/>is<sp/>already<sp/>a<sp/>prerelease<sp/>it<sp/>simply</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>increments<sp/>it.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`prerelease(v)`:<sp/>Returns<sp/>an<sp/>array<sp/>of<sp/>prerelease<sp/>components,<sp/>or<sp/>null</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>none<sp/>exist.<sp/>Example:<sp/>`prerelease(&apos;1.2.3-alpha.1&apos;)<sp/>-&gt;<sp/>[&apos;alpha&apos;,<sp/>1]`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`major(v)`:<sp/>Return<sp/>the<sp/>major<sp/>version<sp/>number.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`minor(v)`:<sp/>Return<sp/>the<sp/>minor<sp/>version<sp/>number.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`patch(v)`:<sp/>Return<sp/>the<sp/>patch<sp/>version<sp/>number.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`intersects(r1,<sp/>r2,<sp/>loose)`:<sp/>Return<sp/>true<sp/>if<sp/>the<sp/>two<sp/>supplied<sp/>ranges</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>or<sp/>comparators<sp/>intersect.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`parse(v)`:<sp/>Attempt<sp/>to<sp/>parse<sp/>a<sp/>string<sp/>as<sp/>a<sp/>semantic<sp/>version,<sp/>returning<sp/>either</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>a<sp/>`SemVer`<sp/>object<sp/>or<sp/>`null`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Comparison</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`gt(v1,<sp/>v2)`:<sp/>`v1<sp/>&gt;<sp/>v2`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`gte(v1,<sp/>v2)`:<sp/>`v1<sp/>&gt;=<sp/>v2`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`lt(v1,<sp/>v2)`:<sp/>`v1<sp/>&lt;<sp/>v2`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`lte(v1,<sp/>v2)`:<sp/>`v1<sp/>&lt;=<sp/>v2`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`eq(v1,<sp/>v2)`:<sp/>`v1<sp/>==<sp/>v2`<sp/>This<sp/>is<sp/>true<sp/>if<sp/>they&apos;re<sp/>logically<sp/>equivalent,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>even<sp/>if<sp/>they&apos;re<sp/>not<sp/>the<sp/>exact<sp/>same<sp/>string.<sp/><sp/>You<sp/>already<sp/>know<sp/>how<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>compare<sp/>strings.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`neq(v1,<sp/>v2)`:<sp/>`v1<sp/>!=<sp/>v2`<sp/>The<sp/>opposite<sp/>of<sp/>`eq`.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`cmp(v1,<sp/>comparator,<sp/>v2)`:<sp/>Pass<sp/>in<sp/>a<sp/>comparison<sp/>string,<sp/>and<sp/>it&apos;ll<sp/>call</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>corresponding<sp/>function<sp/>above.<sp/><sp/>`&quot;===&quot;`<sp/>and<sp/>`&quot;!==&quot;`<sp/>do<sp/>simple</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>comparison,<sp/>but<sp/>are<sp/>included<sp/>for<sp/>completeness.<sp/><sp/>Throws<sp/>if<sp/>an</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>invalid<sp/>comparison<sp/>string<sp/>is<sp/>provided.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`compare(v1,<sp/>v2)`:<sp/>Return<sp/>`0`<sp/>if<sp/>`v1<sp/>==<sp/>v2`,<sp/>or<sp/>`1`<sp/>if<sp/>`v1`<sp/>is<sp/>greater,<sp/>or<sp/>`-1`<sp/>if</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>`v2`<sp/>is<sp/>greater.<sp/><sp/>Sorts<sp/>in<sp/>ascending<sp/>order<sp/>if<sp/>passed<sp/>to<sp/>`Array.sort()`.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`rcompare(v1,<sp/>v2)`:<sp/>The<sp/>reverse<sp/>of<sp/>compare.<sp/><sp/>Sorts<sp/>an<sp/>array<sp/>of<sp/>versions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>in<sp/>descending<sp/>order<sp/>when<sp/>passed<sp/>to<sp/>`Array.sort()`.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`compareBuild(v1,<sp/>v2)`:<sp/>The<sp/>same<sp/>as<sp/>`compare`<sp/>but<sp/>considers<sp/>`build`<sp/>when<sp/>two<sp/>versions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>are<sp/>equal.<sp/><sp/>Sorts<sp/>in<sp/>ascending<sp/>order<sp/>if<sp/>passed<sp/>to<sp/>`Array.sort()`.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>`v2`<sp/>is<sp/>greater.<sp/><sp/>Sorts<sp/>in<sp/>ascending<sp/>order<sp/>if<sp/>passed<sp/>to<sp/>`Array.sort()`.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`diff(v1,<sp/>v2)`:<sp/>Returns<sp/>difference<sp/>between<sp/>two<sp/>versions<sp/>by<sp/>the<sp/>release<sp/>type</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>(`major`,<sp/>`premajor`,<sp/>`minor`,<sp/>`preminor`,<sp/>`patch`,<sp/>`prepatch`,<sp/>or<sp/>`prerelease`),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>or<sp/>null<sp/>if<sp/>the<sp/>versions<sp/>are<sp/>the<sp/>same.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Comparators</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`intersects(comparator)`:<sp/>Return<sp/>true<sp/>if<sp/>the<sp/>comparators<sp/>intersect</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Ranges</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`validRange(range)`:<sp/>Return<sp/>the<sp/>valid<sp/>range<sp/>or<sp/>null<sp/>if<sp/>it&apos;s<sp/>not<sp/>valid</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`satisfies(version,<sp/>range)`:<sp/>Return<sp/>true<sp/>if<sp/>the<sp/>version<sp/>satisfies<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>range.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`maxSatisfying(versions,<sp/>range)`:<sp/>Return<sp/>the<sp/>highest<sp/>version<sp/>in<sp/>the<sp/>list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>that<sp/>satisfies<sp/>the<sp/>range,<sp/>or<sp/>`null`<sp/>if<sp/>none<sp/>of<sp/>them<sp/>do.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`minSatisfying(versions,<sp/>range)`:<sp/>Return<sp/>the<sp/>lowest<sp/>version<sp/>in<sp/>the<sp/>list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>that<sp/>satisfies<sp/>the<sp/>range,<sp/>or<sp/>`null`<sp/>if<sp/>none<sp/>of<sp/>them<sp/>do.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`minVersion(range)`:<sp/>Return<sp/>the<sp/>lowest<sp/>version<sp/>that<sp/>can<sp/>possibly<sp/>match</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>given<sp/>range.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`gtr(version,<sp/>range)`:<sp/>Return<sp/>`true`<sp/>if<sp/>version<sp/>is<sp/>greater<sp/>than<sp/>all<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>versions<sp/>possible<sp/>in<sp/>the<sp/>range.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`ltr(version,<sp/>range)`:<sp/>Return<sp/>`true`<sp/>if<sp/>version<sp/>is<sp/>less<sp/>than<sp/>all<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>versions<sp/>possible<sp/>in<sp/>the<sp/>range.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`outside(version,<sp/>range,<sp/>hilo)`:<sp/>Return<sp/>true<sp/>if<sp/>the<sp/>version<sp/>is<sp/>outside</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>bounds<sp/>of<sp/>the<sp/>range<sp/>in<sp/>either<sp/>the<sp/>high<sp/>or<sp/>low<sp/>direction.<sp/><sp/>The</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>`hilo`<sp/>argument<sp/>must<sp/>be<sp/>either<sp/>the<sp/>string<sp/>`&apos;&gt;&apos;`<sp/>or<sp/>`&apos;&lt;&apos;`.<sp/><sp/>(This<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>function<sp/>called<sp/>by<sp/>`gtr`<sp/>and<sp/>`ltr`.)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`intersects(range)`:<sp/>Return<sp/>true<sp/>if<sp/>any<sp/>of<sp/>the<sp/>ranges<sp/>comparators<sp/>intersect</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`simplifyRange(versions,<sp/>range)`:<sp/>Return<sp/>a<sp/>&quot;simplified&quot;<sp/>range<sp/>that</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>matches<sp/>the<sp/>same<sp/>items<sp/>in<sp/>`versions`<sp/>list<sp/>as<sp/>the<sp/>range<sp/>specified.<sp/><sp/>Note</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>that<sp/>it<sp/>does<sp/>*not*<sp/>guarantee<sp/>that<sp/>it<sp/>would<sp/>match<sp/>the<sp/>same<sp/>versions<sp/>in<sp/>all</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cases,<sp/>only<sp/>for<sp/>the<sp/>set<sp/>of<sp/>versions<sp/>provided.<sp/><sp/>This<sp/>is<sp/>useful<sp/>when</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>generating<sp/>ranges<sp/>by<sp/>joining<sp/>together<sp/>multiple<sp/>versions<sp/>with<sp/>`||`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>programmatically,<sp/>to<sp/>provide<sp/>the<sp/>user<sp/>with<sp/>something<sp/>a<sp/>bit<sp/>more</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ergonomic.<sp/><sp/>If<sp/>the<sp/>provided<sp/>range<sp/>is<sp/>shorter<sp/>in<sp/>string-length<sp/>than<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>generated<sp/>range,<sp/>then<sp/>that<sp/>is<sp/>returned.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`subset(subRange,<sp/>superRange)`:<sp/>Return<sp/>`true`<sp/>if<sp/>the<sp/>`subRange`<sp/>range<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>entirely<sp/>contained<sp/>by<sp/>the<sp/>`superRange`<sp/>range.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that,<sp/>since<sp/>ranges<sp/>may<sp/>be<sp/>non-contiguous,<sp/>a<sp/>version<sp/>might<sp/>not<sp/>be</highlight></codeline>
<codeline><highlight class="normal">greater<sp/>than<sp/>a<sp/>range,<sp/>less<sp/>than<sp/>a<sp/>range,<sp/>*or*<sp/>satisfy<sp/>a<sp/>range!<sp/><sp/>For</highlight></codeline>
<codeline><highlight class="normal">example,<sp/>the<sp/>range<sp/>`1.2<sp/>&lt;1.2.9<sp/>||<sp/>&gt;2.0.0`<sp/>would<sp/>have<sp/>a<sp/>hole<sp/>from<sp/>`1.2.9`</highlight></codeline>
<codeline><highlight class="normal">until<sp/>`2.0.0`,<sp/>so<sp/>the<sp/>version<sp/>`1.2.10`<sp/>would<sp/>not<sp/>be<sp/>greater<sp/>than<sp/>the</highlight></codeline>
<codeline><highlight class="normal">range<sp/>(because<sp/>`2.0.1`<sp/>satisfies,<sp/>which<sp/>is<sp/>higher),<sp/>nor<sp/>less<sp/>than<sp/>the</highlight></codeline>
<codeline><highlight class="normal">range<sp/>(since<sp/>`1.2.8`<sp/>satisfies,<sp/>which<sp/>is<sp/>lower),<sp/>and<sp/>it<sp/>also<sp/>does<sp/>not</highlight></codeline>
<codeline><highlight class="normal">satisfy<sp/>the<sp/>range.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>want<sp/>to<sp/>know<sp/>if<sp/>a<sp/>version<sp/>satisfies<sp/>or<sp/>does<sp/>not<sp/>satisfy<sp/>a</highlight></codeline>
<codeline><highlight class="normal">range,<sp/>use<sp/>the<sp/>`satisfies(version,<sp/>range)`<sp/>function.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Coercion</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`coerce(version,<sp/>options)`:<sp/>Coerces<sp/>a<sp/>string<sp/>to<sp/>semver<sp/>if<sp/>possible</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>aims<sp/>to<sp/>provide<sp/>a<sp/>very<sp/>forgiving<sp/>translation<sp/>of<sp/>a<sp/>non-semver<sp/>string<sp/>to</highlight></codeline>
<codeline><highlight class="normal">semver.<sp/>It<sp/>looks<sp/>for<sp/>the<sp/>first<sp/>digit<sp/>in<sp/>a<sp/>string,<sp/>and<sp/>consumes<sp/>all</highlight></codeline>
<codeline><highlight class="normal">remaining<sp/>characters<sp/>which<sp/>satisfy<sp/>at<sp/>least<sp/>a<sp/>partial<sp/>semver<sp/>(e.g.,<sp/>`1`,</highlight></codeline>
<codeline><highlight class="normal">`1.2`,<sp/>`1.2.3`)<sp/>up<sp/>to<sp/>the<sp/>max<sp/>permitted<sp/>length<sp/>(256<sp/>characters).<sp/><sp/>Longer</highlight></codeline>
<codeline><highlight class="normal">versions<sp/>are<sp/>simply<sp/>truncated<sp/>(`4.6.3.9.2-alpha2`<sp/>becomes<sp/>`4.6.3`).<sp/><sp/>All</highlight></codeline>
<codeline><highlight class="normal">surrounding<sp/>text<sp/>is<sp/>simply<sp/>ignored<sp/>(`v3.4<sp/>replaces<sp/>v3.3.1`<sp/>becomes</highlight></codeline>
<codeline><highlight class="normal">`3.4.0`).<sp/><sp/>Only<sp/>text<sp/>which<sp/>lacks<sp/>digits<sp/>will<sp/>fail<sp/>coercion<sp/>(`version<sp/>one`</highlight></codeline>
<codeline><highlight class="normal">is<sp/>not<sp/>valid).<sp/><sp/>The<sp/>maximum<sp/><sp/>length<sp/>for<sp/>any<sp/>semver<sp/>component<sp/>considered<sp/>for</highlight></codeline>
<codeline><highlight class="normal">coercion<sp/>is<sp/>16<sp/>characters;<sp/>longer<sp/>components<sp/>will<sp/>be<sp/>ignored</highlight></codeline>
<codeline><highlight class="normal">(`10000000000000000.4.7.4`<sp/>becomes<sp/>`4.7.4`).<sp/><sp/>The<sp/>maximum<sp/>value<sp/>for<sp/>any</highlight></codeline>
<codeline><highlight class="normal">semver<sp/>component<sp/>is<sp/>`Number.MAX_SAFE_INTEGER<sp/>||<sp/>(2**53<sp/>-<sp/>1)`;<sp/>higher<sp/>value</highlight></codeline>
<codeline><highlight class="normal">components<sp/>are<sp/>invalid<sp/>(`9999999999999999.4.7.4`<sp/>is<sp/>likely<sp/>invalid).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>the<sp/>`options.rtl`<sp/>flag<sp/>is<sp/>set,<sp/>then<sp/>`coerce`<sp/>will<sp/>return<sp/>the<sp/>right-most</highlight></codeline>
<codeline><highlight class="normal">coercible<sp/>tuple<sp/>that<sp/>does<sp/>not<sp/>share<sp/>an<sp/>ending<sp/>index<sp/>with<sp/>a<sp/>longer<sp/>coercible</highlight></codeline>
<codeline><highlight class="normal">tuple.<sp/><sp/>For<sp/>example,<sp/>`1.2.3.4`<sp/>will<sp/>return<sp/>`2.3.4`<sp/>in<sp/>rtl<sp/>mode,<sp/>not</highlight></codeline>
<codeline><highlight class="normal">`4.0.0`.<sp/><sp/>`1.2.3/4`<sp/>will<sp/>return<sp/>`4.0.0`,<sp/>because<sp/>the<sp/>`4`<sp/>is<sp/>not<sp/>a<sp/>part<sp/>of</highlight></codeline>
<codeline><highlight class="normal">any<sp/>other<sp/>overlapping<sp/>SemVer<sp/>tuple.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>the<sp/>`options.includePrerelease`<sp/>flag<sp/>is<sp/>set,<sp/>then<sp/>the<sp/>`coerce`<sp/>result<sp/>will<sp/>contain</highlight></codeline>
<codeline><highlight class="normal">prerelease<sp/>and<sp/>build<sp/>parts<sp/>of<sp/>a<sp/>version.<sp/><sp/>For<sp/>example,<sp/>`1.2.3.4-rc.1+rev.2`</highlight></codeline>
<codeline><highlight class="normal">will<sp/>preserve<sp/>prerelease<sp/>`rc.1`<sp/>and<sp/>build<sp/>`rev.2`<sp/>in<sp/>the<sp/>result.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Clean</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`clean(version)`:<sp/>Clean<sp/>a<sp/>string<sp/>to<sp/>be<sp/>a<sp/>valid<sp/>semver<sp/>if<sp/>possible</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>will<sp/>return<sp/>a<sp/>cleaned<sp/>and<sp/>trimmed<sp/>semver<sp/>version.<sp/>If<sp/>the<sp/>provided</highlight></codeline>
<codeline><highlight class="normal">version<sp/>is<sp/>not<sp/>valid<sp/>a<sp/>null<sp/>will<sp/>be<sp/>returned.<sp/>This<sp/>does<sp/>not<sp/>work<sp/>for</highlight></codeline>
<codeline><highlight class="normal">ranges.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ex.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`s.clean(&apos;<sp/>=<sp/>v<sp/>2.1.5foo&apos;)`:<sp/>`null`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`s.clean(&apos;<sp/>=<sp/>v<sp/>2.1.5foo&apos;,<sp/>{<sp/>loose:<sp/>true<sp/>})`:<sp/>`&apos;2.1.5-foo&apos;`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`s.clean(&apos;<sp/>=<sp/>v<sp/>2.1.5-foo&apos;)`:<sp/>`null`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`s.clean(&apos;<sp/>=<sp/>v<sp/>2.1.5-foo&apos;,<sp/>{<sp/>loose:<sp/>true<sp/>})`:<sp/>`&apos;2.1.5-foo&apos;`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`s.clean(&apos;=v2.1.5&apos;)`:<sp/>`&apos;2.1.5&apos;`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`s.clean(&apos;<sp/><sp/>=v2.1.5&apos;)`:<sp/>`&apos;2.1.5&apos;`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`s.clean(&apos;<sp/><sp/><sp/><sp/><sp/><sp/>2.1.5<sp/><sp/><sp/>&apos;)`:<sp/>`&apos;2.1.5&apos;`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`s.clean(&apos;~1.0.0&apos;)`:<sp/>`null`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Constants</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">As<sp/>a<sp/>convenience,<sp/>helper<sp/>constants<sp/>are<sp/>exported<sp/>to<sp/>provide<sp/>information<sp/>about<sp/>what<sp/>`node-semver`<sp/>supports:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>`RELEASE_TYPES`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>major</highlight></codeline>
<codeline><highlight class="normal">-<sp/>premajor</highlight></codeline>
<codeline><highlight class="normal">-<sp/>minor</highlight></codeline>
<codeline><highlight class="normal">-<sp/>preminor</highlight></codeline>
<codeline><highlight class="normal">-<sp/>patch</highlight></codeline>
<codeline><highlight class="normal">-<sp/>prepatch</highlight></codeline>
<codeline><highlight class="normal">-<sp/>prerelease</highlight></codeline>
</programlisting> const semver = require(&apos;semver&apos;);</para>
<para>if (semver.RELEASE_TYPES.includes(arbitraryUserInput)) { console.log(&apos;This is a valid release type!&apos;); } else { console.warn(&apos;This is NOT a valid release type!&apos;); } <programlisting><codeline><highlight class="normal">###<sp/>`SEMVER_SPEC_VERSION`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.0.0</highlight></codeline>
</programlisting> const semver = require(&apos;semver&apos;);</para>
<para>console.log(&apos;We are currently using the semver specification version:&apos;, semver.SEMVER_SPEC_VERSION); ```</para>
</sect1>
<sect1 id="md_backend_2node__modules_2semver_2_r_e_a_d_m_e_1autotoc_md3069">
<title>Exported Modules</title><para>You may pull in just the part of this semver utility that you need, if you are sensitive to packing and tree-shaking concerns. The main <lsquo/>require(&apos;semver<rsquo/>)` export uses getter functions to lazily load the parts of the API that are used.</para>
<para>The following modules are available:</para>
<para><itemizedlist>
<listitem><para><lsquo/>require(&apos;semver<rsquo/>)<computeroutput> *</computeroutput>require(&apos;semver/classes&apos;)<computeroutput> *</computeroutput>require(&apos;semver/classes/comparator&apos;)<computeroutput> *</computeroutput>require(&apos;semver/classes/range&apos;)<computeroutput> *</computeroutput>require(&apos;semver/classes/semver&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/clean&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/cmp&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/coerce&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/compare&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/compare-build&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/compare-loose&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/diff&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/eq&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/gt&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/gte&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/inc&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/lt&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/lte&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/major&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/minor&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/neq&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/parse&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/patch&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/prerelease&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/rcompare&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/rsort&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/satisfies&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/sort&apos;)<computeroutput> *</computeroutput>require(&apos;semver/functions/valid&apos;)<computeroutput> *</computeroutput>require(&apos;semver/ranges/gtr&apos;)<computeroutput> *</computeroutput>require(&apos;semver/ranges/intersects&apos;)<computeroutput> *</computeroutput>require(&apos;semver/ranges/ltr&apos;)<computeroutput> *</computeroutput>require(&apos;semver/ranges/max-satisfying&apos;)<computeroutput> *</computeroutput>require(&apos;semver/ranges/min-satisfying&apos;)<computeroutput> *</computeroutput>require(&apos;semver/ranges/min-version&apos;)<computeroutput> *</computeroutput>require(&apos;semver/ranges/outside&apos;)<computeroutput> *</computeroutput>require(&apos;semver/ranges/to-comparators&apos;)<computeroutput> *</computeroutput>require(&apos;semver/ranges/valid&apos;)` </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/semver/README.md"/>
  </compounddef>
</doxygen>
