<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="backend_2node__modules_2simple-get_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>simple-get<sp/>[![ci][ci-image]][ci-url]<sp/>[![npm][npm-image]][npm-url]<sp/>[![downloads][downloads-image]][downloads-url]<sp/>[![javascript<sp/>style<sp/>guide][standard-image]][standard-url]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[ci-image]:<sp/>https://img.shields.io/github/workflow/status/feross/simple-get/ci/master</highlight></codeline>
<codeline><highlight class="normal">[ci-url]:<sp/>https://github.com/feross/simple-get/actions</highlight></codeline>
<codeline><highlight class="normal">[npm-image]:<sp/>https://img.shields.io/npm/v/simple-get.svg</highlight></codeline>
<codeline><highlight class="normal">[npm-url]:<sp/>https://npmjs.org/package/simple-get</highlight></codeline>
<codeline><highlight class="normal">[downloads-image]:<sp/>https://img.shields.io/npm/dm/simple-get.svg</highlight></codeline>
<codeline><highlight class="normal">[downloads-url]:<sp/>https://npmjs.org/package/simple-get</highlight></codeline>
<codeline><highlight class="normal">[standard-image]:<sp/>https://img.shields.io/badge/code_style-standard-brightgreen.svg</highlight></codeline>
<codeline><highlight class="normal">[standard-url]:<sp/>https://standardjs.com</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Simplest<sp/>way<sp/>to<sp/>make<sp/>http<sp/>get<sp/>requests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>features</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>module<sp/>is<sp/>the<sp/>lightest<sp/>possible<sp/>wrapper<sp/>on<sp/>top<sp/>of<sp/>node.js<sp/>`http`,<sp/>but<sp/>supporting<sp/>these<sp/>essential<sp/>features:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>follows<sp/>redirects</highlight></codeline>
<codeline><highlight class="normal">-<sp/>automatically<sp/>handles<sp/>gzip/deflate<sp/>responses</highlight></codeline>
<codeline><highlight class="normal">-<sp/>supports<sp/>HTTPS</highlight></codeline>
<codeline><highlight class="normal">-<sp/>supports<sp/>specifying<sp/>a<sp/>timeout</highlight></codeline>
<codeline><highlight class="normal">-<sp/>supports<sp/>convenience<sp/>`url`<sp/>key<sp/>so<sp/>there&apos;s<sp/>no<sp/>need<sp/>to<sp/>use<sp/>`url.parse`<sp/>on<sp/>the<sp/>url<sp/>when<sp/>specifying<sp/>options</highlight></codeline>
<codeline><highlight class="normal">-<sp/>composes<sp/>well<sp/>with<sp/>npm<sp/>packages<sp/>for<sp/>features<sp/>like<sp/>cookies,<sp/>proxies,<sp/>form<sp/>data,<sp/>&amp;<sp/>OAuth</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">All<sp/>this<sp/>in<sp/>&lt;<sp/>100<sp/>lines<sp/>of<sp/>code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>install</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">npm<sp/>install<sp/>simple-get</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>usage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note,<sp/>all<sp/>these<sp/>examples<sp/>also<sp/>work<sp/>in<sp/>the<sp/>browser<sp/>with<sp/>[browserify](http://browserify.org/).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>simple<sp/>GET<sp/>request</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Doesn&apos;t<sp/>get<sp/>easier<sp/>than<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>get<sp/>=<sp/>require(&apos;simple-get&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">get(&apos;http://example.com&apos;,<sp/>function<sp/>(err,<sp/>res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(err)<sp/>throw<sp/>err</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>console.log(res.statusCode)<sp/>//<sp/>200</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res.pipe(process.stdout)<sp/>//<sp/>`res`<sp/>is<sp/>a<sp/>stream</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>even<sp/>simpler<sp/>GET<sp/>request</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>just<sp/>want<sp/>the<sp/>data,<sp/>and<sp/>don&apos;t<sp/>want<sp/>to<sp/>deal<sp/>with<sp/>streams:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>get<sp/>=<sp/>require(&apos;simple-get&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">get.concat(&apos;http://example.com&apos;,<sp/>function<sp/>(err,<sp/>res,<sp/>data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(err)<sp/>throw<sp/>err</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>console.log(res.statusCode)<sp/>//<sp/>200</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>console.log(data)<sp/>//<sp/>Buffer(&apos;this<sp/>is<sp/>the<sp/>server<sp/>response&apos;)</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>POST,<sp/>PUT,<sp/>PATCH,<sp/>HEAD,<sp/>DELETE<sp/>support</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>`POST`,<sp/>call<sp/>`get.post`<sp/>or<sp/>use<sp/>option<sp/>`{<sp/>method:<sp/>&apos;POST&apos;<sp/>}`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>get<sp/>=<sp/>require(&apos;simple-get&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>opts<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>url:<sp/>&apos;http://example.com&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>body:<sp/>&apos;this<sp/>is<sp/>the<sp/>POST<sp/>body&apos;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">get.post(opts,<sp/>function<sp/>(err,<sp/>res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(err)<sp/>throw<sp/>err</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res.pipe(process.stdout)<sp/>//<sp/>`res`<sp/>is<sp/>a<sp/>stream</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>A<sp/>more<sp/>complex<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>get<sp/>=<sp/>require(&apos;simple-get&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">get({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>url:<sp/>&apos;http://example.com&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>method:<sp/>&apos;POST&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>body:<sp/>&apos;this<sp/>is<sp/>the<sp/>POST<sp/>body&apos;,</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>simple-get<sp/>accepts<sp/>all<sp/>options<sp/>that<sp/>node.js<sp/>`http`<sp/>accepts</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>See:<sp/>http://nodejs.org/api/http.html#http_http_request_options_callback</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>headers:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;user-agent&apos;:<sp/>&apos;my<sp/>cool<sp/>app&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">},<sp/>function<sp/>(err,<sp/>res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(err)<sp/>throw<sp/>err</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>All<sp/>properties/methods<sp/>from<sp/>http.IncomingResponse<sp/>are<sp/>available,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>even<sp/>if<sp/>a<sp/>gunzip/inflate<sp/>transform<sp/>stream<sp/>was<sp/>returned.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>See:<sp/>http://nodejs.org/api/http.html#http_http_incomingmessage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res.setTimeout(10000)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>console.log(res.headers)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>res.on(&apos;data&apos;,<sp/>function<sp/>(chunk)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>`chunk`<sp/>is<sp/>the<sp/>decoded<sp/>response,<sp/>after<sp/>it&apos;s<sp/>been<sp/>gunzipped<sp/>or<sp/>inflated</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>(if<sp/>applicable)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console.log(&apos;got<sp/>a<sp/>chunk<sp/>of<sp/>the<sp/>response:<sp/>&apos;<sp/>+<sp/>chunk)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>JSON</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>serialize/deserialize<sp/>request<sp/>and<sp/>response<sp/>with<sp/>JSON:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>get<sp/>=<sp/>require(&apos;simple-get&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>opts<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>method:<sp/>&apos;POST&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>url:<sp/>&apos;http://example.com&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>body:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>key:<sp/>&apos;value&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>json:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">get.concat(opts,<sp/>function<sp/>(err,<sp/>res,<sp/>data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(err)<sp/>throw<sp/>err</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>console.log(data.key)<sp/>//<sp/>`data`<sp/>is<sp/>an<sp/>object</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Timeout</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>set<sp/>a<sp/>timeout<sp/>(in<sp/>milliseconds)<sp/>on<sp/>the<sp/>request<sp/>with<sp/>the<sp/>`timeout`<sp/>option.</highlight></codeline>
<codeline><highlight class="normal">If<sp/>the<sp/>request<sp/>takes<sp/>longer<sp/>than<sp/>`timeout`<sp/>to<sp/>complete,<sp/>then<sp/>the<sp/>entire<sp/>request</highlight></codeline>
<codeline><highlight class="normal">will<sp/>fail<sp/>with<sp/>an<sp/>`Error`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>get<sp/>=<sp/>require(&apos;simple-get&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>opts<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>url:<sp/>&apos;http://example.com&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>timeout:<sp/>2000<sp/>//<sp/>2<sp/>second<sp/>timeout</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">get(opts,<sp/>function<sp/>(err,<sp/>res)<sp/>{})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>One<sp/>Quick<sp/>Tip</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">It&apos;s<sp/>a<sp/>good<sp/>idea<sp/>to<sp/>set<sp/>the<sp/>`&apos;user-agent&apos;`<sp/>header<sp/>so<sp/>the<sp/>provider<sp/>can<sp/>more<sp/>easily</highlight></codeline>
<codeline><highlight class="normal">see<sp/>how<sp/>their<sp/>resource<sp/>is<sp/>used.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>get<sp/>=<sp/>require(&apos;simple-get&apos;)</highlight></codeline>
<codeline><highlight class="normal">const<sp/>pkg<sp/>=<sp/>require(&apos;./package.json&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">get(&apos;http://example.com&apos;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>headers:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;user-agent&apos;:<sp/>`my-module/${pkg.version}<sp/>(https://github.com/username/my-module)`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Proxies</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>use<sp/>the<sp/>[`tunnel`](https://github.com/koichik/node-tunnel)<sp/>module<sp/>with<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`agent`<sp/>option<sp/>to<sp/>work<sp/>with<sp/>proxies:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>get<sp/>=<sp/>require(&apos;simple-get&apos;)</highlight></codeline>
<codeline><highlight class="normal">const<sp/>tunnel<sp/>=<sp/>require(&apos;tunnel&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>opts<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>url:<sp/>&apos;http://example.com&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>agent:<sp/>tunnel.httpOverHttp({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>proxy:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host:<sp/>&apos;localhost&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>})</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">get(opts,<sp/>function<sp/>(err,<sp/>res)<sp/>{})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Cookies</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>use<sp/>the<sp/>[`cookie`](https://github.com/jshttp/cookie)<sp/>module<sp/>to<sp/>include</highlight></codeline>
<codeline><highlight class="normal">cookies<sp/>in<sp/>a<sp/>request:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>get<sp/>=<sp/>require(&apos;simple-get&apos;)</highlight></codeline>
<codeline><highlight class="normal">const<sp/>cookie<sp/>=<sp/>require(&apos;cookie&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>opts<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>url:<sp/>&apos;http://example.com&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>headers:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cookie:<sp/>cookie.serialize(&apos;foo&apos;,<sp/>&apos;bar&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">get(opts,<sp/>function<sp/>(err,<sp/>res)<sp/>{})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Form<sp/>data</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>use<sp/>the<sp/>[`form-data`](https://github.com/form-data/form-data)<sp/>module<sp/>to</highlight></codeline>
<codeline><highlight class="normal">create<sp/>POST<sp/>request<sp/>with<sp/>form<sp/>data:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>fs<sp/>=<sp/>require(&apos;fs&apos;)</highlight></codeline>
<codeline><highlight class="normal">const<sp/>get<sp/>=<sp/>require(&apos;simple-get&apos;)</highlight></codeline>
<codeline><highlight class="normal">const<sp/>FormData<sp/>=<sp/>require(&apos;form-data&apos;)</highlight></codeline>
<codeline><highlight class="normal">const<sp/>form<sp/>=<sp/>new<sp/>FormData()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">form.append(&apos;my_file&apos;,<sp/>fs.createReadStream(&apos;/foo/bar.jpg&apos;))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>opts<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>url:<sp/>&apos;http://example.com&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>body:<sp/>form</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">get.post(opts,<sp/>function<sp/>(err,<sp/>res)<sp/>{})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Or,<sp/>include<sp/>`application/x-www-form-urlencoded`<sp/>form<sp/>data<sp/>manually:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>get<sp/>=<sp/>require(&apos;simple-get&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>opts<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>url:<sp/>&apos;http://example.com&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>form:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>key:<sp/>&apos;value&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">get.post(opts,<sp/>function<sp/>(err,<sp/>res)<sp/>{})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Specifically<sp/>disallowing<sp/>redirects</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>get<sp/>=<sp/>require(&apos;simple-get&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>opts<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>url:<sp/>&apos;http://example.com/will-redirect-elsewhere&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>followRedirects:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>res.statusCode<sp/>will<sp/>be<sp/>301,<sp/>no<sp/>error<sp/>thrown</highlight></codeline>
<codeline><highlight class="normal">get(opts,<sp/>function<sp/>(err,<sp/>res)<sp/>{})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Basic<sp/>Auth</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>user<sp/>=<sp/>&apos;someuser&apos;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>pass<sp/>=<sp/>&apos;pa$$word&apos;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>encodedAuth<sp/>=<sp/>Buffer.from(`${user}:${pass}`).toString(&apos;base64&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">get(&apos;http://example.com&apos;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>headers:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>authorization:<sp/>`Basic<sp/>${encodedAuth}`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>OAuth</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>use<sp/>the<sp/>[`oauth-1.0a`](https://github.com/ddo/oauth-1.0a)<sp/>module<sp/>to<sp/>create</highlight></codeline>
<codeline><highlight class="normal">a<sp/>signed<sp/>OAuth<sp/>request:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>get<sp/>=<sp/>require(&apos;simple-get&apos;)</highlight></codeline>
<codeline><highlight class="normal">const<sp/>crypto<sp/><sp/>=<sp/>require(&apos;crypto&apos;)</highlight></codeline>
<codeline><highlight class="normal">const<sp/>OAuth<sp/>=<sp/>require(&apos;oauth-1.0a&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>oauth<sp/>=<sp/>OAuth({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>consumer:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>key:<sp/>process.env.CONSUMER_KEY,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>secret:<sp/>process.env.CONSUMER_SECRET</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>signature_method:<sp/>&apos;HMAC-SHA1&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>hash_function:<sp/>(baseString,<sp/>key)<sp/>=&gt;<sp/>crypto.createHmac(&apos;sha1&apos;,<sp/>key).update(baseString).digest(&apos;base64&apos;)</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>token<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>key:<sp/>process.env.ACCESS_TOKEN,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>secret:<sp/>process.env.ACCESS_TOKEN_SECRET</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>url<sp/>=<sp/>&apos;https://api.twitter.com/1.1/statuses/home_timeline.json&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>opts<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>url:<sp/>url,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>headers:<sp/>oauth.toHeader(oauth.authorize({url,<sp/>method:<sp/>&apos;GET&apos;},<sp/>token)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>json:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">get(opts,<sp/>function<sp/>(err,<sp/>res)<sp/>{})</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Throttle<sp/>requests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>use<sp/>[limiter](https://github.com/jhurliman/node-rate-limiter)<sp/>to<sp/>throttle<sp/>requests.<sp/>This<sp/>is<sp/>useful<sp/>when<sp/>calling<sp/>an<sp/>API<sp/>that<sp/>is<sp/>rate<sp/>limited.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```js</highlight></codeline>
<codeline><highlight class="normal">const<sp/>simpleGet<sp/>=<sp/>require(&apos;simple-get&apos;)</highlight></codeline>
<codeline><highlight class="normal">const<sp/>RateLimiter<sp/>=<sp/>require(&apos;limiter&apos;).RateLimiter</highlight></codeline>
<codeline><highlight class="normal">const<sp/>limiter<sp/>=<sp/>new<sp/>RateLimiter(1,<sp/>&apos;second&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>get<sp/>=<sp/>(opts,<sp/>cb)<sp/>=&gt;<sp/>limiter.removeTokens(1,<sp/>()<sp/>=&gt;<sp/>simpleGet(opts,<sp/>cb))</highlight></codeline>
<codeline><highlight class="normal">get.concat<sp/>=<sp/>(opts,<sp/>cb)<sp/>=&gt;<sp/>limiter.removeTokens(1,<sp/>()<sp/>=&gt;<sp/>simpleGet.concat(opts,<sp/>cb))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>opts<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>url:<sp/>&apos;http://example.com&apos;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">get.concat(opts,<sp/>processResult)</highlight></codeline>
<codeline><highlight class="normal">get.concat(opts,<sp/>processResult)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">function<sp/>processResult<sp/>(err,<sp/>res,<sp/>data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(err)<sp/>throw<sp/>err</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>console.log(data.toString())</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>license</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MIT.<sp/>Copyright<sp/>(c)<sp/>[Feross<sp/>Aboukhadijeh](http://feross.org).</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/simple-get/README.md"/>
  </compounddef>
</doxygen>
