<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="md_backend_2node__modules_2encoding_2_r_e_a_d_m_e" kind="page">
    <compoundname>md_backend_2node__modules_2encoding_2_r_e_a_d_m_e</compoundname>
    <title>Encoding</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_backend_2node__modules_2encoding_2_r_e_a_d_m_e_1autotoc_md865"/> <bold>encoding</bold> is a simple wrapper around <ulink url="https://github.com/ashtuchkin/iconv-lite/">iconv-lite</ulink> to convert strings from one encoding to another.</para>
<para><ulink url="http://travis-ci.org/andris9/Nodemailer"><image type="html" name="https://secure.travis-ci.org/andris9/encoding.svg" alt="Build Status" inline="yes"></image>
</ulink> <ulink url="http://badge.fury.io/js/encoding"><image type="html" name="https://badge.fury.io/js/encoding.svg" alt="npm version" inline="yes"></image>
</ulink></para>
<para>Initially <emphasis>encoding</emphasis> was a wrapper around <emphasis>node-iconv</emphasis> (main) and <emphasis>iconv-lite</emphasis> (fallback) and was used as the encoding layer for Nodemailer/mailparser. Somehow it also ended up as a dependency for a bunch of other project, none of these actually using <emphasis>node-iconv</emphasis>. The loading mechanics caused issues for front-end projects and Nodemailer/malparser had moved on, so <emphasis>node-iconv</emphasis> was removed.</para>
<sect1 id="md_backend_2node__modules_2encoding_2_r_e_a_d_m_e_1autotoc_md866">
<title>Install</title><para>Install through npm <verbatim>npm install encoding
</verbatim> </para>
</sect1>
<sect1 id="md_backend_2node__modules_2encoding_2_r_e_a_d_m_e_1autotoc_md867">
<title>Usage</title><para>Require the module <verbatim>var encoding = require(&quot;encoding&quot;);
</verbatim> Convert with encoding.convert() <verbatim>var resultBuffer = encoding.convert(text, toCharset, fromCharset);
</verbatim> Where</para>
<para><itemizedlist>
<listitem><para><bold>text</bold> is either a Buffer or a String to be converted</para>
</listitem><listitem><para><bold>toCharset</bold> is the characterset to convert the string</para>
</listitem><listitem><para><bold>fromCharset</bold> (<emphasis>optional</emphasis>, defaults to UTF-8) is the source charset</para>
</listitem></itemizedlist>
</para>
<para>Output of the conversion is always a Buffer object.</para>
<para>Example <verbatim>var result = encoding.convert(&quot;ÕÄÖÜ&quot;, &quot;Latin_1&quot;);
console.log(result); //&lt;Buffer d5 c4 d6 dc&gt;
</verbatim> </para>
</sect1>
<sect1 id="md_backend_2node__modules_2encoding_2_r_e_a_d_m_e_1autotoc_md868">
<title>License</title><para><bold>MIT</bold> </para>
</sect1>
    </detaileddescription>
    <location file="backend/node_modules/encoding/README.md"/>
  </compounddef>
</doxygen>
