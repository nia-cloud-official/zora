<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="backend_2node__modules_2nopt_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">If<sp/>you<sp/>want<sp/>to<sp/>write<sp/>an<sp/>option<sp/>parser,<sp/>and<sp/>have<sp/>it<sp/>be<sp/>good,<sp/>there<sp/>are</highlight></codeline>
<codeline><highlight class="normal">two<sp/>ways<sp/>to<sp/>do<sp/>it.<sp/><sp/>The<sp/>Right<sp/>Way,<sp/>and<sp/>the<sp/>Wrong<sp/>Way.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>Wrong<sp/>Way<sp/>is<sp/>to<sp/>sit<sp/>down<sp/>and<sp/>write<sp/>an<sp/>option<sp/>parser.<sp/><sp/>We&apos;ve<sp/>all<sp/>done</highlight></codeline>
<codeline><highlight class="normal">that.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>Right<sp/>Way<sp/>is<sp/>to<sp/>write<sp/>some<sp/>complex<sp/>configurable<sp/>program<sp/>with<sp/>so<sp/>many</highlight></codeline>
<codeline><highlight class="normal">options<sp/>that<sp/>you<sp/>hit<sp/>the<sp/>limit<sp/>of<sp/>your<sp/>frustration<sp/>just<sp/>trying<sp/>to</highlight></codeline>
<codeline><highlight class="normal">manage<sp/>them<sp/>all,<sp/>and<sp/>defer<sp/>it<sp/>with<sp/>duct-tape<sp/>solutions<sp/>until<sp/>you<sp/>see</highlight></codeline>
<codeline><highlight class="normal">exactly<sp/>to<sp/>the<sp/>core<sp/>of<sp/>the<sp/>problem,<sp/>and<sp/>finally<sp/>snap<sp/>and<sp/>write<sp/>an</highlight></codeline>
<codeline><highlight class="normal">awesome<sp/>option<sp/>parser.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>want<sp/>to<sp/>write<sp/>an<sp/>option<sp/>parser,<sp/>don&apos;t<sp/>write<sp/>an<sp/>option<sp/>parser.</highlight></codeline>
<codeline><highlight class="normal">Write<sp/>a<sp/>package<sp/>manager,<sp/>or<sp/>a<sp/>source<sp/>control<sp/>system,<sp/>or<sp/>a<sp/>service</highlight></codeline>
<codeline><highlight class="normal">restarter,<sp/>or<sp/>an<sp/>operating<sp/>system.<sp/><sp/>You<sp/>probably<sp/>won&apos;t<sp/>end<sp/>up<sp/>with<sp/>a</highlight></codeline>
<codeline><highlight class="normal">good<sp/>one<sp/>of<sp/>those,<sp/>but<sp/>if<sp/>you<sp/>don&apos;t<sp/>give<sp/>up,<sp/>and<sp/>you<sp/>are<sp/>relentless<sp/>and</highlight></codeline>
<codeline><highlight class="normal">diligent<sp/>enough<sp/>in<sp/>your<sp/>procrastination,<sp/>you<sp/>may<sp/>just<sp/>end<sp/>up<sp/>with<sp/>a<sp/>very</highlight></codeline>
<codeline><highlight class="normal">nice<sp/>option<sp/>parser.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>USAGE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```javascript</highlight></codeline>
<codeline><highlight class="normal">//<sp/>my-program.js</highlight></codeline>
<codeline><highlight class="normal">var<sp/>nopt<sp/>=<sp/>require(&quot;nopt&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>,<sp/>Stream<sp/>=<sp/>require(&quot;stream&quot;).Stream</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>,<sp/>path<sp/>=<sp/>require(&quot;path&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>,<sp/>knownOpts<sp/>=<sp/>{<sp/>&quot;foo&quot;<sp/>:<sp/>[String,<sp/>null]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>&quot;bar&quot;<sp/>:<sp/>[Stream,<sp/>Number]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>&quot;baz&quot;<sp/>:<sp/>path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>&quot;bloo&quot;<sp/>:<sp/>[<sp/>&quot;big&quot;,<sp/>&quot;medium&quot;,<sp/>&quot;small&quot;<sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>&quot;flag&quot;<sp/>:<sp/>Boolean</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>&quot;pick&quot;<sp/>:<sp/>Boolean</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>&quot;many1&quot;<sp/>:<sp/>[String,<sp/>Array]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>&quot;many2&quot;<sp/>:<sp/>[path,<sp/>Array]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>,<sp/>shortHands<sp/>=<sp/>{<sp/>&quot;foofoo&quot;<sp/>:<sp/>[&quot;--foo&quot;,<sp/>&quot;Mr.<sp/>Foo&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>&quot;b7&quot;<sp/>:<sp/>[&quot;--bar&quot;,<sp/>&quot;7&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>&quot;m&quot;<sp/>:<sp/>[&quot;--bloo&quot;,<sp/>&quot;medium&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>&quot;p&quot;<sp/>:<sp/>[&quot;--pick&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>&quot;f&quot;<sp/>:<sp/>[&quot;--flag&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>everything<sp/>is<sp/>optional.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>knownOpts<sp/>and<sp/>shorthands<sp/>default<sp/>to<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>arg<sp/>list<sp/>defaults<sp/>to<sp/>process.argv</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>slice<sp/>defaults<sp/>to<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>,<sp/>parsed<sp/>=<sp/>nopt(knownOpts,<sp/>shortHands,<sp/>process.argv,<sp/>2)</highlight></codeline>
<codeline><highlight class="normal">console.log(parsed)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>would<sp/>give<sp/>you<sp/>support<sp/>for<sp/>any<sp/>of<sp/>the<sp/>following:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```console</highlight></codeline>
<codeline><highlight class="normal">$<sp/>node<sp/>my-program.js<sp/>--foo<sp/>&quot;blerp&quot;<sp/>--no-flag</highlight></codeline>
<codeline><highlight class="normal">{<sp/>&quot;foo&quot;<sp/>:<sp/>&quot;blerp&quot;,<sp/>&quot;flag&quot;<sp/>:<sp/>false<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>node<sp/>my-program.js<sp/>---bar<sp/>7<sp/>--foo<sp/>&quot;Mr.<sp/>Hand&quot;<sp/>--flag</highlight></codeline>
<codeline><highlight class="normal">{<sp/>bar:<sp/>7,<sp/>foo:<sp/>&quot;Mr.<sp/>Hand&quot;,<sp/>flag:<sp/>true<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>node<sp/>my-program.js<sp/>--foo<sp/>&quot;blerp&quot;<sp/>-f<sp/>-----p</highlight></codeline>
<codeline><highlight class="normal">{<sp/>foo:<sp/>&quot;blerp&quot;,<sp/>flag:<sp/>true,<sp/>pick:<sp/>true<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>node<sp/>my-program.js<sp/>-fp<sp/>--foofoo</highlight></codeline>
<codeline><highlight class="normal">{<sp/>foo:<sp/>&quot;Mr.<sp/>Foo&quot;,<sp/>flag:<sp/>true,<sp/>pick:<sp/>true<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>node<sp/>my-program.js<sp/>--foofoo<sp/>--<sp/>-fp<sp/><sp/>#<sp/>--<sp/>stops<sp/>the<sp/>flag<sp/>parsing.</highlight></codeline>
<codeline><highlight class="normal">{<sp/>foo:<sp/>&quot;Mr.<sp/>Foo&quot;,<sp/>argv:<sp/>{<sp/>remain:<sp/>[&quot;-fp&quot;]<sp/>}<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>node<sp/>my-program.js<sp/>--blatzk<sp/>-fp<sp/>#<sp/>unknown<sp/>opts<sp/>are<sp/>ok.</highlight></codeline>
<codeline><highlight class="normal">{<sp/>blatzk:<sp/>true,<sp/>flag:<sp/>true,<sp/>pick:<sp/>true<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>node<sp/>my-program.js<sp/>--blatzk=1000<sp/>-fp<sp/>#<sp/>but<sp/>you<sp/>need<sp/>to<sp/>use<sp/>=<sp/>if<sp/>they<sp/>have<sp/>a<sp/>value</highlight></codeline>
<codeline><highlight class="normal">{<sp/>blatzk:<sp/>1000,<sp/>flag:<sp/>true,<sp/>pick:<sp/>true<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>node<sp/>my-program.js<sp/>--no-blatzk<sp/>-fp<sp/>#<sp/>unless<sp/>they<sp/>start<sp/>with<sp/>&quot;no-&quot;</highlight></codeline>
<codeline><highlight class="normal">{<sp/>blatzk:<sp/>false,<sp/>flag:<sp/>true,<sp/>pick:<sp/>true<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>node<sp/>my-program.js<sp/>--baz<sp/>b/a/z<sp/>#<sp/>known<sp/>paths<sp/>are<sp/>resolved.</highlight></codeline>
<codeline><highlight class="normal">{<sp/>baz:<sp/>&quot;/Users/isaacs/b/a/z&quot;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>if<sp/>Array<sp/>is<sp/>one<sp/>of<sp/>the<sp/>types,<sp/>then<sp/>it<sp/>can<sp/>take<sp/>many</highlight></codeline>
<codeline><highlight class="normal">#<sp/>values,<sp/>and<sp/>will<sp/>always<sp/>be<sp/>an<sp/>array.<sp/><sp/>The<sp/>other<sp/>types<sp/>provided</highlight></codeline>
<codeline><highlight class="normal">#<sp/>specify<sp/>what<sp/>types<sp/>are<sp/>allowed<sp/>in<sp/>the<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>node<sp/>my-program.js<sp/>--many1<sp/>5<sp/>--many1<sp/>null<sp/>--many1<sp/>foo</highlight></codeline>
<codeline><highlight class="normal">{<sp/>many1:<sp/>[&quot;5&quot;,<sp/>&quot;null&quot;,<sp/>&quot;foo&quot;]<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>node<sp/>my-program.js<sp/>--many2<sp/>foo<sp/>--many2<sp/>bar</highlight></codeline>
<codeline><highlight class="normal">{<sp/>many2:<sp/>[&quot;/path/to/foo&quot;,<sp/>&quot;path/to/bar&quot;]<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Read<sp/>the<sp/>tests<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>`lib/nopt.js`<sp/>for<sp/>more<sp/>examples<sp/>of</highlight></codeline>
<codeline><highlight class="normal">what<sp/>this<sp/>puppy<sp/>can<sp/>do.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Types</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>following<sp/>types<sp/>are<sp/>supported,<sp/>and<sp/>defined<sp/>on<sp/>`nopt.typeDefs`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>String:<sp/>A<sp/>normal<sp/>string.<sp/><sp/>No<sp/>parsing<sp/>is<sp/>done.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>path:<sp/>A<sp/>file<sp/>system<sp/>path.<sp/><sp/>Gets<sp/>resolved<sp/>against<sp/>cwd<sp/>if<sp/>not<sp/>absolute.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>url:<sp/>A<sp/>url.<sp/><sp/>If<sp/>it<sp/>doesn&apos;t<sp/>parse,<sp/>it<sp/>isn&apos;t<sp/>accepted.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Number:<sp/>Must<sp/>be<sp/>numeric.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Date:<sp/>Must<sp/>parse<sp/>as<sp/>a<sp/>date.<sp/>If<sp/>it<sp/>does,<sp/>and<sp/>`Date`<sp/>is<sp/>one<sp/>of<sp/>the<sp/>options,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>then<sp/>it<sp/>will<sp/>return<sp/>a<sp/>Date<sp/>object,<sp/>not<sp/>a<sp/>string.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Boolean:<sp/>Must<sp/>be<sp/>either<sp/>`true`<sp/>or<sp/>`false`.<sp/><sp/>If<sp/>an<sp/>option<sp/>is<sp/>a<sp/>boolean,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>then<sp/>it<sp/>does<sp/>not<sp/>need<sp/>a<sp/>value,<sp/>and<sp/>its<sp/>presence<sp/>will<sp/>imply<sp/>`true`<sp/>as</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>value.<sp/><sp/>To<sp/>negate<sp/>boolean<sp/>flags,<sp/>do<sp/>`--no-whatever`<sp/>or<sp/>`--whatever</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>false`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>NaN:<sp/>Means<sp/>that<sp/>the<sp/>option<sp/>is<sp/>strictly<sp/>not<sp/>allowed.<sp/><sp/>Any<sp/>value<sp/>will</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fail.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Stream:<sp/>An<sp/>object<sp/>matching<sp/>the<sp/>&quot;Stream&quot;<sp/>class<sp/>in<sp/>node.<sp/><sp/>Valuable</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>use<sp/>when<sp/>validating<sp/>programmatically.<sp/><sp/>(npm<sp/>uses<sp/>this<sp/>to<sp/>let<sp/>you</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>supply<sp/>any<sp/>WriteStream<sp/>on<sp/>the<sp/>`outfd`<sp/>and<sp/>`logfd`<sp/>config<sp/>options.)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Array:<sp/>If<sp/>`Array`<sp/>is<sp/>specified<sp/>as<sp/>one<sp/>of<sp/>the<sp/>types,<sp/>then<sp/>the<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>will<sp/>be<sp/>parsed<sp/>as<sp/>a<sp/>list<sp/>of<sp/>options.<sp/><sp/>This<sp/>means<sp/>that<sp/>multiple<sp/>values</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>can<sp/>be<sp/>specified,<sp/>and<sp/>that<sp/>the<sp/>value<sp/>will<sp/>always<sp/>be<sp/>an<sp/>array.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>a<sp/>type<sp/>is<sp/>an<sp/>array<sp/>of<sp/>values<sp/>not<sp/>on<sp/>this<sp/>list,<sp/>then<sp/>those<sp/>are</highlight></codeline>
<codeline><highlight class="normal">considered<sp/>valid<sp/>values.<sp/><sp/>For<sp/>instance,<sp/>in<sp/>the<sp/>example<sp/>above,<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`--bloo`<sp/>option<sp/>can<sp/>only<sp/>be<sp/>one<sp/>of<sp/>`&quot;big&quot;`,<sp/>`&quot;medium&quot;`,<sp/>or<sp/>`&quot;small&quot;`,</highlight></codeline>
<codeline><highlight class="normal">and<sp/>any<sp/>other<sp/>value<sp/>will<sp/>be<sp/>rejected.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>parsing<sp/>unknown<sp/>fields,<sp/>`&quot;true&quot;`,<sp/>`&quot;false&quot;`,<sp/>and<sp/>`&quot;null&quot;`<sp/>will<sp/>be</highlight></codeline>
<codeline><highlight class="normal">interpreted<sp/>as<sp/>their<sp/>JavaScript<sp/>equivalents.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>also<sp/>mix<sp/>types<sp/>and<sp/>values,<sp/>or<sp/>multiple<sp/>types,<sp/>in<sp/>a<sp/>list.<sp/><sp/>For</highlight></codeline>
<codeline><highlight class="normal">instance<sp/>`{<sp/>blah:<sp/>[Number,<sp/>null]<sp/>}`<sp/>would<sp/>allow<sp/>a<sp/>value<sp/>to<sp/>be<sp/>set<sp/>to</highlight></codeline>
<codeline><highlight class="normal">either<sp/>a<sp/>Number<sp/>or<sp/>null.<sp/><sp/>When<sp/>types<sp/>are<sp/>ordered,<sp/>this<sp/>implies<sp/>a</highlight></codeline>
<codeline><highlight class="normal">preference,<sp/>and<sp/>the<sp/>first<sp/>type<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>properly<sp/>interpret</highlight></codeline>
<codeline><highlight class="normal">the<sp/>value<sp/>will<sp/>be<sp/>used.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>define<sp/>a<sp/>new<sp/>type,<sp/>add<sp/>it<sp/>to<sp/>`nopt.typeDefs`.<sp/><sp/>Each<sp/>item<sp/>in<sp/>that</highlight></codeline>
<codeline><highlight class="normal">hash<sp/>is<sp/>an<sp/>object<sp/>with<sp/>a<sp/>`type`<sp/>member<sp/>and<sp/>a<sp/>`validate`<sp/>method.<sp/><sp/>The</highlight></codeline>
<codeline><highlight class="normal">`type`<sp/>member<sp/>is<sp/>an<sp/>object<sp/>that<sp/>matches<sp/>what<sp/>goes<sp/>in<sp/>the<sp/>type<sp/>list.<sp/><sp/>The</highlight></codeline>
<codeline><highlight class="normal">`validate`<sp/>method<sp/>is<sp/>a<sp/>function<sp/>that<sp/>gets<sp/>called<sp/>with<sp/>`validate(data,</highlight></codeline>
<codeline><highlight class="normal">key,<sp/>val)`.<sp/><sp/>Validate<sp/>methods<sp/>should<sp/>assign<sp/>`data[key]`<sp/>to<sp/>the<sp/>valid</highlight></codeline>
<codeline><highlight class="normal">value<sp/>of<sp/>`val`<sp/>if<sp/>it<sp/>can<sp/>be<sp/>handled<sp/>properly,<sp/>or<sp/>return<sp/>boolean</highlight></codeline>
<codeline><highlight class="normal">`false`<sp/>if<sp/>it<sp/>cannot.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>also<sp/>call<sp/>`nopt.clean(data,<sp/>types,<sp/>typeDefs)`<sp/>to<sp/>clean<sp/>up<sp/>a</highlight></codeline>
<codeline><highlight class="normal">config<sp/>object<sp/>and<sp/>remove<sp/>its<sp/>invalid<sp/>properties.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Error<sp/>Handling</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">By<sp/>default,<sp/>nopt<sp/>outputs<sp/>a<sp/>warning<sp/>to<sp/>standard<sp/>error<sp/>when<sp/>invalid<sp/>values<sp/>for</highlight></codeline>
<codeline><highlight class="normal">known<sp/>options<sp/>are<sp/>found.<sp/><sp/>You<sp/>can<sp/>change<sp/>this<sp/>behavior<sp/>by<sp/>assigning<sp/>a<sp/>method</highlight></codeline>
<codeline><highlight class="normal">to<sp/>`nopt.invalidHandler`.<sp/><sp/>This<sp/>method<sp/>will<sp/>be<sp/>called<sp/>with</highlight></codeline>
<codeline><highlight class="normal">the<sp/>offending<sp/>`nopt.invalidHandler(key,<sp/>val,<sp/>types)`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>no<sp/>`nopt.invalidHandler`<sp/>is<sp/>assigned,<sp/>then<sp/>it<sp/>will<sp/>console.error</highlight></codeline>
<codeline><highlight class="normal">its<sp/>whining.<sp/><sp/>If<sp/>it<sp/>is<sp/>assigned<sp/>to<sp/>boolean<sp/>`false`<sp/>then<sp/>the<sp/>warning<sp/>is</highlight></codeline>
<codeline><highlight class="normal">suppressed.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Abbreviations</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Yes,<sp/>they<sp/>are<sp/>supported.<sp/><sp/>If<sp/>you<sp/>define<sp/>options<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```javascript</highlight></codeline>
<codeline><highlight class="normal">{<sp/>&quot;foolhardyelephants&quot;<sp/>:<sp/>Boolean</highlight></codeline>
<codeline><highlight class="normal">,<sp/>&quot;pileofmonkeys&quot;<sp/>:<sp/>Boolean<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Then<sp/>this<sp/>will<sp/>work:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">node<sp/>program.js<sp/>--foolhar<sp/>--pil</highlight></codeline>
<codeline><highlight class="normal">node<sp/>program.js<sp/>--no-f<sp/>--pileofmon</highlight></codeline>
<codeline><highlight class="normal">#<sp/>etc.</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Shorthands</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Shorthands<sp/>are<sp/>a<sp/>hash<sp/>of<sp/>shorter<sp/>option<sp/>names<sp/>to<sp/>a<sp/>snippet<sp/>of<sp/>args<sp/>that</highlight></codeline>
<codeline><highlight class="normal">they<sp/>expand<sp/>to.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>multiple<sp/>one-character<sp/>shorthands<sp/>are<sp/>all<sp/>combined,<sp/>and<sp/>the</highlight></codeline>
<codeline><highlight class="normal">combination<sp/>does<sp/>not<sp/>unambiguously<sp/>match<sp/>any<sp/>other<sp/>option<sp/>or<sp/>shorthand,</highlight></codeline>
<codeline><highlight class="normal">then<sp/>they<sp/>will<sp/>be<sp/>broken<sp/>up<sp/>into<sp/>their<sp/>constituent<sp/>parts.<sp/><sp/>For<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```json</highlight></codeline>
<codeline><highlight class="normal">{<sp/>&quot;s&quot;<sp/>:<sp/>[&quot;--loglevel&quot;,<sp/>&quot;silent&quot;]</highlight></codeline>
<codeline><highlight class="normal">,<sp/>&quot;g&quot;<sp/>:<sp/>&quot;--global&quot;</highlight></codeline>
<codeline><highlight class="normal">,<sp/>&quot;f&quot;<sp/>:<sp/>&quot;--force&quot;</highlight></codeline>
<codeline><highlight class="normal">,<sp/>&quot;p&quot;<sp/>:<sp/>&quot;--parseable&quot;</highlight></codeline>
<codeline><highlight class="normal">,<sp/>&quot;l&quot;<sp/>:<sp/>&quot;--long&quot;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">npm<sp/>ls<sp/>-sgflp</highlight></codeline>
<codeline><highlight class="normal">#<sp/>just<sp/>like<sp/>doing<sp/>this:</highlight></codeline>
<codeline><highlight class="normal">npm<sp/>ls<sp/>--loglevel<sp/>silent<sp/>--global<sp/>--force<sp/>--long<sp/>--parseable</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>The<sp/>Rest<sp/>of<sp/>the<sp/>args</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>config<sp/>object<sp/>returned<sp/>by<sp/>nopt<sp/>is<sp/>given<sp/>a<sp/>special<sp/>member<sp/>called</highlight></codeline>
<codeline><highlight class="normal">`argv`,<sp/>which<sp/>is<sp/>an<sp/>object<sp/>with<sp/>the<sp/>following<sp/>fields:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`remain`:<sp/>The<sp/>remaining<sp/>args<sp/>after<sp/>all<sp/>the<sp/>parsing<sp/>has<sp/>occurred.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`original`:<sp/>The<sp/>args<sp/>as<sp/>they<sp/>originally<sp/>appeared.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`cooked`:<sp/>The<sp/>args<sp/>after<sp/>flags<sp/>and<sp/>shorthands<sp/>are<sp/>expanded.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Slicing</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Node<sp/>programs<sp/>are<sp/>called<sp/>with<sp/>more<sp/>or<sp/>less<sp/>the<sp/>exact<sp/>argv<sp/>as<sp/>it<sp/>appears</highlight></codeline>
<codeline><highlight class="normal">in<sp/>C<sp/>land,<sp/>after<sp/>the<sp/>v8<sp/>and<sp/>node-specific<sp/>options<sp/>have<sp/>been<sp/>plucked<sp/>off.</highlight></codeline>
<codeline><highlight class="normal">As<sp/>such,<sp/>`argv[0]`<sp/>is<sp/>always<sp/>`node`<sp/>and<sp/>`argv[1]`<sp/>is<sp/>always<sp/>the</highlight></codeline>
<codeline><highlight class="normal">JavaScript<sp/>program<sp/>being<sp/>run.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">That&apos;s<sp/>usually<sp/>not<sp/>very<sp/>useful<sp/>to<sp/>you.<sp/><sp/>So<sp/>they&apos;re<sp/>sliced<sp/>off<sp/>by</highlight></codeline>
<codeline><highlight class="normal">default.<sp/><sp/>If<sp/>you<sp/>want<sp/>them,<sp/>then<sp/>you<sp/>can<sp/>pass<sp/>in<sp/>`0`<sp/>as<sp/>the<sp/>last</highlight></codeline>
<codeline><highlight class="normal">argument,<sp/>or<sp/>any<sp/>other<sp/>number<sp/>that<sp/>you&apos;d<sp/>like<sp/>to<sp/>slice<sp/>off<sp/>the<sp/>start<sp/>of</highlight></codeline>
<codeline><highlight class="normal">the<sp/>list.</highlight></codeline>
    </programlisting>
    <location file="backend/node_modules/nopt/README.md"/>
  </compounddef>
</doxygen>
