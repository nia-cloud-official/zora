.TH "md_backend_2node__modules_2encoding_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2encoding_2_r_e_a_d_m_e \- Encoding 
.PP
 \fBencoding\fP is a simple wrapper around \fRiconv-lite\fP to convert strings from one encoding to another\&.
.PP
\fR\fP \fR\fP
.PP
Initially \fIencoding\fP was a wrapper around \fInode-iconv\fP (main) and \fIiconv-lite\fP (fallback) and was used as the encoding layer for Nodemailer/mailparser\&. Somehow it also ended up as a dependency for a bunch of other project, none of these actually using \fInode-iconv\fP\&. The loading mechanics caused issues for front-end projects and Nodemailer/malparser had moved on, so \fInode-iconv\fP was removed\&.
.SH "Install"
.PP
Install through npm 
.PP
.nf
npm install encoding

.fi
.PP
 
.SH "Usage"
.PP
Require the module 
.PP
.nf
var encoding = require('encoding');

.fi
.PP
 Convert with encoding\&.convert() 
.PP
.nf
var resultBuffer = encoding\&.convert(text, toCharset, fromCharset);

.fi
.PP
 Where
.PP
.IP "\(bu" 2
\fBtext\fP is either a Buffer or a String to be converted
.IP "\(bu" 2
\fBtoCharset\fP is the characterset to convert the string
.IP "\(bu" 2
\fBfromCharset\fP (\fIoptional\fP, defaults to UTF-8) is the source charset
.PP
.PP
Output of the conversion is always a Buffer object\&.
.PP
Example 
.PP
.nf
var result = encoding\&.convert('ÕÄÖÜ', 'Latin_1');
console\&.log(result); //<Buffer d5 c4 d6 dc>

.fi
.PP
 
.SH "License"
.PP
\fBMIT\fP 
