.TH "gyp.generator.gypd" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gyp.generator.gypd
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBGenerateOutput\fP (target_list, target_dicts, data, params)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "list \fB_generator_identity_variables\fP"
.br
.ti -1c
.RI "dict \fBgenerator_default_variables\fP = {}"
.br
.ti -1c
.RI "bool \fBgenerator_supports_multiple_toolsets\fP = True"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
gypd output module

This module produces gyp input as its output\&.  Output files are given the
\&.gypd extension to avoid overwriting the \&.gyp files that they are generated
from\&.  Internal references to \&.gyp files (such as those found in
'dependencies' sections) are not adjusted to point to \&.gypd files instead;
unlike other paths, which are relative to the \&.gyp or \&.gypd file, such paths
are relative to the directory from which gyp was run to create the \&.gypd file\&.

This generator module is intended to be a sample and a debugging aid, hence
the 'd' for 'debug' in \&.gypd\&.  It is useful to inspect the results of the
various merges, expansions, and conditional evaluations performed by gyp
and to see a representation of what would be fed to a generator module\&.

It's not advisable to rename \&.gypd files produced by this module to \&.gyp,
because they will have all merges, expansions, and evaluations already
performed and the relevant constructs not present in the output; paths to
dependencies may be wrong; and various sections that do not belong in \&.gyp
files such as such as 'included_files' and '*_excluded' will be present\&.
Output will also be stripped of comments\&.  This is not intended to be a
general-purpose gyp pretty-printer; for that, you probably just want to
run 'pprint\&.pprint(eval(open('source\&.gyp')\&.read()))', which will still strip
comments but won't do all of the other things done to this module's output\&.

The specific formatting of the output generated by this module is subject
to change\&.

.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "gyp\&.generator\&.gypd\&.GenerateOutput ( target_list,  target_dicts,  data,  params)"

.PP
Definition at line \fB74\fP of file \fBgypd\&.py\fP\&.
.SH "Variable Documentation"
.PP 
.SS "list gyp\&.generator\&.gypd\&._generator_identity_variables\fR [protected]\fP"
\fBInitial value:\fP
.nf
1 =  [
2     "CONFIGURATION_NAME",
3     "EXECUTABLE_PREFIX",
4     "EXECUTABLE_SUFFIX",
5     "INTERMEDIATE_DIR",
6     "LIB_DIR",
7     "PRODUCT_DIR",
8     "RULE_INPUT_ROOT",
9     "RULE_INPUT_DIRNAME",
10     "RULE_INPUT_EXT",
11     "RULE_INPUT_NAME",
12     "RULE_INPUT_PATH",
13     "SHARED_INTERMEDIATE_DIR",
14     "SHARED_LIB_DIR",
15     "SHARED_LIB_PREFIX",
16     "SHARED_LIB_SUFFIX",
17     "STATIC_LIB_PREFIX",
18     "STATIC_LIB_SUFFIX",
19 ]
.PP
.fi

.PP
Definition at line \fB39\fP of file \fBgypd\&.py\fP\&.
.SS "dict gyp\&.generator\&.gypd\&.generator_default_variables = {}"

.PP
Definition at line \fB61\fP of file \fBgypd\&.py\fP\&.
.SS "bool gyp\&.generator\&.gypd\&.generator_supports_multiple_toolsets = True"

.PP
Definition at line \fB64\fP of file \fBgypd\&.py\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
