.TH "gyp.msvs_emulation.MsvsSettings" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gyp.msvs_emulation.MsvsSettings
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_GetWrapper\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__init__\fP (self, \fBspec\fP, generator_flags)"
.br
.ti -1c
.RI "\fBGetExtension\fP (self)"
.br
.ti -1c
.RI "\fBGetVSMacroEnv\fP (self, base_to_build=None, config=None)"
.br
.ti -1c
.RI "\fBConvertVSMacros\fP (self, s, base_to_build=None, config=None)"
.br
.ti -1c
.RI "\fBAdjustLibraries\fP (self, libraries)"
.br
.ti -1c
.RI "\fBGetArch\fP (self, config)"
.br
.ti -1c
.RI "\fBAdjustIncludeDirs\fP (self, include_dirs, config)"
.br
.ti -1c
.RI "\fBAdjustMidlIncludeDirs\fP (self, midl_include_dirs, config)"
.br
.ti -1c
.RI "\fBGetComputedDefines\fP (self, config)"
.br
.ti -1c
.RI "\fBGetCompilerPdbName\fP (self, config, expand_special)"
.br
.ti -1c
.RI "\fBGetMapFileName\fP (self, config, expand_special)"
.br
.ti -1c
.RI "\fBGetOutputName\fP (self, config, expand_special)"
.br
.ti -1c
.RI "\fBGetPDBName\fP (self, config, expand_special, default)"
.br
.ti -1c
.RI "\fBGetNoImportLibrary\fP (self, config)"
.br
.ti -1c
.RI "\fBGetAsmflags\fP (self, config)"
.br
.ti -1c
.RI "\fBGetCflags\fP (self, config)"
.br
.ti -1c
.RI "\fBGetCflagsC\fP (self, config)"
.br
.ti -1c
.RI "\fBGetCflagsCC\fP (self, config)"
.br
.ti -1c
.RI "\fBGetLibFlags\fP (self, config, gyp_to_build_path)"
.br
.ti -1c
.RI "\fBGetDefFile\fP (self, gyp_to_build_path)"
.br
.ti -1c
.RI "\fBGetPGDName\fP (self, config, expand_special)"
.br
.ti -1c
.RI "\fBGetLdflags\fP (self, config, gyp_to_build_path, expand_special, manifest_base_name, output_name, is_executable, build_dir)"
.br
.ti -1c
.RI "\fBIsUseLibraryDependencyInputs\fP (self, config)"
.br
.ti -1c
.RI "\fBIsEmbedManifest\fP (self, config)"
.br
.ti -1c
.RI "\fBIsLinkIncremental\fP (self, config)"
.br
.ti -1c
.RI "\fBGetRcflags\fP (self, config, gyp_to_ninja_path)"
.br
.ti -1c
.RI "\fBBuildCygwinBashCommandLine\fP (self, args, path_to_base)"
.br
.ti -1c
.RI "\fBGetRuleShellFlags\fP (self, rule)"
.br
.ti -1c
.RI "\fBHasExplicitIdlRulesOrActions\fP (self, \fBspec\fP)"
.br
.ti -1c
.RI "\fBHasExplicitAsmRules\fP (self, \fBspec\fP)"
.br
.ti -1c
.RI "\fBGetIdlBuildData\fP (self, source, config)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBspec\fP"
.br
.ti -1c
.RI "\fBvs_version\fP"
.br
.ti -1c
.RI "\fBmsvs_cygwin_dirs\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "\fBRuleShellFlags\fP = collections\&.namedtuple('RuleShellFlags', ['cygwin', 'quote'])"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fB_GetAndMunge\fP (self, field, path, default, prefix, append, map)"
.br
.ti -1c
.RI "\fB_TargetConfig\fP (self, config)"
.br
.ti -1c
.RI "\fB_Setting\fP (self, path, config, default=None, prefix='', append=None, map=None)"
.br
.ti -1c
.RI "\fB_ConfigAttrib\fP (self, path, config, default=None, prefix='', append=None, map=None)"
.br
.ti -1c
.RI "\fB_GetPchFlags\fP (self, config, extension)"
.br
.ti -1c
.RI "\fB_GetAdditionalLibraryDirectories\fP (self, root, config, gyp_to_build_path)"
.br
.ti -1c
.RI "\fB_GetDefFileAsLdflags\fP (self, ldflags, gyp_to_build_path)"
.br
.ti -1c
.RI "\fB_GetLdManifestFlags\fP (self, config, name, gyp_to_build_path, allow_isolation, build_dir)"
.br
.ti -1c
.RI "\fB_GetAdditionalManifestFiles\fP (self, config, gyp_to_build_path)"
.br
.ti -1c
.RI "\fB_HasExplicitRuleForExtension\fP (self, \fBspec\fP, extension)"
.br
.ti -1c
.RI "\fB_HasExplicitIdlActions\fP (self, \fBspec\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
A class that understands the gyp 'msvs_\&.\&.\&.' values (especially the
msvs_settings field)\&. They largely correpond to the VS2008 IDE DOM\&. This
class helps map those settings to command line options\&.
.fi
.PP
 
.PP
Definition at line \fB200\fP of file \fBmsvs_emulation\&.py\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.__init__ ( self,  spec,  generator_flags)"

.PP
Definition at line \fB205\fP of file \fBmsvs_emulation\&.py\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&._ConfigAttrib ( self,  path,  config,  default = \fRNone\fP,  prefix = \fR''\fP,  append = \fRNone\fP,  map = \fRNone\fP)\fR [protected]\fP"

.PP
.nf
_GetAndMunge for msvs_configuration_attributes\&.
.fi
.PP
 
.PP
Definition at line \fB362\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&._GetAdditionalLibraryDirectories ( self,  root,  config,  gyp_to_build_path)\fR [protected]\fP"

.PP
.nf
Get and normalize the list of paths in AdditionalLibraryDirectories
setting\&.
.fi
.PP
 
.PP
Definition at line \fB581\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&._GetAdditionalManifestFiles ( self,  config,  gyp_to_build_path)\fR [protected]\fP"

.PP
.nf
Gets additional manifest files that are added to the default one
generated by the linker\&.
.fi
.PP
 
.PP
Definition at line \fB873\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&._GetAndMunge ( self,  field,  path,  default,  prefix,  append,  map)\fR [protected]\fP"

.PP
.nf
Retrieve a value from |field| at |path| or return |default|\&. If
|append| is specified, and the item is found, it will be appended to that
object instead of returned\&. If |map| is specified, results will be
remapped through |map| before being returned or appended\&.
.fi
.PP
 
.PP
Definition at line \fB301\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&._GetDefFileAsLdflags ( self,  ldflags,  gyp_to_build_path)\fR [protected]\fP"

.PP
.nf
\&.def files get implicitly converted to a ModuleDefinitionFile for the
linker in the VS generator\&. Emulate that behaviour here\&.
.fi
.PP
 
.PP
Definition at line \fB628\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&._GetLdManifestFlags ( self,  config,  name,  gyp_to_build_path,  allow_isolation,  build_dir)\fR [protected]\fP"

.PP
.nf
Returns a 3-tuple:
- the set of flags that need to be added to the link to generate
  a default manifest
- the intermediate manifest that the linker will generate that should be
  used to assert it doesn't add anything to the merged one\&.
- the list of all the manifest files to be merged by the manifest tool and
  included into the link\&.
.fi
.PP
 
.PP
Definition at line \fB779\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&._GetPchFlags ( self,  config,  extension)\fR [protected]\fP"

.PP
.nf
Get the flags to be added to the cflags for precompiled header support\&.
.fi
.PP
 
.PP
Definition at line \fB557\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&._HasExplicitIdlActions ( self,  spec)\fR [protected]\fP"

.PP
.nf
Determine if an action should not run midl for \&.idl files\&.
.fi
.PP
 
.PP
Definition at line \fB968\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&._HasExplicitRuleForExtension ( self,  spec,  extension)\fR [protected]\fP"

.PP
.nf
Determine if there's an explicit rule for a particular extension\&.
.fi
.PP
 
.PP
Definition at line \fB961\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&._Setting ( self,  path,  config,  default = \fRNone\fP,  prefix = \fR''\fP,  append = \fRNone\fP,  map = \fRNone\fP)\fR [protected]\fP"

.PP
.nf
_GetAndMunge for msvs_settings\&.
.fi
.PP
 
.PP
Definition at line \fB356\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&._TargetConfig ( self,  config)\fR [protected]\fP"

.PP
.nf
Returns the target-specific configuration\&.
.fi
.PP
 
.PP
Definition at line \fB338\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.AdjustIncludeDirs ( self,  include_dirs,  config)"

.PP
.nf
Updates include_dirs to expand VS specific paths, and adds the system
include dirs used for platform SDK and similar\&.
.fi
.PP
 
.PP
Definition at line \fB375\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.AdjustLibraries ( self,  libraries)"

.PP
.nf
Strip -l from library if it's specified with that\&.
.fi
.PP
 
.PP
Definition at line \fB291\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.AdjustMidlIncludeDirs ( self,  midl_include_dirs,  config)"

.PP
.nf
Updates midl_include_dirs to expand VS specific paths, and adds the
system include dirs used for platform SDK and similar\&.
.fi
.PP
 
.PP
Definition at line \fB387\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.BuildCygwinBashCommandLine ( self,  args,  path_to_base)"

.PP
.nf
Build a command line that runs args via cygwin bash\&. We assume that all
incoming paths are in Windows normpath'd form, so they need to be
converted to posix style for the part of the command line that's passed to
bash\&. We also have to do some Visual Studio macro emulation here because
various rules use magic VS names for things\&. Also note that rules that
contain ninja variables cannot be fixed here (for example ${source}), so
the outer generator needs to make sure that the paths that are written out
are in posix style, if the command line will be used here\&.
.fi
.PP
 
.PP
Definition at line \fB922\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.ConvertVSMacros ( self,  s,  base_to_build = \fRNone\fP,  config = \fRNone\fP)"

.PP
.nf
Convert from VS macro names to something equivalent\&.
.fi
.PP
 
.PP
Definition at line \fB286\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetArch ( self,  config)"

.PP
.nf
Get architecture based on msvs_configuration_platform and
msvs_target_platform\&. Returns either 'x86' or 'x64'\&.
.fi
.PP
 
.PP
Definition at line \fB328\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetAsmflags ( self,  config)"

.PP
.nf
Returns the flags that need to be added to ml invocations\&.
.fi
.PP
 
.PP
Definition at line \fB470\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetCflags ( self,  config)"

.PP
.nf
Returns the flags that need to be added to \&.c and \&.cc compilations\&.
.fi
.PP
 
.PP
Definition at line \fB479\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetCflagsC ( self,  config)"

.PP
.nf
Returns the flags that need to be added to \&.c compilations\&.
.fi
.PP
 
.PP
Definition at line \fB571\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetCflagsCC ( self,  config)"

.PP
.nf
Returns the flags that need to be added to \&.cc compilations\&.
.fi
.PP
 
.PP
Definition at line \fB576\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetCompilerPdbName ( self,  config,  expand_special)"

.PP
.nf
Get the pdb file name that should be used for compiler invocations, or
None if there's no explicit name specified\&.
.fi
.PP
 
.PP
Definition at line \fB415\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetComputedDefines ( self,  config)"

.PP
.nf
Returns the set of defines that are injected to the defines list based
on other VS settings\&.
.fi
.PP
 
.PP
Definition at line \fB399\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetDefFile ( self,  gyp_to_build_path)"

.PP
.nf
Returns the \&.def file from sources, if any\&.  Otherwise returns None\&.
.fi
.PP
 
.PP
Definition at line \fB615\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetExtension ( self)"

.PP
.nf
Returns the extension for the target, with no leading dot\&.

Uses 'product_extension' if specified, otherwise uses MSVS defaults based on
the target type\&.

.fi
.PP
 
.PP
Definition at line \fB243\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetIdlBuildData ( self,  source,  config)"

.PP
.nf
Determine the implicit outputs for an idl file\&. Returns output
directory, outputs, and variables and flags that are required\&.
.fi
.PP
 
.PP
Definition at line \fB986\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetLdflags ( self,  config,  gyp_to_build_path,  expand_special,  manifest_base_name,  output_name,  is_executable,  build_dir)"

.PP
.nf
Returns the flags that need to be added to link commands, and the
manifest files\&.
.fi
.PP
 
.PP
Definition at line \fB646\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetLibFlags ( self,  config,  gyp_to_build_path)"

.PP
.nf
Returns the flags that need to be added to lib commands\&.
.fi
.PP
 
.PP
Definition at line \fB594\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetMapFileName ( self,  config,  expand_special)"

.PP
.nf
Gets the explicitly overridden map file name for a target or returns None
if it's not set\&.
.fi
.PP
 
.PP
Definition at line \fB424\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetNoImportLibrary ( self,  config)"

.PP
.nf
If NoImportLibrary: true, ninja will not expect the output to include
an import library\&.
.fi
.PP
 
.PP
Definition at line \fB463\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetOutputName ( self,  config,  expand_special)"

.PP
.nf
Gets the explicitly overridden output name for a target or returns None
if it's not overridden\&.
.fi
.PP
 
.PP
Definition at line \fB433\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetPDBName ( self,  config,  expand_special,  default)"

.PP
.nf
Gets the explicitly overridden pdb name for a target or returns
default if it's not overridden, or if no pdb will be generated\&.
.fi
.PP
 
.PP
Definition at line \fB447\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetPGDName ( self,  config,  expand_special)"

.PP
.nf
Gets the explicitly overridden pgd name for a target or returns None
if it's not overridden\&.
.fi
.PP
 
.PP
Definition at line \fB635\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetRcflags ( self,  config,  gyp_to_ninja_path)"

.PP
.nf
Returns the flags that need to be added to invocations of the resource
compiler\&.
.fi
.PP
 
.PP
Definition at line \fB907\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetRuleShellFlags ( self,  rule)"

.PP
.nf
Return RuleShellFlags about how the given rule should be run\&. This
includes whether it should run under cygwin (msvs_cygwin_shell), and
whether the commands should be quoted (msvs_quote_cmd)\&.
.fi
.PP
 
.PP
Definition at line \fB946\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.GetVSMacroEnv ( self,  base_to_build = \fRNone\fP,  config = \fRNone\fP)"

.PP
.nf
Get a dict of variables mapping internal VS macro names to their gyp
equivalents\&.
.fi
.PP
 
.PP
Definition at line \fB254\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.HasExplicitAsmRules ( self,  spec)"

.PP
.nf
Determine if there's an explicit rule for asm files\&. When there isn't we
need to generate implicit rules to assemble \&.asm files\&.
.fi
.PP
 
.PP
Definition at line \fB981\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.HasExplicitIdlRulesOrActions ( self,  spec)"

.PP
.nf
Determine if there's an explicit rule or action for idl files\&. When
there isn't we need to generate implicit rules to build MIDL \&.idl files\&.
.fi
.PP
 
.PP
Definition at line \fB974\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.IsEmbedManifest ( self,  config)"

.PP
.nf
Returns whether manifest should be linked into binary\&.
.fi
.PP
 
.PP
Definition at line \fB893\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.IsLinkIncremental ( self,  config)"

.PP
.nf
Returns whether the target should be linked incrementally\&.
.fi
.PP
 
.PP
Definition at line \fB901\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.IsUseLibraryDependencyInputs ( self,  config)"

.PP
.nf
Returns whether the target should be linked via Use Library Dependency
Inputs (using component \&.objs of a given \&.lib)\&.
.fi
.PP
 
.PP
Definition at line \fB886\fP of file \fBmsvs_emulation\&.py\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.msvs_cygwin_dirs"

.PP
Definition at line \fB225\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.RuleShellFlags = collections\&.namedtuple('RuleShellFlags', ['cygwin', 'quote'])\fR [static]\fP"

.PP
Definition at line \fB944\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.spec"

.PP
Definition at line \fB206\fP of file \fBmsvs_emulation\&.py\fP\&.
.SS "gyp\&.msvs_emulation\&.MsvsSettings\&.vs_version"

.PP
Definition at line \fB207\fP of file \fBmsvs_emulation\&.py\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
