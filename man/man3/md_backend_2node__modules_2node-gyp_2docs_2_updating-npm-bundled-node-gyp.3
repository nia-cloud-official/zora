.TH "md_backend_2node__modules_2node-gyp_2docs_2_updating-npm-bundled-node-gyp" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2node-gyp_2docs_2_updating-npm-bundled-node-gyp \- Updating the npm-bundled version of node-gyp 
.PP
 \fRMany issues\fP are opened by users who are not running a \fRcurrent version of node-gyp\fP\&.
.PP
\fRnpm\fP bundles its own, internal, copy of \fRnode-gyp\fP\&. This internal copy is independent of any globally installed copy of node-gyp that may have been installed via \fRnpm install -g node-gyp\fP\&.
.PP
Generally, npm's library files are installed inside your global 'node_modules', where npm is installed (run \fRnpm prefix\fP and add \fRlib/node_modules\fP, or just \fRnode_modules\fP for Windows)\&. There are some exceptions to this\&. Inside this global \fRnode_modules/\fP there will be an \fRnpm/\fP directory and inside this you'll find a \fRnode_modules/node-gyp/\fP directory\&. So it may look something like \fR/usr/local/lib/node_modules/npm/node_modules/node-gyp/\fP\&. This is the version of node-gyp that ships with npm\&.
.PP
When you install a \fInew\fP version of node-gyp outside of npm, it'll go into your global node_modules, but not under the \fRnpm/node_modules\fP\&. So that may look like \fR/usr/local/lib/node_modules/node-gyp/\fP\&. It'll have the \fRnode-gyp\fP executable linked into your \fRPATH\fP so running \fRnode-gyp\fP will use this version\&.
.PP
The catch is that npm won't use this version unless you tell it to, it'll keep on using the one you have installed\&. You need to instruct it to by setting the \fRnode_gyp\fP config variable (which goes into your \fR~/\&.npmrc\fP)\&. You do this by running the \fRnpm config set\fP command as below\&. Then npm will use the command in the path you supply whenever it needs to build a native addon\&.
.PP
\fBImportant\fP: You also need to remember to unset this when you upgrade npm with a newer version of node-gyp, or you have to manually keep your globally installed node-gyp to date\&. See 'Undo' below\&.
.SH "Linux and macOS"
.PP
.PP
.nf
npm install \-\-global node\-gyp@latest
npm config set node_gyp $(npm prefix \-g)/lib/node_modules/node\-gyp/bin/node\-gyp\&.js
.fi
.PP
.PP
\fRsudo\fP may be required for the first command if you get a permission error\&.
.SH "Windows"
.PP
.SS "Windows Command Prompt"
.PP
.nf
npm install \-\-global node\-gyp@latest
for /f "delims=" %P in ('npm prefix \-g') do npm config set node_gyp "%P\\node_modules\\node\-gyp\\bin\\node\-gyp\&.js"
.fi
.PP
.SS "Powershell"
.PP
.nf
npm install \-\-global node\-gyp@latest
npm prefix \-g | % {npm config set node_gyp "$_\\node_modules\\node\-gyp\\bin\\node\-gyp\&.js"}
.fi
.PP
.SH "Undo"
.PP
\fBBeware\fP if you don't unset the \fRnode_gyp\fP config option, npm will continue to use the globally installed version of node-gyp rather than the one it ships with, which may end up being newer\&.
.PP
.PP
.nf
npm config delete node_gyp
npm uninstall \-\-global node\-gyp
.fi
.PP
 
