.TH "pretty_vcproj" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
pretty_vcproj
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBCmpNode\fP"
.br
.ti -1c
.RI "class \fBCmpTuple\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBcmp\fP (x, y)"
.br
.ti -1c
.RI "\fBPrettyPrintNode\fP (node, indent=0)"
.br
.ti -1c
.RI "\fBFlattenFilter\fP (node)"
.br
.ti -1c
.RI "\fBFixFilenames\fP (filenames, current_directory)"
.br
.ti -1c
.RI "\fBAbsoluteNode\fP (node)"
.br
.ti -1c
.RI "\fBCleanupVcproj\fP (node)"
.br
.ti -1c
.RI "\fBGetConfiguationNodes\fP (vcproj)"
.br
.ti -1c
.RI "\fBGetChildrenVsprops\fP (filename)"
.br
.ti -1c
.RI "\fBSeekToNode\fP (node1, child2)"
.br
.ti -1c
.RI "\fBMergeAttributes\fP (node1, node2)"
.br
.ti -1c
.RI "\fBMergeProperties\fP (node1, node2)"
.br
.ti -1c
.RI "\fBmain\fP (argv)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBARGUMENTS\fP = None"
.br
.ti -1c
.RI "\fBREPLACEMENTS\fP = dict()"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
Make the format of a vcproj really pretty\&.

   This script normalize and sort an xml\&. It also fetches all the properties
   inside linked vsprops and include them explicitly in the vcproj\&.

   It outputs the resulting xml to stdout\&.

.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "pretty_vcproj\&.AbsoluteNode ( node)"

.PP
.nf
Makes all the properties we know about in this node absolute\&.
.fi
.PP
 
.PP
Definition at line \fB132\fP of file \fBpretty_vcproj\&.py\fP\&.
.SS "pretty_vcproj\&.CleanupVcproj ( node)"

.PP
.nf
For each sub node, we call recursively this function\&.
.fi
.PP
 
.PP
Definition at line \fB152\fP of file \fBpretty_vcproj\&.py\fP\&.
.SS "pretty_vcproj\&.cmp ( x,  y)"

.PP
Definition at line \fB27\fP of file \fBpretty_vcproj\&.py\fP\&.
.SS "pretty_vcproj\&.FixFilenames ( filenames,  current_directory)"

.PP
Definition at line \fB117\fP of file \fBpretty_vcproj\&.py\fP\&.
.SS "pretty_vcproj\&.FlattenFilter ( node)"

.PP
.nf
Returns a list of all the node and sub nodes\&.
.fi
.PP
 
.PP
Definition at line \fB100\fP of file \fBpretty_vcproj\&.py\fP\&.
.SS "pretty_vcproj\&.GetChildrenVsprops ( filename)"

.PP
Definition at line \fB222\fP of file \fBpretty_vcproj\&.py\fP\&.
.SS "pretty_vcproj\&.GetConfiguationNodes ( vcproj)"

.PP
Definition at line \fB210\fP of file \fBpretty_vcproj\&.py\fP\&.
.SS "pretty_vcproj\&.main ( argv)"

.PP
.nf
Main function of this vcproj prettifier\&.
.fi
.PP
 
.PP
Definition at line \fB287\fP of file \fBpretty_vcproj\&.py\fP\&.
.SS "pretty_vcproj\&.MergeAttributes ( node1,  node2)"

.PP
Definition at line \fB252\fP of file \fBpretty_vcproj\&.py\fP\&.
.SS "pretty_vcproj\&.MergeProperties ( node1,  node2)"

.PP
Definition at line \fB277\fP of file \fBpretty_vcproj\&.py\fP\&.
.SS "pretty_vcproj\&.PrettyPrintNode ( node,  indent = \fR0\fP)"

.PP
Definition at line \fB66\fP of file \fBpretty_vcproj\&.py\fP\&.
.SS "pretty_vcproj\&.SeekToNode ( node1,  child2)"

.PP
Definition at line \fB230\fP of file \fBpretty_vcproj\&.py\fP\&.
.SH "Variable Documentation"
.PP 
.SS "pretty_vcproj\&.ARGUMENTS = None"

.PP
Definition at line \fB23\fP of file \fBpretty_vcproj\&.py\fP\&.
.SS "pretty_vcproj\&.REPLACEMENTS = dict()"

.PP
Definition at line \fB24\fP of file \fBpretty_vcproj\&.py\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
