.TH "md_backend_2node__modules_2path-to-regexp_2_readme" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2path-to-regexp_2_readme \- Path-to-RegExp 
.PP
 Turn an Express-style path string such as \fR/user/:name\fP into a regular expression\&.
.PP
\fBNote:\fP This is a legacy branch\&. You should upgrade to \fR1\&.x\fP\&.
.SH "Usage"
.PP
.PP
.nf
var pathToRegexp = require('path\-to\-regexp');
.fi
.PP
.SS "pathToRegexp(path, keys, options)"
.IP "\(bu" 2
\fBpath\fP A string in the express format, an array of such strings, or a regular expression
.IP "\(bu" 2
\fBkeys\fP An array to be populated with the keys present in the url\&. Once the function completes, this will be an array of strings\&.
.IP "\(bu" 2
\fBoptions\fP
.IP "  \(bu" 4
\fBoptions\&.sensitive\fP Defaults to false, set this to true to make routes case sensitive
.IP "  \(bu" 4
\fBoptions\&.strict\fP Defaults to false, set this to true to make the trailing slash matter\&.
.IP "  \(bu" 4
\fBoptions\&.end\fP Defaults to true, set this to false to only match the prefix of the URL\&.
.PP

.PP
.PP
.PP
.nf
var keys = [];
var exp = pathToRegexp('/foo/:bar', keys);
//keys = ['bar']
//exp = /^\\/foo\\/(?:([^\\/]+?))\\/?$/i
.fi
.PP
.SH "Live Demo"
.PP
You can see a live demo of this library in use at \fRexpress-route-tester\fP\&.
.SH "License"
.PP
MIT 
