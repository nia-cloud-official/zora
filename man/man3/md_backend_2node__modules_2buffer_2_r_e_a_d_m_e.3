.TH "md_backend_2node__modules_2buffer_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2buffer_2_r_e_a_d_m_e \- buffer \fR\fP \fR\fP \fR\fP \fR\fP 
.PP

.SS "The buffer module from \fRnode\&.js\fP, for the browser\&."
\fR\fP.PP
With \fRbrowserify\fP, simply `require('buffer')\fRor use the\fPBuffer` global and you will get this module\&.
.PP
The goal is to provide an API that is 100% identical to \fRnode's Buffer API\fP\&. Read the \fRofficial docs\fP for the full list of properties, instance methods, and class methods that are supported\&.
.SH "features"
.PP
.IP "\(bu" 2
Manipulate binary data like a boss, in all browsers!
.IP "\(bu" 2
Super fast\&. Backed by Typed Arrays (\fRUint8Array\fP/\fRArrayBuffer\fP, not \fRObject\fP)
.IP "\(bu" 2
Extremely small bundle size (\fB6\&.75KB minified + gzipped\fP, 51\&.9KB with comments)
.IP "\(bu" 2
Excellent browser support (Chrome, Firefox, Edge, Safari 9+, IE 11, iOS 9+, Android, etc\&.)
.IP "\(bu" 2
Preserves Node API exactly, with one minor difference (see below)
.IP "\(bu" 2
Square-bracket \fRbuf[4]\fP notation works!
.IP "\(bu" 2
Does not modify any browser prototypes or put anything on \fRwindow\fP
.IP "\(bu" 2
Comprehensive test suite (including all buffer tests from node\&.js core)
.PP
.SH "install"
.PP
To use this module directly (without browserify), install it:
.PP
.PP
.nf
npm install buffer
.fi
.PP
.PP
This module was previously called \fBnative-buffer-browserify\fP, but please use \fBbuffer\fP from now on\&.
.PP
If you do not use a bundler, you can use the \fRstandalone script\fP\&.
.SH "usage"
.PP
The module's API is identical to node's \fRBuffer\fP API\&. Read the \fRofficial docs\fP for the full list of properties, instance methods, and class methods that are supported\&.
.PP
As mentioned above, `require('buffer')\fRor use the\fPBuffer\fRglobal with [browserify](http://browserify.org) and this module will automatically be included in your bundle\&. Almost any npm module will work in the browser, even if it assumes that the node\fPBuffer` API will be available\&.
.PP
To depend on this module explicitly (without browserify), require it like this:
.PP
.PP
.nf
var Buffer = require('buffer/')\&.Buffer  // note: the trailing slash is important!
.fi
.PP
.PP
To require this module explicitly, use `require('buffer/')\fRwhich tells the node\&.js module lookup algorithm (also used by browserify) to use the **npm module** named\fPbuffer\fR instead of the **node\&.js core** module named\fPbuffer`!
.SH "how does it work?"
.PP
The Buffer constructor returns instances of \fRUint8Array\fP that have their prototype changed to \fRBuffer\&.prototype\fP\&. Furthermore, \fRBuffer\fP is a subclass of \fRUint8Array\fP, so the returned instances will have all the node \fRBuffer\fP methods and the \fRUint8Array\fP methods\&. Square bracket notation works as expected -- it returns a single octet\&.
.PP
The \fRUint8Array\fP prototype remains unmodified\&.
.SH "tracking the latest node api"
.PP
This module tracks the Buffer API in the latest (unstable) version of node\&.js\&. The Buffer API is considered \fBstable\fP in the \fRnode stability index\fP, so it is unlikely that there will ever be breaking changes\&. Nonetheless, when/if the Buffer API changes in node, this module's API will change accordingly\&.
.SH "related packages"
.PP
.IP "\(bu" 2
\fR\fRbuffer-reverse\fP\fP - Reverse a buffer
.IP "\(bu" 2
\fR\fRbuffer-xor\fP\fP - Bitwise xor a buffer
.IP "\(bu" 2
\fR\fRis-buffer\fP\fP - Determine if an object is a Buffer without including the whole \fRBuffer\fP package
.PP
.SH "conversion packages"
.PP
.SS "convert typed array to buffer"
Use \fR\fRtypedarray-to-buffer\fP\fP to convert any kind of typed array to a \fRBuffer\fP\&. Does not perform a copy, so it's super fast\&.
.SS "convert buffer to typed array"
\fRBuffer\fP is a subclass of \fRUint8Array\fP (which is a typed array)\&. So there is no need to explicitly convert to typed array\&. Just use the buffer as a \fRUint8Array\fP\&.
.SS "convert blob to buffer"
Use \fR\fRblob-to-buffer\fP\fP to convert a \fRBlob\fP to a \fRBuffer\fP\&.
.SS "convert buffer to blob"
To convert a \fRBuffer\fP to a \fRBlob\fP, use the \fRBlob\fP constructor:
.PP
.PP
.nf
var blob = new Blob([ buffer ])
.fi
.PP
.PP
Optionally, specify a mimetype:
.PP
.PP
.nf
var blob = new Blob([ buffer ], { type: 'text/html' })
.fi
.PP
.SS "convert arraybuffer to buffer"
To convert an \fRArrayBuffer\fP to a \fRBuffer\fP, use the \fRBuffer\&.from\fP function\&. Does not perform a copy, so it's super fast\&.
.PP
.PP
.nf
var buffer = Buffer\&.from(arrayBuffer)
.fi
.PP
.SS "convert buffer to arraybuffer"
To convert a \fRBuffer\fP to an \fRArrayBuffer\fP, use the \fR\&.buffer\fP property (which is present on all \fRUint8Array\fP objects):
.PP
.PP
.nf
var arrayBuffer = buffer\&.buffer\&.slice(
  buffer\&.byteOffset, buffer\&.byteOffset + buffer\&.byteLength
)
.fi
.PP
.PP
Alternatively, use the \fR\fRto-arraybuffer\fP\fP module\&.
.SH "performance"
.PP
See perf tests in \fR/perf\fP\&.
.PP
\fRBrowserBuffer\fP is the browser \fRbuffer\fP module (this repo)\&. \fRUint8Array\fP is included as a sanity check (since \fRBrowserBuffer\fP uses \fRUint8Array\fP under the hood, \fRUint8Array\fP will always be at least a bit faster)\&. Finally, \fRNodeBuffer\fP is the node\&.js buffer module, which is included to compare against\&.
.PP
NOTE: Performance has improved since these benchmarks were taken\&. PR welcome to update the README\&.
.SS "Chrome 38"
Method   Operations   Accuracy   Sampled   Fastest    BrowserBuffer::bracket-notation   11,457,464 ops/sec   ±0\&.86%   66   ✓    Uint8Array::bracket-notation   10,824,332 ops/sec   ±0\&.74%   65   | | | | | | BrowserBuffer::concat | 450,532 ops/sec | ±0\&.76% | 68 | | | Uint8Array::concat | 1,368,911 ops/sec | ±1\&.50% | 62 | ✓ | | | | | | | BrowserBuffer::copy(16000) | 903,001 ops/sec | ±0\&.96% | 67 | | | Uint8Array::copy(16000) | 1,422,441 ops/sec | ±1\&.04% | 66 | ✓ | | | | | | | BrowserBuffer::copy(16) | 11,431,358 ops/sec | ±0\&.46% | 69 | | | Uint8Array::copy(16) | 13,944,163 ops/sec | ±1\&.12% | 68 | ✓ | | | | | | | BrowserBuffer::new(16000) | 106,329 ops/sec | ±6\&.70% | 44 | | | Uint8Array::new(16000) | 131,001 ops/sec | ±2\&.85% | 31 | ✓ | | | | | | | BrowserBuffer::new(16) | 1,554,491 ops/sec | ±1\&.60% | 65 | | | Uint8Array::new(16) | 6,623,930 ops/sec | ±1\&.66% | 65 | ✓ | | | | | | | BrowserBuffer::readDoubleBE | 112,830 ops/sec | ±0\&.51% | 69 | ✓ | | DataView::getFloat64 | 93,500 ops/sec | ±0\&.57% | 68 | | | | | | | | BrowserBuffer::readFloatBE | 146,678 ops/sec | ±0\&.95% | 68 | ✓ | | DataView::getFloat32 | 99,311 ops/sec | ±0\&.41% | 67 | | | | | | | | BrowserBuffer::readUInt32LE | 843,214 ops/sec | ±0\&.70% | 69 | ✓ | | DataView::getUint32 | 103,024 ops/sec | ±0\&.64% | 67 | | | | | | | | BrowserBuffer::slice | 1,013,941 ops/sec | ±0\&.75% | 67 | | | Uint8Array::subarray | 1,903,928 ops/sec | ±0\&.53% | 67 | ✓ | | | | | | | BrowserBuffer::writeFloatBE | 61,387 ops/sec | ±0\&.90% | 67 | | | DataView::setFloat32 | 141,249 ops/sec | ±0\&.40% | 66 | ✓ |
.SS "Firefox 33"
Method   Operations   Accuracy   Sampled   Fastest    BrowserBuffer::bracket-notation   20,800,421 ops/sec   ±1\&.84%   60   Uint8Array::bracket-notation   20,826,235 ops/sec   ±2\&.02%   61   ✓   | | | | | | BrowserBuffer::concat | 153,076 ops/sec | ±2\&.32% | 61 | | | Uint8Array::concat | 1,255,674 ops/sec | ±8\&.65% | 52 | ✓ | | | | | | | BrowserBuffer::copy(16000) | 1,105,312 ops/sec | ±1\&.16% | 63 | | | Uint8Array::copy(16000) | 1,615,911 ops/sec | ±0\&.55% | 66 | ✓ | | | | | | | BrowserBuffer::copy(16) | 16,357,599 ops/sec | ±0\&.73% | 68 | | | Uint8Array::copy(16) | 31,436,281 ops/sec | ±1\&.05% | 68 | ✓ | | | | | | | BrowserBuffer::new(16000) | 52,995 ops/sec | ±6\&.01% | 35 | | | Uint8Array::new(16000) | 87,686 ops/sec | ±5\&.68% | 45 | ✓ | | | | | | | BrowserBuffer::new(16) | 252,031 ops/sec | ±1\&.61% | 66 | | | Uint8Array::new(16) | 8,477,026 ops/sec | ±0\&.49% | 68 | ✓ | | | | | | | BrowserBuffer::readDoubleBE | 99,871 ops/sec | ±0\&.41% | 69 | | | DataView::getFloat64 | 285,663 ops/sec | ±0\&.70% | 68 | ✓ | | | | | | | BrowserBuffer::readFloatBE | 115,540 ops/sec | ±0\&.42% | 69 | | | DataView::getFloat32 | 288,722 ops/sec | ±0\&.82% | 68 | ✓ | | | | | | | BrowserBuffer::readUInt32LE | 633,926 ops/sec | ±1\&.08% | 67 | ✓ | | DataView::getUint32 | 294,808 ops/sec | ±0\&.79% | 64 | | | | | | | | BrowserBuffer::slice | 349,425 ops/sec | ±0\&.46% | 69 | | | Uint8Array::subarray | 5,965,819 ops/sec | ±0\&.60% | 65 | ✓ | | | | | | | BrowserBuffer::writeFloatBE | 59,980 ops/sec | ±0\&.41% | 67 | | | DataView::setFloat32 | 317,634 ops/sec | ±0\&.63% | 68 | ✓ |
.SS "Safari 8"
Method   Operations   Accuracy   Sampled   Fastest    BrowserBuffer::bracket-notation   10,279,729 ops/sec   ±2\&.25%   56   ✓    Uint8Array::bracket-notation   10,030,767 ops/sec   ±2\&.23%   59   | | | | | | BrowserBuffer::concat | 144,138 ops/sec | ±1\&.38% | 65 | | | Uint8Array::concat | 4,950,764 ops/sec | ±1\&.70% | 63 | ✓ | | | | | | | BrowserBuffer::copy(16000) | 1,058,548 ops/sec | ±1\&.51% | 64 | | | Uint8Array::copy(16000) | 1,409,666 ops/sec | ±1\&.17% | 65 | ✓ | | | | | | | BrowserBuffer::copy(16) | 6,282,529 ops/sec | ±1\&.88% | 58 | | | Uint8Array::copy(16) | 11,907,128 ops/sec | ±2\&.87% | 58 | ✓ | | | | | | | BrowserBuffer::new(16000) | 101,663 ops/sec | ±3\&.89% | 57 | | | Uint8Array::new(16000) | 22,050,818 ops/sec | ±6\&.51% | 46 | ✓ | | | | | | | BrowserBuffer::new(16) | 176,072 ops/sec | ±2\&.13% | 64 | | | Uint8Array::new(16) | 24,385,731 ops/sec | ±5\&.01% | 51 | ✓ | | | | | | | BrowserBuffer::readDoubleBE | 41,341 ops/sec | ±1\&.06% | 67 | | | DataView::getFloat64 | 322,280 ops/sec | ±0\&.84% | 68 | ✓ | | | | | | | BrowserBuffer::readFloatBE | 46,141 ops/sec | ±1\&.06% | 65 | | | DataView::getFloat32 | 337,025 ops/sec | ±0\&.43% | 69 | ✓ | | | | | | | BrowserBuffer::readUInt32LE | 151,551 ops/sec | ±1\&.02% | 66 | | | DataView::getUint32 | 308,278 ops/sec | ±0\&.94% | 67 | ✓ | | | | | | | BrowserBuffer::slice | 197,365 ops/sec | ±0\&.95% | 66 | | | Uint8Array::subarray | 9,558,024 ops/sec | ±3\&.08% | 58 | ✓ | | | | | | | BrowserBuffer::writeFloatBE | 17,518 ops/sec | ±1\&.03% | 63 | | | DataView::setFloat32 | 319,751 ops/sec | ±0\&.48% | 68 | ✓ |
.SS "Node 0\&.11\&.14"
Method   Operations   Accuracy   Sampled   Fastest    BrowserBuffer::bracket-notation   10,489,828 ops/sec   ±3\&.25%   90   Uint8Array::bracket-notation   10,534,884 ops/sec   ±0\&.81%   92   ✓    NodeBuffer::bracket-notation   10,389,910 ops/sec   ±0\&.97%   87   | | | | | | BrowserBuffer::concat | 487,830 ops/sec | ±2\&.58% | 88 | | | Uint8Array::concat | 1,814,327 ops/sec | ±1\&.28% | 88 | ✓ | | NodeBuffer::concat | 1,636,523 ops/sec | ±1\&.88% | 73 | | | | | | | | BrowserBuffer::copy(16000) | 1,073,665 ops/sec | ±0\&.77% | 90 | | | Uint8Array::copy(16000) | 1,348,517 ops/sec | ±0\&.84% | 89 | ✓ | | NodeBuffer::copy(16000) | 1,289,533 ops/sec | ±0\&.82% | 93 | | | | | | | | BrowserBuffer::copy(16) | 12,782,706 ops/sec | ±0\&.74% | 85 | | | Uint8Array::copy(16) | 14,180,427 ops/sec | ±0\&.93% | 92 | ✓ | | NodeBuffer::copy(16) | 11,083,134 ops/sec | ±1\&.06% | 89 | | | | | | | | BrowserBuffer::new(16000) | 141,678 ops/sec | ±3\&.30% | 67 | | | Uint8Array::new(16000) | 161,491 ops/sec | ±2\&.96% | 60 | | | NodeBuffer::new(16000) | 292,699 ops/sec | ±3\&.20% | 55 | ✓ | | | | | | | BrowserBuffer::new(16) | 1,655,466 ops/sec | ±2\&.41% | 82 | | | Uint8Array::new(16) | 14,399,926 ops/sec | ±0\&.91% | 94 | ✓ | | NodeBuffer::new(16) | 3,894,696 ops/sec | ±0\&.88% | 92 | | | | | | | | BrowserBuffer::readDoubleBE | 109,582 ops/sec | ±0\&.75% | 93 | ✓ | | DataView::getFloat64 | 91,235 ops/sec | ±0\&.81% | 90 | | | NodeBuffer::readDoubleBE | 88,593 ops/sec | ±0\&.96% | 81 | | | | | | | | BrowserBuffer::readFloatBE | 139,854 ops/sec | ±1\&.03% | 85 | ✓ | | DataView::getFloat32 | 98,744 ops/sec | ±0\&.80% | 89 | | | NodeBuffer::readFloatBE | 92,769 ops/sec | ±0\&.94% | 93 | | | | | | | | BrowserBuffer::readUInt32LE | 710,861 ops/sec | ±0\&.82% | 92 | | | DataView::getUint32 | 117,893 ops/sec | ±0\&.84% | 91 | | | NodeBuffer::readUInt32LE | 851,412 ops/sec | ±0\&.72% | 93 | ✓ | | | | | | | BrowserBuffer::slice | 1,673,877 ops/sec | ±0\&.73% | 94 | | | Uint8Array::subarray | 6,919,243 ops/sec | ±0\&.67% | 90 | ✓ | | NodeBuffer::slice | 4,617,604 ops/sec | ±0\&.79% | 93 | | | | | | | | BrowserBuffer::writeFloatBE | 66,011 ops/sec | ±0\&.75% | 93 | | | DataView::setFloat32 | 127,760 ops/sec | ±0\&.72% | 93 | ✓ | | NodeBuffer::writeFloatBE | 103,352 ops/sec | ±0\&.83% | 93 | |
.SS "iojs 1\&.8\&.1"
Method   Operations   Accuracy   Sampled   Fastest    BrowserBuffer::bracket-notation   10,990,488 ops/sec   ±1\&.11%   91   Uint8Array::bracket-notation   11,268,757 ops/sec   ±0\&.65%   97   NodeBuffer::bracket-notation   11,353,260 ops/sec   ±0\&.83%   94   ✓   | | | | | | BrowserBuffer::concat | 378,954 ops/sec | ±0\&.74% | 94 | | | Uint8Array::concat | 1,358,288 ops/sec | ±0\&.97% | 87 | | | NodeBuffer::concat | 1,934,050 ops/sec | ±1\&.11% | 78 | ✓ | | | | | | | BrowserBuffer::copy(16000) | 894,538 ops/sec | ±0\&.56% | 84 | | | Uint8Array::copy(16000) | 1,442,656 ops/sec | ±0\&.71% | 96 | | | NodeBuffer::copy(16000) | 1,457,898 ops/sec | ±0\&.53% | 92 | ✓ | | | | | | | BrowserBuffer::copy(16) | 12,870,457 ops/sec | ±0\&.67% | 95 | | | Uint8Array::copy(16) | 16,643,989 ops/sec | ±0\&.61% | 93 | ✓ | | NodeBuffer::copy(16) | 14,885,848 ops/sec | ±0\&.74% | 94 | | | | | | | | BrowserBuffer::new(16000) | 109,264 ops/sec | ±4\&.21% | 63 | | | Uint8Array::new(16000) | 138,916 ops/sec | ±1\&.87% | 61 | | | NodeBuffer::new(16000) | 281,449 ops/sec | ±3\&.58% | 51 | ✓ | | | | | | | BrowserBuffer::new(16) | 1,362,935 ops/sec | ±0\&.56% | 99 | | | Uint8Array::new(16) | 6,193,090 ops/sec | ±0\&.64% | 95 | ✓ | | NodeBuffer::new(16) | 4,745,425 ops/sec | ±1\&.56% | 90 | | | | | | | | BrowserBuffer::readDoubleBE | 118,127 ops/sec | ±0\&.59% | 93 | ✓ | | DataView::getFloat64 | 107,332 ops/sec | ±0\&.65% | 91 | | | NodeBuffer::readDoubleBE | 116,274 ops/sec | ±0\&.94% | 95 | | | | | | | | BrowserBuffer::readFloatBE | 150,326 ops/sec | ±0\&.58% | 95 | ✓ | | DataView::getFloat32 | 110,541 ops/sec | ±0\&.57% | 98 | | | NodeBuffer::readFloatBE | 121,599 ops/sec | ±0\&.60% | 87 | | | | | | | | BrowserBuffer::readUInt32LE | 814,147 ops/sec | ±0\&.62% | 93 | | | DataView::getUint32 | 137,592 ops/sec | ±0\&.64% | 90 | | | NodeBuffer::readUInt32LE | 931,650 ops/sec | ±0\&.71% | 96 | ✓ | | | | | | | BrowserBuffer::slice | 878,590 ops/sec | ±0\&.68% | 93 | | | Uint8Array::subarray | 2,843,308 ops/sec | ±1\&.02% | 90 | | | NodeBuffer::slice | 4,998,316 ops/sec | ±0\&.68% | 90 | ✓ | | | | | | | BrowserBuffer::writeFloatBE | 65,927 ops/sec | ±0\&.74% | 93 | | | DataView::setFloat32 | 139,823 ops/sec | ±0\&.97% | 89 | ✓ | | NodeBuffer::writeFloatBE | 135,763 ops/sec | ±0\&.65% | 96 | | | | | | |
.SH "Testing the project"
.PP
First, install the project: 
.PP
.nf
npm install

.fi
.PP
 Then, to run tests in Node\&.js, run: 
.PP
.nf
npm run test-node

.fi
.PP
 To test locally in a browser, you can run: 
.PP
.nf
npm run test-browser-es5-local # For ES5 browsers that don't support ES6
npm run test-browser-es6-local # For ES6 compliant browsers

.fi
.PP
 This will print out a URL that you can then open in a browser to run the tests, using \fRairtap\fP\&.
.PP
To run automated browser tests using Saucelabs, ensure that your \fRSAUCE_USERNAME\fP and \fRSAUCE_ACCESS_KEY\fP environment variables are set, then run: 
.PP
.nf
npm test

.fi
.PP
 This is what's run in Travis, to check against various browsers\&. The list of browsers is kept in the \fRbin/airtap-es5\&.yml\fP and \fRbin/airtap-es6\&.yml\fP files\&.
.SH "JavaScript Standard Style"
.PP
This module uses \fRJavaScript Standard Style\fP\&.
.PP
\fR\fP.PP
To test that the code conforms to the style, \fRnpm install\fP and run: 
.PP
.nf
\&./node_modules/\&.bin/standard

.fi
.PP
 
.SH "credit"
.PP
This was originally forked from \fRbuffer-browserify\fP\&.
.SH "Security Policies and Procedures"
.PP
The \fRbuffer\fP team and community take all security bugs in \fRbuffer\fP seriously\&. Please see our \fRsecurity policies and procedures\fP document to learn how to report issues\&.
.SH "license"
.PP
MIT\&. Copyright (C) \fRFeross Aboukhadijeh\fP, and other contributors\&. Originally forked from an MIT-licensed module by Romain Beauxis\&. 
