.TH "md_backend_2node__modules_2minipass-pipeline_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2minipass-pipeline_2_r_e_a_d_m_e \- minipass-pipeline 
.PP
 Create a pipeline of streams using Minipass\&.
.PP
Calls \fR\&.pipe()\fP on all the streams in the list\&. Returns a stream where writes got to the first pipe in the chain, and reads are from the last\&.
.PP
Errors are proxied along the chain and emitted on the Pipeline stream\&.
.SH "USAGE"
.PP
.PP
.nf
const Pipeline = require('minipass\-pipeline')

// the list of streams to pipeline together,
// a bit like `input | transform | output` in bash
const p = new Pipeline(input, transform, output)

p\&.write('foo') // writes to input
p\&.on('data', chunk => doSomething()) // reads from output stream

// less contrived example (but still pretty contrived)\&.\&.\&.
const decode = new bunzipDecoder()
const unpack = tar\&.extract({ cwd: 'target\-dir' })
const tbz = new Pipeline(decode, unpack)

fs\&.createReadStream('archive\&.tbz')\&.pipe(tbz)

// specify any minipass options if you like, as the first argument
// it'll only try to pipeline event emitters with a \&.pipe() method
const p = new Pipeline({ objectMode: true }, input, transform, output)

// If you don't know the things to pipe in right away, that's fine\&.
// use p\&.push(stream) to add to the end, or p\&.unshift(stream) to the front
const databaseDecoderStreamDoohickey = (connectionInfo) => {
  const p = new Pipeline()
  logIntoDatabase(connectionInfo)\&.then(connection => {
    initializeDecoderRing(connectionInfo)\&.then(decoderRing => {
      p\&.push(connection, decoderRing)
      getUpstreamSource(upstream => {
        p\&.unshift(upstream)
      })
    })
  })
  // return to caller right away
  // emitted data will be upstream \-> connection \-> decoderRing pipeline
  return p
}
.fi
.PP
.PP
Pipeline is a \fRminipass\fP stream, so it's as synchronous as the streams it wraps\&. It will buffer data until there is a reader, but no longer, so make sure to attach your listeners before you pipe it somewhere else\&.
.SH "\fRnew Pipeline(opts = {}, \&.\&.\&.streams)\fP"
.PP
Create a new Pipeline with the specified Minipass options and any streams provided\&.
.SH "\fRpipeline\&.push(stream, \&.\&.\&.)\fP"
.PP
Attach one or more streams to the pipeline at the end (read) side of the pipe chain\&.
.SH "\fRpipeline\&.unshift(stream, \&.\&.\&.)\fP"
.PP
Attach one or more streams to the pipeline at the start (write) side of the pipe chain\&. 
