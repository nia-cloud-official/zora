.TH "backend/node_modules/node-gyp/gyp/pylib/gyp/generator/analyzer.py" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
backend/node_modules/node-gyp/gyp/pylib/gyp/generator/analyzer.py
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBgyp\&.generator\&.analyzer\&.Target\fP"
.br
.ti -1c
.RI "class \fBgyp\&.generator\&.analyzer\&.Config\fP"
.br
.ti -1c
.RI "class \fBgyp\&.generator\&.analyzer\&.TargetCalculator\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBgyp\fP"
.br
.ti -1c
.RI "namespace \fBgyp\&.generator\fP"
.br
.ti -1c
.RI "namespace \fBgyp\&.generator\&.analyzer\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._ToGypPath\fP (path)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._ResolveParent\fP (path, base_path_components)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._AddSources\fP (sources, base_path, base_path_components, result)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._ExtractSourcesFromAction\fP (action, base_path, base_path_components, results)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._ToLocalPath\fP (toplevel_dir, path)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._ExtractSources\fP (target, target_dict, toplevel_dir)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._WasBuildFileModified\fP (build_file, data, files, toplevel_dir)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._GetOrCreateTargetByName\fP (targets, target_name)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._DoesTargetTypeRequireBuild\fP (target_dict)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._GenerateTargets\fP (data, target_list, target_dicts, toplevel_dir, files, build_files)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._GetUnqualifiedToTargetMapping\fP (all_targets, to_find)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._DoesTargetDependOnMatchingTargets\fP (target)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._GetTargetsDependingOnMatchingTargets\fP (possible_targets)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._AddCompileTargets\fP (target, roots, add_if_no_ancestor, result)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._GetCompileTargets\fP (matching_targets, supplied_targets)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._WriteOutput\fP (params, **values)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._WasGypIncludeFileModified\fP (params, files)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._NamesNotIn\fP (names, mapping)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&._LookupTargets\fP (names, mapping)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&.CalculateVariables\fP (default_variables, params)"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&.GenerateOutput\fP (target_list, target_dicts, data, params)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "bool \fBgyp\&.generator\&.analyzer\&.debug\fP = False"
.br
.ti -1c
.RI "str \fBgyp\&.generator\&.analyzer\&.found_dependency_string\fP = 'Found dependency'"
.br
.ti -1c
.RI "str \fBgyp\&.generator\&.analyzer\&.no_dependency_string\fP = 'No dependencies'"
.br
.ti -1c
.RI "str \fBgyp\&.generator\&.analyzer\&.all_changed_string\fP = 'Found dependency (all)'"
.br
.ti -1c
.RI "int \fBgyp\&.generator\&.analyzer\&.MATCH_STATUS_MATCHES\fP = 1"
.br
.ti -1c
.RI "int \fBgyp\&.generator\&.analyzer\&.MATCH_STATUS_MATCHES_BY_DEPENDENCY\fP = 2"
.br
.ti -1c
.RI "int \fBgyp\&.generator\&.analyzer\&.MATCH_STATUS_DOESNT_MATCH\fP = 3"
.br
.ti -1c
.RI "int \fBgyp\&.generator\&.analyzer\&.MATCH_STATUS_TBD\fP = 4"
.br
.ti -1c
.RI "\fBgyp\&.generator\&.analyzer\&.generator_supports_multiple_toolsets\fP = \fBgyp\&.common\&.CrossCompileRequested\fP()"
.br
.ti -1c
.RI "bool \fBgyp\&.generator\&.analyzer\&.generator_wants_static_library_dependencies_adjusted\fP = False"
.br
.ti -1c
.RI "dict \fBgyp\&.generator\&.analyzer\&.generator_default_variables\fP = {}"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
