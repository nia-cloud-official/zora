.TH "md_backend_2node__modules_2type-is_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2type-is_2_r_e_a_d_m_e \- type-is 
.PP
 \fR\fP \fR\fP \fR\fP \fR\fP \fR\fP
.PP
Infer the content-type of a request\&.
.SS "Install"
This is a \fRNode\&.js\fP module available through the \fRnpm registry\fP\&. Installation is done using the \fR\fRnpm install\fP command\fP:
.PP
.PP
.nf
$ npm install type\-is
.fi
.PP
.SH "API"
.PP
.PP
.nf
var http = require('http')
var typeis = require('type\-is')

http\&.createServer(function (req, res) {
  var istext = typeis(req, ['text/*'])
  res\&.end('you ' + (istext ? 'sent' : 'did not send') + ' me text')
})
.fi
.PP
.SS "typeis(request, types)"
Checks if the \fRrequest\fP is one of the \fRtypes\fP\&. If the request has no body, even if there is a \fRContent-Type\fP header, then \fRnull\fP is returned\&. If the \fRContent-Type\fP header is invalid or does not matches any of the \fRtypes\fP, then \fRfalse\fP is returned\&. Otherwise, a string of the type that matched is returned\&.
.PP
The \fRrequest\fP argument is expected to be a Node\&.js HTTP request\&. The \fRtypes\fP argument is an array of type strings\&.
.PP
Each type in the \fRtypes\fP array can be one of the following:
.PP
.IP "\(bu" 2
A file extension name such as \fRjson\fP\&. This name will be returned if matched\&.
.IP "\(bu" 2
A mime type such as \fRapplication/json\fP\&.
.IP "\(bu" 2
A mime type with a wildcard such as \fR*/*\fP or \fR*/json\fP or \fRapplication/*\fP\&. The full mime type will be returned if matched\&.
.IP "\(bu" 2
A suffix such as \fR+json\fP\&. This can be combined with a wildcard such as \fR*/vnd+json\fP or \fRapplication/*+json\fP\&. The full mime type will be returned if matched\&.
.PP
.PP
Some examples to illustrate the inputs and returned value:
.PP
.PP
.nf
// req\&.headers\&.content\-type = 'application/json'

typeis(req, ['json']) // => 'json'
typeis(req, ['html', 'json']) // => 'json'
typeis(req, ['application/*']) // => 'application/json'
typeis(req, ['application/json']) // => 'application/json'

typeis(req, ['html']) // => false
.fi
.PP
.SS "typeis\&.hasBody(request)"
Returns a Boolean if the given \fRrequest\fP has a body, regardless of the \fRContent-Type\fP header\&.
.PP
Having a body has no relation to how large the body is (it may be 0 bytes)\&. This is similar to how file existence works\&. If a body does exist, then this indicates that there is data to read from the Node\&.js request stream\&.
.PP
.PP
.nf
if (typeis\&.hasBody(req)) {
  // read the body, since there is one

  req\&.on('data', function (chunk) {
    // \&.\&.\&.
  })
}
.fi
.PP
.SS "typeis\&.is(mediaType, types)"
Checks if the \fRmediaType\fP is one of the \fRtypes\fP\&. If the \fRmediaType\fP is invalid or does not matches any of the \fRtypes\fP, then \fRfalse\fP is returned\&. Otherwise, a string of the type that matched is returned\&.
.PP
The \fRmediaType\fP argument is expected to be a \fRmedia type\fP string\&. The \fRtypes\fP argument is an array of type strings\&.
.PP
Each type in the \fRtypes\fP array can be one of the following:
.PP
.IP "\(bu" 2
A file extension name such as \fRjson\fP\&. This name will be returned if matched\&.
.IP "\(bu" 2
A mime type such as \fRapplication/json\fP\&.
.IP "\(bu" 2
A mime type with a wildcard such as \fR*/*\fP or \fR*/json\fP or \fRapplication/*\fP\&. The full mime type will be returned if matched\&.
.IP "\(bu" 2
A suffix such as \fR+json\fP\&. This can be combined with a wildcard such as \fR*/vnd+json\fP or \fRapplication/*+json\fP\&. The full mime type will be returned if matched\&.
.PP
.PP
Some examples to illustrate the inputs and returned value:
.PP
.PP
.nf
var mediaType = 'application/json'

typeis\&.is(mediaType, ['json']) // => 'json'
typeis\&.is(mediaType, ['html', 'json']) // => 'json'
typeis\&.is(mediaType, ['application/*']) // => 'application/json'
typeis\&.is(mediaType, ['application/json']) // => 'application/json'

typeis\&.is(mediaType, ['html']) // => false
.fi
.PP
.SH "Examples"
.PP
.SS "Example body parser"
.PP
.nf
var express = require('express')
var typeis = require('type\-is')

var app = express()

app\&.use(function bodyParser (req, res, next) {
  if (!typeis\&.hasBody(req)) {
    return next()
  }

  switch (typeis(req, ['urlencoded', 'json', 'multipart'])) {
    case 'urlencoded':
      // parse urlencoded body
      throw new Error('implement urlencoded body parsing')
    case 'json':
      // parse json body
      throw new Error('implement json body parsing')
    case 'multipart':
      // parse multipart body
      throw new Error('implement multipart body parsing')
    default:
      // 415 error code
      res\&.statusCode = 415
      res\&.end()
      break
  }
})
.fi
.PP
.SH "License"
.PP
[MIT](LICENSE) 
