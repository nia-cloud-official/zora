.TH "md_backend_2node__modules_2has-unicode_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2has-unicode_2_r_e_a_d_m_e \- has-unicode 
.PP
Try to guess if your terminal supports unicode
.PP
.PP
.nf
var hasUnicode = require("has\-unicode")

if (hasUnicode()) {
  // the terminal probably has unicode support
}
.fi
.PP
 
.PP
.nf
var hasUnicode = require("has\-unicode")\&.tryHarder
hasUnicode(function(unicodeSupported) {
  if (unicodeSupported) {
    // the terminal probably has unicode support
  }
})

.fi
.PP
.SH "Detecting Unicode"
.PP
What we actually detect is UTF-8 support, as that's what Node itself supports\&. If you have a UTF-16 locale then you won't be detected as unicode capable\&.
.SS "Windows"
Since at least Windows 7, \fRcmd\fP and \fRpowershell\fP have been unicode capable, but unfortunately even then it's not guaranteed\&. In many localizations it still uses legacy code pages and there's no facility short of running programs or linking C++ that will let us detect this\&. As such, we report any Windows installation as NOT unicode capable, and recommend that you encourage your users to override this via config\&.
.SS "Unix Like Operating Systems"
We look at the environment variables \fRLC_ALL\fP, \fRLC_CTYPE\fP, and \fRLANG\fP in that order\&. For \fRLC_ALL\fP and \fRLANG\fP, it looks for \fR\&.UTF-8\fP in the value\&. For \fRLC_CTYPE\fP it looks to see if the value is \fRUTF-8\fP\&. This is sufficient for most POSIX systems\&. While locale data can be put in \fR/etc/locale\&.conf\fP as well, AFAIK it's always copied into the environment\&. 
