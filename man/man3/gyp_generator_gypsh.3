.TH "gyp.generator.gypsh" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gyp.generator.gypsh
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBGenerateOutput\fP (target_list, target_dicts, data, params)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "list \fB_generator_identity_variables\fP"
.br
.ti -1c
.RI "dict \fBgenerator_default_variables\fP = {}"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
gypsh output module

gypsh is a GYP shell\&.  It's not really a generator per se\&.  All it does is
fire up an interactive Python session with a few local variables set to the
variables passed to the generator\&.  Like gypd, it's intended as a debugging
aid, to facilitate the exploration of \&.gyp structures after being processed
by the input module\&.

The expected usage is 'gyp -f gypsh -D OS=desired_os'\&.

.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "gyp\&.generator\&.gypsh\&.GenerateOutput ( target_list,  target_dicts,  data,  params)"

.PP
Definition at line \fB42\fP of file \fBgypsh\&.py\fP\&.
.SH "Variable Documentation"
.PP 
.SS "list gyp\&.generator\&.gypsh\&._generator_identity_variables\fR [protected]\fP"
\fBInitial value:\fP
.nf
1 =  [
2     "EXECUTABLE_PREFIX",
3     "EXECUTABLE_SUFFIX",
4     "INTERMEDIATE_DIR",
5     "PRODUCT_DIR",
6     "RULE_INPUT_ROOT",
7     "RULE_INPUT_DIRNAME",
8     "RULE_INPUT_EXT",
9     "RULE_INPUT_NAME",
10     "RULE_INPUT_PATH",
11     "SHARED_INTERMEDIATE_DIR",
12 ]
.PP
.fi

.PP
Definition at line \fB23\fP of file \fBgypsh\&.py\fP\&.
.SS "dict gyp\&.generator\&.gypsh\&.generator_default_variables = {}"

.PP
Definition at line \fB36\fP of file \fBgypsh\&.py\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
