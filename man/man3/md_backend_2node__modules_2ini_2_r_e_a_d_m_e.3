.TH "md_backend_2node__modules_2ini_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2ini_2_r_e_a_d_m_e \- README 
.PP
An ini format parser and serializer for node\&.
.PP
Sections are treated as nested objects\&. Items before the first heading are saved on the object directly\&.
.SS "Usage"
Consider an ini-file \fRconfig\&.ini\fP that looks like this: 
.PP
.nf
; this comment is being ignored
scope = global

[database]
user = dbuser
password = dbpassword
database = use_this_database

[paths\&.default]
datadir = /var/lib/data
array[] = first value
array[] = second value
array[] = third value

.fi
.PP
 You can read, manipulate and write the ini-file like so: 
.PP
.nf
var fs = require('fs')
  , ini = require('ini')

var config = ini\&.parse(fs\&.readFileSync('\&./config\&.ini', 'utf-8'))

config\&.scope = 'local'
config\&.database\&.database = 'use_another_database'
config\&.paths\&.default\&.tmpdir = '/tmp'
delete config\&.paths\&.default\&.datadir
config\&.paths\&.default\&.array\&.push('fourth value')

fs\&.writeFileSync('\&./config_modified\&.ini', ini\&.stringify(config, { section: 'section' }))

.fi
.PP
 This will result in a file called \fRconfig_modified\&.ini\fP being written to the filesystem with the following content: 
.PP
.nf
[section]
scope=local
[section\&.database]
user=dbuser
password=dbpassword
database=use_another_database
[section\&.paths\&.default]
tmpdir=/tmp
array[]=first value
array[]=second value
array[]=third value
array[]=fourth value

.fi
.PP
.SS "API"
.SS "decode(inistring)"
Decode the ini-style formatted \fRinistring\fP into a nested object\&.
.SS "parse(inistring)"
Alias for \fRdecode(inistring)\fP
.SS "encode(object, [options])"
Encode the object \fRobject\fP into an ini-style formatted string\&. If the optional parameter \fRsection\fP is given, then all top-level properties of the object are put into this section and the \fRsection\fP-string is prepended to all sub-sections, see the usage example above\&.
.PP
The \fRoptions\fP object may contain the following:
.PP
.IP "\(bu" 2
\fRsection\fP A string which will be the first \fRsection\fP in the encoded ini data\&. Defaults to none\&.
.IP "\(bu" 2
\fRwhitespace\fP Boolean to specify whether to put whitespace around the \fR=\fP character\&. By default, whitespace is omitted, to be friendly to some persnickety old parsers that don't tolerate it well\&. But some find that it's more human-readable and pretty with the whitespace\&.
.PP
.PP
For backwards compatibility reasons, if a \fRstring\fP options is passed in, then it is assumed to be the \fRsection\fP value\&.
.SS "stringify(object, [options])"
Alias for \fRencode(object, [options])\fP
.SS "safe(val)"
Escapes the string \fRval\fP such that it is safe to be used as a key or value in an ini-file\&. Basically escapes quotes\&. For example 
.PP
.nf
ini\&.safe(''unsafe string'')

.fi
.PP
 would result in 
.PP
.nf
'\\'unsafe string\\''

.fi
.PP
 
.SS "unsafe(val)"
Unescapes the string \fRval\fP 
