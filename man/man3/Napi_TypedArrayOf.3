.TH "Napi::TypedArrayOf< T >" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Napi::TypedArrayOf< T >
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <napi\&.h>\fP
.PP
Inherits \fBNapi::TypedArray\fP\&.
.PP
Inherited by \fBNapi::Buffer< T >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTypedArrayOf\fP ()"
.br
.RI "Creates a new \fIempty\fP \fBTypedArrayOf\fP instance\&. "
.ti -1c
.RI "\fBTypedArrayOf\fP (napi_env env, napi_value value)"
.br
.RI "Wraps a Node-API value primitive\&. "
.ti -1c
.RI "T & \fBoperator[]\fP (size_t index)"
.br
.RI "Gets or sets an element in the array\&. "
.ti -1c
.RI "const T & \fBoperator[]\fP (size_t index) const"
.br
.RI "Gets an element in the array\&. "
.ti -1c
.RI "T * \fBData\fP ()"
.br
.ti -1c
.RI "const T * \fBData\fP () const"
.br
.in -1c

Public Member Functions inherited from \fBNapi::TypedArray\fP
.in +1c
.ti -1c
.RI "\fBTypedArray\fP ()"
.br
.RI "Creates a new \fIempty\fP \fBTypedArray\fP instance\&. "
.ti -1c
.RI "\fBTypedArray\fP (napi_env env, napi_value value)"
.br
.RI "Wraps a Node-API value primitive\&. "
.ti -1c
.RI "napi_typedarray_type \fBTypedArrayType\fP () const"
.br
.RI "Gets the type of this typed-array\&. "
.ti -1c
.RI "\fBNapi::ArrayBuffer\fP \fBArrayBuffer\fP () const"
.br
.RI "Gets the backing array buffer\&. "
.ti -1c
.RI "uint8_t \fBElementSize\fP () const"
.br
.RI "Gets the size in bytes of one element in the array\&. "
.ti -1c
.RI "size_t \fBElementLength\fP () const"
.br
.RI "Gets the number of elements in the array\&. "
.ti -1c
.RI "size_t \fBByteOffset\fP () const"
.br
.RI "Gets the offset into the buffer where the array starts\&. "
.ti -1c
.RI "size_t \fBByteLength\fP () const"
.br
.RI "Gets the length of the array in bytes\&. "
.in -1c

Public Member Functions inherited from \fBNapi::Object\fP
.in +1c
.ti -1c
.RI "\fBObject\fP ()"
.br
.RI "Creates a new \fIempty\fP \fBObject\fP instance\&. "
.ti -1c
.RI "\fBObject\fP (napi_env env, napi_value value)"
.br
.RI "Wraps a Node-API value primitive\&. "
.ti -1c
.RI "\fBPropertyLValue\fP< std::string > \fBoperator[]\fP (const char *utf8name)"
.br
.RI "Gets or sets a named property\&. "
.ti -1c
.RI "\fBPropertyLValue\fP< std::string > \fBoperator[]\fP (const std::string &utf8name)"
.br
.RI "Gets or sets a named property\&. "
.ti -1c
.RI "\fBPropertyLValue\fP< uint32_t > \fBoperator[]\fP (uint32_t index)"
.br
.RI "Gets or sets an indexed property or array element\&. "
.ti -1c
.RI "\fBPropertyLValue\fP< \fBValue\fP > \fBoperator[]\fP (\fBValue\fP index) const"
.br
.RI "Gets or sets an indexed property or array element\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBValue\fP > \fBoperator[]\fP (const char *utf8name) const"
.br
.RI "Gets a named property\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBValue\fP > \fBoperator[]\fP (const std::string &utf8name) const"
.br
.RI "Gets a named property\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBValue\fP > \fBoperator[]\fP (uint32_t index) const"
.br
.RI "Gets an indexed property or array element\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBHas\fP (napi_value key) const"
.br
.RI "Checks whether a property is present\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBHas\fP (\fBValue\fP key) const"
.br
.RI "Checks whether a property is present\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBHas\fP (const char *utf8name) const"
.br
.RI "Checks whether a named property is present\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBHas\fP (const std::string &utf8name) const"
.br
.RI "Checks whether a named property is present\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBHasOwnProperty\fP (napi_value key) const"
.br
.RI "Checks whether a own property is present\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBHasOwnProperty\fP (\fBValue\fP key) const"
.br
.RI "Checks whether a own property is present\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBHasOwnProperty\fP (const char *utf8name) const"
.br
.RI "Checks whether a own property is present\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBHasOwnProperty\fP (const std::string &utf8name) const"
.br
.RI "Checks whether a own property is present\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBValue\fP > \fBGet\fP (napi_value key) const"
.br
.RI "Gets a property\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBValue\fP > \fBGet\fP (\fBValue\fP key) const"
.br
.RI "Gets a property\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBValue\fP > \fBGet\fP (const char *utf8name) const"
.br
.RI "Gets a named property\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBValue\fP > \fBGet\fP (const std::string &utf8name) const"
.br
.RI "Gets a named property\&. "
.ti -1c
.RI "template<typename ValueType > \fBMaybeOrValue\fP< bool > \fBSet\fP (napi_value key, const ValueType &value) const"
.br
.RI "Sets a property\&. "
.ti -1c
.RI "template<typename ValueType > \fBMaybeOrValue\fP< bool > \fBSet\fP (\fBValue\fP key, const ValueType &value) const"
.br
.RI "Sets a property\&. "
.ti -1c
.RI "template<typename ValueType > \fBMaybeOrValue\fP< bool > \fBSet\fP (const char *utf8name, const ValueType &value) const"
.br
.RI "Sets a named property\&. "
.ti -1c
.RI "template<typename ValueType > \fBMaybeOrValue\fP< bool > \fBSet\fP (const std::string &utf8name, const ValueType &value) const"
.br
.RI "Sets a named property\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBDelete\fP (napi_value key) const"
.br
.RI "Delete property\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBDelete\fP (\fBValue\fP key) const"
.br
.RI "Delete property\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBDelete\fP (const char *utf8name) const"
.br
.RI "Delete property\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBDelete\fP (const std::string &utf8name) const"
.br
.RI "Delete property\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBHas\fP (uint32_t index) const"
.br
.RI "Checks whether an indexed property is present\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBValue\fP > \fBGet\fP (uint32_t index) const"
.br
.RI "Gets an indexed property or array element\&. "
.ti -1c
.RI "template<typename ValueType > \fBMaybeOrValue\fP< bool > \fBSet\fP (uint32_t index, const ValueType &value) const"
.br
.RI "Sets an indexed property or array element\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBDelete\fP (uint32_t index) const"
.br
.RI "Deletes an indexed property or array element\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBArray\fP > \fBGetPropertyNames\fP () const"
.br
.RI "Get all property names\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBDefineProperty\fP (const \fBPropertyDescriptor\fP &property) const"
.br
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBDefineProperties\fP (const std::initializer_list< \fBPropertyDescriptor\fP > &properties) const"
.br
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBDefineProperties\fP (const std::vector< \fBPropertyDescriptor\fP > &properties) const"
.br
.ti -1c
.RI "\fBMaybeOrValue\fP< bool > \fBInstanceOf\fP (const \fBFunction\fP &constructor) const"
.br
.ti -1c
.RI "template<typename Finalizer , typename T > void \fBAddFinalizer\fP (Finalizer finalizeCallback, T *data) const"
.br
.ti -1c
.RI "template<typename Finalizer , typename T , typename Hint > void \fBAddFinalizer\fP (Finalizer finalizeCallback, T *data, Hint *finalizeHint) const"
.br
.in -1c

Public Member Functions inherited from \fBNapi::Value\fP
.in +1c
.ti -1c
.RI "\fBValue\fP ()"
.br
.RI "Creates a new \fIempty\fP \fBValue\fP instance\&. "
.ti -1c
.RI "\fBValue\fP (napi_env env, napi_value value)"
.br
.RI "Wraps a Node-API value primitive\&. "
.ti -1c
.RI "\fBoperator napi_value\fP () const"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBValue\fP &other) const"
.br
.RI "Tests if this value strictly equals another value\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBValue\fP &other) const"
.br
.RI "Tests if this value does not strictly equal another value\&. "
.ti -1c
.RI "bool \fBStrictEquals\fP (const \fBValue\fP &other) const"
.br
.RI "Tests if this value strictly equals another value\&. "
.ti -1c
.RI "\fBNapi::Env\fP \fBEnv\fP () const"
.br
.RI "Gets the environment the value is associated with\&. "
.ti -1c
.RI "bool \fBIsEmpty\fP () const"
.br
.ti -1c
.RI "napi_valuetype \fBType\fP () const"
.br
.RI "Gets the type of the value\&. "
.ti -1c
.RI "bool \fBIsUndefined\fP () const"
.br
.RI "Tests if a value is an undefined JavaScript value\&. "
.ti -1c
.RI "bool \fBIsNull\fP () const"
.br
.RI "Tests if a value is a null JavaScript value\&. "
.ti -1c
.RI "bool \fBIsBoolean\fP () const"
.br
.RI "Tests if a value is a JavaScript boolean\&. "
.ti -1c
.RI "bool \fBIsNumber\fP () const"
.br
.RI "Tests if a value is a JavaScript number\&. "
.ti -1c
.RI "bool \fBIsString\fP () const"
.br
.RI "Tests if a value is a JavaScript string\&. "
.ti -1c
.RI "bool \fBIsSymbol\fP () const"
.br
.RI "Tests if a value is a JavaScript symbol\&. "
.ti -1c
.RI "bool \fBIsArray\fP () const"
.br
.RI "Tests if a value is a JavaScript array\&. "
.ti -1c
.RI "bool \fBIsArrayBuffer\fP () const"
.br
.RI "Tests if a value is a JavaScript array buffer\&. "
.ti -1c
.RI "bool \fBIsTypedArray\fP () const"
.br
.RI "Tests if a value is a JavaScript typed array\&. "
.ti -1c
.RI "bool \fBIsObject\fP () const"
.br
.RI "Tests if a value is a JavaScript object\&. "
.ti -1c
.RI "bool \fBIsFunction\fP () const"
.br
.RI "Tests if a value is a JavaScript function\&. "
.ti -1c
.RI "bool \fBIsPromise\fP () const"
.br
.RI "Tests if a value is a JavaScript promise\&. "
.ti -1c
.RI "bool \fBIsDataView\fP () const"
.br
.RI "Tests if a value is a JavaScript data view\&. "
.ti -1c
.RI "bool \fBIsBuffer\fP () const"
.br
.RI "Tests if a value is a Node buffer\&. "
.ti -1c
.RI "bool \fBIsExternal\fP () const"
.br
.RI "Tests if a value is a pointer to external data\&. "
.ti -1c
.RI "template<typename T > T \fBAs\fP () const"
.br
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBBoolean\fP > \fBToBoolean\fP () const"
.br
.RI "Coerces a value to a JavaScript boolean\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBNumber\fP > \fBToNumber\fP () const"
.br
.RI "Coerces a value to a JavaScript number\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBString\fP > \fBToString\fP () const"
.br
.RI "Coerces a value to a JavaScript string\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBObject\fP > \fBToObject\fP () const"
.br
.RI "Coerces a value to a JavaScript object\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBTypedArrayOf\fP \fBNew\fP (napi_env env, size_t elementLength, napi_typedarray_type type=\fBTypedArray::TypedArrayTypeForPrimitiveType\fP< T >())"
.br
.ti -1c
.RI "static \fBTypedArrayOf\fP \fBNew\fP (napi_env env, size_t elementLength, \fBNapi::ArrayBuffer\fP arrayBuffer, size_t bufferOffset, napi_typedarray_type type=\fBTypedArray::TypedArrayTypeForPrimitiveType\fP< T >())"
.br
.ti -1c
.RI "static void \fBCheckCast\fP (napi_env env, napi_value value)"
.br
.in -1c

Static Public Member Functions inherited from \fBNapi::TypedArray\fP
.in +1c
.ti -1c
.RI "static void \fBCheckCast\fP (napi_env env, napi_value value)"
.br
.in -1c

Static Public Member Functions inherited from \fBNapi::Object\fP
.in +1c
.ti -1c
.RI "static \fBObject\fP \fBNew\fP (napi_env env)"
.br
.RI "Creates a new \fBObject\fP value\&. "
.ti -1c
.RI "static void \fBCheckCast\fP (napi_env env, napi_value value)"
.br
.in -1c

Static Public Member Functions inherited from \fBNapi::Value\fP
.in +1c
.ti -1c
.RI "template<typename T > static \fBValue\fP \fBFrom\fP (napi_env env, const T &value)"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Member Functions inherited from \fBNapi::TypedArray\fP
.in +1c
.ti -1c
.RI "\fBTypedArray\fP (napi_env env, napi_value value, napi_typedarray_type type, size_t length)"
.br
.in -1c

Protected Member Functions inherited from \fBNapi::TypeTaggable\fP
.in +1c
.ti -1c
.RI "\fBTypeTaggable\fP ()"
.br
.ti -1c
.RI "\fBTypeTaggable\fP (napi_env env, napi_value value)"
.br
.in -1c

Static Protected Member Functions inherited from \fBNapi::TypedArray\fP
.in +1c
.ti -1c
.RI "template<typename T > static constexpr napi_typedarray_type \fBTypedArrayTypeForPrimitiveType\fP ()"
.br
.in -1c

Protected Attributes inherited from \fBNapi::TypedArray\fP
.in +1c
.ti -1c
.RI "napi_typedarray_type \fB_type\fP"
.br
.RI "!cond INTERNAL "
.ti -1c
.RI "size_t \fB_length\fP"
.br
.in -1c

Protected Attributes inherited from \fBNapi::Value\fP
.in +1c
.ti -1c
.RI "napi_env \fB_env\fP"
.br
.RI "!cond INTERNAL "
.ti -1c
.RI "napi_value \fB_value\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T>
.br
class Napi::TypedArrayOf< T >"A JavaScript typed-array value with known array type\&.
.PP
Note while it is possible to create and access Uint8 'clamped' arrays using this class, the \fIclamping\fP behavior is only applied in JavaScript\&. 
.PP
Definition at line \fB1254\fP of file \fBnapi\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T > \fBNapi::TypedArrayOf\fP< T >::TypedArrayOf ()\fR [inline]\fP"

.PP
Creates a new \fIempty\fP \fBTypedArrayOf\fP instance\&. 
.PP
Definition at line \fB2311\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "template<typename T > \fBNapi::TypedArrayOf\fP< T >::TypedArrayOf (napi_env env, napi_value value)\fR [inline]\fP"

.PP
Wraps a Node-API value primitive\&. 
.PP
Definition at line \fB2314\fP of file \fBnapi\-inl\&.h\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename T > void \fBNapi::TypedArrayOf\fP< T >::CheckCast (napi_env env, napi_value value)\fR [inline]\fP, \fR [static]\fP"

.PP
Definition at line \fB2264\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "template<typename T > T * \fBNapi::TypedArrayOf\fP< T >::Data ()\fR [inline]\fP"
Gets a pointer to the array's backing buffer\&.
.PP
This is not necessarily the same as the \fR\fBArrayBuffer::Data()\fP\fP pointer, because the typed-array may have a non-zero \fR\fBByteOffset()\fP\fP into the \fR\fBArrayBuffer\fP\fP\&. 
.PP
Definition at line \fB2357\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "template<typename T > const T * \fBNapi::TypedArrayOf\fP< T >::Data () const\fR [inline]\fP"
Gets a pointer to the array's backing buffer\&.
.PP
This is not necessarily the same as the \fR\fBArrayBuffer::Data()\fP\fP pointer, because the typed-array may have a non-zero \fR\fBByteOffset()\fP\fP into the \fR\fBArrayBuffer\fP\fP\&. 
.PP
Definition at line \fB2362\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "template<typename T > \fBTypedArrayOf\fP< T > \fBNapi::TypedArrayOf\fP< T >::New (napi_env env, size_t elementLength, \fBNapi::ArrayBuffer\fP arrayBuffer, size_t bufferOffset, napi_typedarray_type type = \fR\fBTypedArray::TypedArrayTypeForPrimitiveType\fP<T>()\fP)\fR [inline]\fP, \fR [static]\fP"
Creates a new \fBTypedArray\fP instance over a provided array buffer\&.
.PP
The array type parameter can normally be omitted (because it is inferred from the template parameter T), except when creating a 'clamped' array: 
.PP
.nf
Uint8Array::New(env, length, buffer, 0, napi_uint8_clamped_array) 

.fi
.PP
 
.PP
\fBParameters\fP
.RS 4
\fIenv\fP Node-API environment  
.br
\fIelementLength\fP Length of the created array, as a number of elements  
.br
\fIarrayBuffer\fP Backing array buffer instance to use  
.br
\fIbufferOffset\fP Offset into the array buffer where the typed-array starts  
.br
\fItype\fP Type of array, if different from the default array type for the template parameter T\&. 
.RE
.PP

.PP
Definition at line \fB2291\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "template<typename T > \fBTypedArrayOf\fP< T > \fBNapi::TypedArrayOf\fP< T >::New (napi_env env, size_t elementLength, napi_typedarray_type type = \fR\fBTypedArray::TypedArrayTypeForPrimitiveType\fP<T>()\fP)\fR [inline]\fP, \fR [static]\fP"
Creates a new \fBTypedArray\fP instance over a new automatically-allocated array buffer\&.
.PP
The array type parameter can normally be omitted (because it is inferred from the template parameter T), except when creating a 'clamped' array: 
.PP
.nf
Uint8Array::New(env, length, napi_uint8_clamped_array) 

.fi
.PP
 
.PP
\fBParameters\fP
.RS 4
\fIenv\fP Node-API environment  
.br
\fIelementLength\fP Length of the created array, as a number of elements  
.br
\fItype\fP Type of array, if different from the default array type for the template parameter T\&. 
.RE
.PP

.PP
Definition at line \fB2282\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "template<typename T > T & \fBNapi::TypedArrayOf\fP< T >::operator[] (size_t index)\fR [inline]\fP"

.PP
Gets or sets an element in the array\&. 
.PP
Definition at line \fB2347\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "template<typename T > const T & \fBNapi::TypedArrayOf\fP< T >::operator[] (size_t index) const\fR [inline]\fP"

.PP
Gets an element in the array\&. 
.PP
Definition at line \fB2352\fP of file \fBnapi\-inl\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
