.TH "md_backend_2node__modules_2send_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2send_2_r_e_a_d_m_e \- send 
.PP
 \fR\fP \fR\fP \fR\fP \fR\fP \fR\fP
.PP
Send is a library for streaming files from the file system as a http response supporting partial responses (Ranges), conditional-GET negotiation (If-Match, If-Unmodified-Since, If-None-Match, If-Modified-Since), high test coverage, and granular events which may be leveraged to take appropriate actions in your application or framework\&.
.PP
Looking to serve up entire folders mapped to URLs? Try \fRserve-static\fP\&.
.SH "Installation"
.PP
This is a \fRNode\&.js\fP module available through the \fRnpm registry\fP\&. Installation is done using the \fR\fRnpm install\fP command\fP:
.PP
.PP
.nf
$ npm install send
.fi
.PP
.SH "API"
.PP
.PP
.nf
var send = require('send')
.fi
.PP
.SS "send(req, path, [options])"
Create a new \fRSendStream\fP for the given path to send to a \fRres\fP\&. The \fRreq\fP is the Node\&.js HTTP request and the \fRpath\fP is a urlencoded path to send (urlencoded, not the actual file-system path)\&.
.SS "Options"
.SS "acceptRanges"
Enable or disable accepting ranged requests, defaults to true\&. Disabling this will not send \fRAccept-Ranges\fP and ignore the contents of the \fRRange\fP request header\&.
.SS "cacheControl"
Enable or disable setting \fRCache-Control\fP response header, defaults to true\&. Disabling this will ignore the \fRimmutable\fP and \fRmaxAge\fP options\&.
.SS "dotfiles"
Set how 'dotfiles' are treated when encountered\&. A dotfile is a file or directory that begins with a dot ('\&.')\&. Note this check is done on the path itself without checking if the path actually exists on the disk\&. If \fRroot\fP is specified, only the dotfiles above the root are checked (i\&.e\&. the root itself can be within a dotfile when when set to 'deny')\&.
.PP
.IP "\(bu" 2
`'allow'\fRNo special treatment for dotfiles\&. -\fP'deny'\fRSend a 403 for any request for a dotfile\&. -\fP'ignore'` Pretend like the dotfile does not exist and 404\&.
.PP
.PP
The default value is \fIsimilar\fP to `'ignore'`, with the exception that this default will not ignore the files within a directory that begins with a dot, for backward-compatibility\&.
.SS "end"
Byte offset at which the stream ends, defaults to the length of the file minus 1\&. The end is inclusive in the stream, meaning \fRend: 3\fP will include the 4th byte in the stream\&.
.SS "etag"
Enable or disable etag generation, defaults to true\&.
.SS "extensions"
If a given file doesn't exist, try appending one of the given extensions, in the given order\&. By default, this is disabled (set to \fRfalse\fP)\&. An example value that will serve extension-less HTML files: `['html', 'htm']`\&. This is skipped if the requested file already has an extension\&.
.SS "immutable"
Enable or disable the \fRimmutable\fP directive in the \fRCache-Control\fP response header, defaults to \fRfalse\fP\&. If set to \fRtrue\fP, the \fRmaxAge\fP option should also be specified to enable caching\&. The \fRimmutable\fP directive will prevent supported clients from making conditional requests during the life of the \fRmaxAge\fP option to check if the file has changed\&.
.SS "index"
By default send supports 'index\&.html' files, to disable this set \fRfalse\fP or to supply a new index pass a string or an array in preferred order\&.
.SS "lastModified"
Enable or disable \fRLast-Modified\fP header, defaults to true\&. Uses the file system's last modified value\&.
.SS "maxAge"
Provide a max-age in milliseconds for http caching, defaults to 0\&. This can also be a string accepted by the \fRms\fP module\&.
.SS "root"
Serve files relative to \fRpath\fP\&.
.SS "start"
Byte offset at which the stream starts, defaults to 0\&. The start is inclusive, meaning \fRstart: 2\fP will include the 3rd byte in the stream\&.
.SS "Events"
The \fRSendStream\fP is an event emitter and will emit the following events:
.PP
.IP "\(bu" 2
\fRerror\fP an error occurred \fR(err)\fP
.IP "\(bu" 2
\fRdirectory\fP a directory was requested \fR(res, path)\fP
.IP "\(bu" 2
\fRfile\fP a file was requested \fR(path, stat)\fP
.IP "\(bu" 2
\fRheaders\fP the headers are about to be set on a file \fR(res, path, stat)\fP
.IP "\(bu" 2
\fRstream\fP file streaming has started \fR(stream)\fP
.IP "\(bu" 2
\fRend\fP streaming has completed
.PP
.SS "\&.pipe"
The \fRpipe\fP method is used to pipe the response into the Node\&.js HTTP response object, typically \fRsend(req, path, options)\&.pipe(res)\fP\&.
.SS "\&.mime"
The \fRmime\fP export is the global instance of of the \fR\fRmime\fP npm module\fP\&.
.PP
This is used to configure the MIME types that are associated with file extensions as well as other options for how to resolve the MIME type of a file (like the default type to use for an unknown file extension)\&.
.SH "Error-handling"
.PP
By default when no \fRerror\fP listeners are present an automatic response will be made, otherwise you have full control over the response, aka you may show a 5xx page etc\&.
.SH "Caching"
.PP
It does \fInot\fP perform internal caching, you should use a reverse proxy cache such as Varnish for this, or those fancy things called CDNs\&. If your application is small enough that it would benefit from single-node memory caching, it's small enough that it does not need caching at all ;)\&.
.SH "Debugging"
.PP
To enable \fRdebug()\fP instrumentation output export \fBDEBUG\fP:
.PP
.PP
.nf
$ DEBUG=send node app
.fi
.PP
.SH "Running tests"
.PP
.PP
.nf
$ npm install
$ npm test
.fi
.PP
.SH "Examples"
.PP
.SS "Serve a specific file"
This simple example will send a specific file to all requests\&.
.PP
.PP
.nf
var http = require('http')
var send = require('send')

var server = http\&.createServer(function onRequest (req, res) {
  send(req, '/path/to/index\&.html')
    \&.pipe(res)
})

server\&.listen(3000)
.fi
.PP
.SS "Serve all files from a directory"
This simple example will just serve up all the files in a given directory as the top-level\&. For example, a request \fRGET /foo\&.txt\fP will send back \fR/www/public/foo\&.txt\fP\&.
.PP
.PP
.nf
var http = require('http')
var parseUrl = require('parseurl')
var send = require('send')

var server = http\&.createServer(function onRequest (req, res) {
  send(req, parseUrl(req)\&.pathname, { root: '/www/public' })
    \&.pipe(res)
})

server\&.listen(3000)
.fi
.PP
.SS "Custom file types"
.PP
.nf
var http = require('http')
var parseUrl = require('parseurl')
var send = require('send')

// Default unknown types to text/plain
send\&.mime\&.default_type = 'text/plain'

// Add a custom type
send\&.mime\&.define({
  'application/x\-my\-type': ['x\-mt', 'x\-mtt']
})

var server = http\&.createServer(function onRequest (req, res) {
  send(req, parseUrl(req)\&.pathname, { root: '/www/public' })
    \&.pipe(res)
})

server\&.listen(3000)
.fi
.PP
.SS "Custom directory index view"
This is a example of serving up a structure of directories with a custom function to render a listing of a directory\&.
.PP
.PP
.nf
var http = require('http')
var fs = require('fs')
var parseUrl = require('parseurl')
var send = require('send')

// Transfer arbitrary files from within /www/example\&.com/public/*
// with a custom handler for directory listing
var server = http\&.createServer(function onRequest (req, res) {
  send(req, parseUrl(req)\&.pathname, { index: false, root: '/www/public' })
    \&.once('directory', directory)
    \&.pipe(res)
})

server\&.listen(3000)

// Custom directory handler
function directory (res, path) {
  var stream = this

  // redirect to trailing slash for consistent url
  if (!stream\&.hasTrailingSlash()) {
    return stream\&.redirect(path)
  }

  // get directory list
  fs\&.readdir(path, function onReaddir (err, list) {
    if (err) return stream\&.error(err)

    // render an index for the directory
    res\&.setHeader('Content\-Type', 'text/plain; charset=UTF\-8')
    res\&.end(list\&.join('\\n') + '\\n')
  })
}
.fi
.PP
.SS "Serving from a root directory with custom error-handling"
.PP
.nf
var http = require('http')
var parseUrl = require('parseurl')
var send = require('send')

var server = http\&.createServer(function onRequest (req, res) {
  // your custom error\-handling logic:
  function error (err) {
    res\&.statusCode = err\&.status || 500
    res\&.end(err\&.message)
  }

  // your custom headers
  function headers (res, path, stat) {
    // serve all files for download
    res\&.setHeader('Content\-Disposition', 'attachment')
  }

  // your custom directory handling logic:
  function redirect () {
    res\&.statusCode = 301
    res\&.setHeader('Location', req\&.url + '/')
    res\&.end('Redirecting to ' + req\&.url + '/')
  }

  // transfer arbitrary files from within
  // /www/example\&.com/public/*
  send(req, parseUrl(req)\&.pathname, { root: '/www/public' })
    \&.on('error', error)
    \&.on('directory', redirect)
    \&.on('headers', headers)
    \&.pipe(res)
})

server\&.listen(3000)
.fi
.PP
.SH "License"
.PP
[MIT](LICENSE) 
