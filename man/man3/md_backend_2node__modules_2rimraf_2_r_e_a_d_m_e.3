.TH "md_backend_2node__modules_2rimraf_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2rimraf_2_r_e_a_d_m_e \- README 
.PP
\fR\fP \fR\fP \fR\fP
.PP
The \fRUNIX command\fP \fRrm -rf\fP for node\&.
.PP
Install with \fRnpm install rimraf\fP, or just drop rimraf\&.js somewhere\&.
.SS "API"
\fRrimraf(f, [opts], callback)\fP
.PP
The first parameter will be interpreted as a globbing pattern for files\&. If you want to disable globbing you can do so with \fRopts\&.disableGlob\fP (defaults to \fRfalse\fP)\&. This might be handy, for instance, if you have filenames that contain globbing wildcard characters\&.
.PP
The callback will be called with an error if there is one\&. Certain errors are handled for you:
.PP
.IP "\(bu" 2
Windows: \fREBUSY\fP and \fRENOTEMPTY\fP - rimraf will back off a maximum of \fRopts\&.maxBusyTries\fP times before giving up, adding 100ms of wait between each attempt\&. The default \fRmaxBusyTries\fP is 3\&.
.IP "\(bu" 2
\fRENOENT\fP - If the file doesn't exist, rimraf will return successfully, since your desired outcome is already the case\&.
.IP "\(bu" 2
\fREMFILE\fP - Since \fRreaddir\fP requires opening a file descriptor, it's possible to hit \fREMFILE\fP if too many file descriptors are in use\&. In the sync case, there's nothing to be done for this\&. But in the async case, rimraf will gradually back off with timeouts up to \fRopts\&.emfileWait\fP ms, which defaults to 1000\&.
.PP
.SS "options"
.IP "\(bu" 2
unlink, chmod, stat, lstat, rmdir, readdir, unlinkSync, chmodSync, statSync, lstatSync, rmdirSync, readdirSync
.PP
In order to use a custom file system library, you can override specific fs functions on the options object\&.
.PP
If any of these functions are present on the options object, then the supplied function will be used instead of the default fs method\&.
.PP
Sync methods are only relevant for \fRrimraf\&.sync()\fP, of course\&.
.PP
For example:
.PP
.PP
.nf
var myCustomFS = require('some\-custom\-fs')

rimraf('some\-thing', myCustomFS, callback)
.fi
.PP

.IP "\(bu" 2
maxBusyTries
.PP
If an \fREBUSY\fP, \fRENOTEMPTY\fP, or \fREPERM\fP error code is encountered on Windows systems, then rimraf will retry with a linear backoff wait of 100ms longer on each try\&. The default maxBusyTries is 3\&.
.PP
Only relevant for async usage\&.
.IP "\(bu" 2
emfileWait
.PP
If an \fREMFILE\fP error is encountered, then rimraf will retry repeatedly with a linear backoff of 1ms longer on each try, until the timeout counter hits this max\&. The default limit is 1000\&.
.PP
If you repeatedly encounter \fREMFILE\fP errors, then consider using \fRgraceful-fs\fP in your program\&.
.PP
Only relevant for async usage\&.
.IP "\(bu" 2
glob
.PP
Set to \fRfalse\fP to disable \fRglob\fP pattern matching\&.
.PP
Set to an object to pass options to the glob module\&. The default glob options are \fR{ nosort: true, silent: true }\fP\&.
.PP
Glob version 6 is used in this module\&.
.PP
Relevant for both sync and async usage\&.
.IP "\(bu" 2
disableGlob
.PP
Set to any non-falsey value to disable globbing entirely\&. (Equivalent to setting \fRglob: false\fP\&.)
.PP
.SS "rimraf\&.sync"
It can remove stuff synchronously, too\&. But that's not so good\&. Use the async API\&. It's better\&.
.SS "CLI"
If installed with \fRnpm install rimraf -g\fP it can be used as a global command \fRrimraf <path> [<path> \&.\&.\&.]\fP which is useful for cross platform support\&.
.SS "mkdirp"
If you need to create a directory recursively, check out \fRmkdirp\fP\&. 
