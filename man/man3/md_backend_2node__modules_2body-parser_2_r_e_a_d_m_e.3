.TH "md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2body-parser_2_r_e_a_d_m_e \- body-parser 
.PP
 \fR\fP \fR\fP \fR\fP \fR\fP
.PP
Node\&.js body parsing middleware\&.
.PP
Parse incoming request bodies in a middleware before your handlers, available under the \fRreq\&.body\fP property\&.
.PP
\fBNote\fP As \fRreq\&.body\fP's shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting\&. For example, \fRreq\&.body\&.foo\&.toString()\fP may fail in multiple ways, for example the \fRfoo\fP property may not be there or may not be a string, and \fRtoString\fP may not be a function and instead a string or other user input\&.
.PP
\fRLearn about the anatomy of an HTTP transaction in Node\&.js\fP\&.
.PP
\fIThis does not handle multipart bodies\fP, due to their complex and typically large nature\&. For multipart bodies, you may be interested in the following modules:
.PP
.IP "\(bu" 2
\fRbusboy\fP and \fRconnect-busboy\fP
.IP "\(bu" 2
\fRmultiparty\fP and \fRconnect-multiparty\fP
.IP "\(bu" 2
\fRformidable\fP
.IP "\(bu" 2
\fRmulter\fP
.PP
.PP
This module provides the following parsers:
.PP
.IP "\(bu" 2
\fBJSON body parser\fP
.IP "\(bu" 2
\fBRaw body parser\fP
.IP "\(bu" 2
\fBText body parser\fP
.IP "\(bu" 2
\fBURL-encoded form body parser\fP
.PP
.PP
Other body parsers you might be interested in:
.PP
.IP "\(bu" 2
\fRbody\fP
.IP "\(bu" 2
\fRco-body\fP
.PP
.SH "Installation"
.PP
.PP
.nf
$ npm install body\-parser
.fi
.PP
.SH "API"
.PP
.PP
.nf
var bodyParser = require('body\-parser')
.fi
.PP
.PP
The \fRbodyParser\fP object exposes various factories to create middlewares\&. All middlewares will populate the \fRreq\&.body\fP property with the parsed body when the \fRContent-Type\fP request header matches the \fRtype\fP option, or an empty object (\fR{}\fP) if there was no body to parse, the \fRContent-Type\fP was not matched, or an error occurred\&.
.PP
The various errors returned by this module are described in the \fBerrors section\fP\&.
.SS "bodyParser\&.json([options])"
Returns middleware that only parses \fRjson\fP and only looks at requests where the \fRContent-Type\fP header matches the \fRtype\fP option\&. This parser accepts any Unicode encoding of the body and supports automatic inflation of \fRgzip\fP and \fRdeflate\fP encodings\&.
.PP
A new \fRbody\fP object containing the parsed data is populated on the \fRrequest\fP object after the middleware (i\&.e\&. \fRreq\&.body\fP)\&.
.SS "Options"
The \fRjson\fP function takes an optional \fRoptions\fP object that may contain any of the following keys:
.SS "inflate"
When set to \fRtrue\fP, then deflated (compressed) bodies will be inflated; when \fRfalse\fP, deflated bodies are rejected\&. Defaults to \fRtrue\fP\&.
.SS "limit"
Controls the maximum request body size\&. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the \fRbytes\fP library for parsing\&. Defaults to `'100kb'`\&.
.SS "reviver"
The \fRreviver\fP option is passed directly to \fRJSON\&.parse\fP as the second argument\&. You can find more information on this argument \fRin the MDN documentation about JSON\&.parse\fP\&.
.SS "strict"
When set to \fRtrue\fP, will only accept arrays and objects; when \fRfalse\fP will accept anything \fRJSON\&.parse\fP accepts\&. Defaults to \fRtrue\fP\&.
.SS "type"
The \fRtype\fP option is used to determine what media type the middleware will parse\&. This option can be a string, array of strings, or a function\&. If not a function, \fRtype\fP option is passed directly to the \fRtype-is\fP library and this can be an extension name (like \fRjson\fP), a mime type (like \fRapplication/json\fP), or a mime type with a wildcard (like \fR*/*\fP or \fR*/json\fP)\&. If a function, the \fRtype\fP option is called as \fRfn(req)\fP and the request is parsed if it returns a truthy value\&. Defaults to \fRapplication/json\fP\&.
.SS "verify"
The \fRverify\fP option, if supplied, is called as \fRverify(req, res, buf, encoding)\fP, where \fRbuf\fP is a \fRBuffer\fP of the raw request body and \fRencoding\fP is the encoding of the request\&. The parsing can be aborted by throwing an error\&.
.SS "bodyParser\&.raw([options])"
Returns middleware that parses all bodies as a \fRBuffer\fP and only looks at requests where the \fRContent-Type\fP header matches the \fRtype\fP option\&. This parser supports automatic inflation of \fRgzip\fP and \fRdeflate\fP encodings\&.
.PP
A new \fRbody\fP object containing the parsed data is populated on the \fRrequest\fP object after the middleware (i\&.e\&. \fRreq\&.body\fP)\&. This will be a \fRBuffer\fP object of the body\&.
.SS "Options"
The \fRraw\fP function takes an optional \fRoptions\fP object that may contain any of the following keys:
.SS "inflate"
When set to \fRtrue\fP, then deflated (compressed) bodies will be inflated; when \fRfalse\fP, deflated bodies are rejected\&. Defaults to \fRtrue\fP\&.
.SS "limit"
Controls the maximum request body size\&. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the \fRbytes\fP library for parsing\&. Defaults to `'100kb'`\&.
.SS "type"
The \fRtype\fP option is used to determine what media type the middleware will parse\&. This option can be a string, array of strings, or a function\&. If not a function, \fRtype\fP option is passed directly to the \fRtype-is\fP library and this can be an extension name (like \fRbin\fP), a mime type (like \fRapplication/octet-stream\fP), or a mime type with a wildcard (like \fR*/*\fP or \fRapplication/*\fP)\&. If a function, the \fRtype\fP option is called as \fRfn(req)\fP and the request is parsed if it returns a truthy value\&. Defaults to \fRapplication/octet-stream\fP\&.
.SS "verify"
The \fRverify\fP option, if supplied, is called as \fRverify(req, res, buf, encoding)\fP, where \fRbuf\fP is a \fRBuffer\fP of the raw request body and \fRencoding\fP is the encoding of the request\&. The parsing can be aborted by throwing an error\&.
.SS "bodyParser\&.text([options])"
Returns middleware that parses all bodies as a string and only looks at requests where the \fRContent-Type\fP header matches the \fRtype\fP option\&. This parser supports automatic inflation of \fRgzip\fP and \fRdeflate\fP encodings\&.
.PP
A new \fRbody\fP string containing the parsed data is populated on the \fRrequest\fP object after the middleware (i\&.e\&. \fRreq\&.body\fP)\&. This will be a string of the body\&.
.SS "Options"
The \fRtext\fP function takes an optional \fRoptions\fP object that may contain any of the following keys:
.SS "defaultCharset"
Specify the default character set for the text content if the charset is not specified in the \fRContent-Type\fP header of the request\&. Defaults to \fRutf-8\fP\&.
.SS "inflate"
When set to \fRtrue\fP, then deflated (compressed) bodies will be inflated; when \fRfalse\fP, deflated bodies are rejected\&. Defaults to \fRtrue\fP\&.
.SS "limit"
Controls the maximum request body size\&. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the \fRbytes\fP library for parsing\&. Defaults to `'100kb'`\&.
.SS "type"
The \fRtype\fP option is used to determine what media type the middleware will parse\&. This option can be a string, array of strings, or a function\&. If not a function, \fRtype\fP option is passed directly to the \fRtype-is\fP library and this can be an extension name (like \fRtxt\fP), a mime type (like \fRtext/plain\fP), or a mime type with a wildcard (like \fR*/*\fP or \fRtext/*\fP)\&. If a function, the \fRtype\fP option is called as \fRfn(req)\fP and the request is parsed if it returns a truthy value\&. Defaults to \fRtext/plain\fP\&.
.SS "verify"
The \fRverify\fP option, if supplied, is called as \fRverify(req, res, buf, encoding)\fP, where \fRbuf\fP is a \fRBuffer\fP of the raw request body and \fRencoding\fP is the encoding of the request\&. The parsing can be aborted by throwing an error\&.
.SS "bodyParser\&.urlencoded([options])"
Returns middleware that only parses \fRurlencoded\fP bodies and only looks at requests where the \fRContent-Type\fP header matches the \fRtype\fP option\&. This parser accepts only UTF-8 encoding of the body and supports automatic inflation of \fRgzip\fP and \fRdeflate\fP encodings\&.
.PP
A new \fRbody\fP object containing the parsed data is populated on the \fRrequest\fP object after the middleware (i\&.e\&. \fRreq\&.body\fP)\&. This object will contain key-value pairs, where the value can be a string or array (when \fRextended\fP is \fRfalse\fP), or any type (when \fRextended\fP is \fRtrue\fP)\&.
.SS "Options"
The \fRurlencoded\fP function takes an optional \fRoptions\fP object that may contain any of the following keys:
.SS "extended"
The \fRextended\fP option allows to choose between parsing the URL-encoded data with the \fRquerystring\fP library (when \fRfalse\fP) or the \fRqs\fP library (when \fRtrue\fP)\&. The 'extended' syntax allows for rich objects and arrays to be encoded into the URL-encoded format, allowing for a JSON-like experience with URL-encoded\&. For more information, please \fRsee the qs library\fP\&.
.PP
Defaults to \fRtrue\fP, but using the default has been deprecated\&. Please research into the difference between \fRqs\fP and \fRquerystring\fP and choose the appropriate setting\&.
.SS "inflate"
When set to \fRtrue\fP, then deflated (compressed) bodies will be inflated; when \fRfalse\fP, deflated bodies are rejected\&. Defaults to \fRtrue\fP\&.
.SS "limit"
Controls the maximum request body size\&. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the \fRbytes\fP library for parsing\&. Defaults to `'100kb'`\&.
.SS "parameterLimit"
The \fRparameterLimit\fP option controls the maximum number of parameters that are allowed in the URL-encoded data\&. If a request contains more parameters than this value, a 413 will be returned to the client\&. Defaults to \fR1000\fP\&.
.SS "type"
The \fRtype\fP option is used to determine what media type the middleware will parse\&. This option can be a string, array of strings, or a function\&. If not a function, \fRtype\fP option is passed directly to the \fRtype-is\fP library and this can be an extension name (like \fRurlencoded\fP), a mime type (like \fRapplication/x-www-form-urlencoded\fP), or a mime type with a wildcard (like \fR*/x-www-form-urlencoded\fP)\&. If a function, the \fRtype\fP option is called as \fRfn(req)\fP and the request is parsed if it returns a truthy value\&. Defaults to \fRapplication/x-www-form-urlencoded\fP\&.
.SS "verify"
The \fRverify\fP option, if supplied, is called as \fRverify(req, res, buf, encoding)\fP, where \fRbuf\fP is a \fRBuffer\fP of the raw request body and \fRencoding\fP is the encoding of the request\&. The parsing can be aborted by throwing an error\&.
.SH "Errors"
.PP
The middlewares provided by this module create errors using the \fR\fRhttp-errors\fP module\fP\&. The errors will typically have a \fRstatus\fP/\fRstatusCode\fP property that contains the suggested HTTP response code, an \fRexpose\fP property to determine if the \fRmessage\fP property should be displayed to the client, a \fRtype\fP property to determine the type of error without matching against the \fRmessage\fP, and a \fRbody\fP property containing the read body, if available\&.
.PP
The following are the common errors created, though any error can come through for various reasons\&.
.SS "content encoding unsupported"
This error will occur when the request had a \fRContent-Encoding\fP header that contained an encoding but the 'inflation' option was set to \fRfalse\fP\&. The \fRstatus\fP property is set to \fR415\fP, the \fRtype\fP property is set to `'encoding\&.unsupported'\fR, and the\fPcharset` property will be set to the encoding that is unsupported\&.
.SS "entity parse failed"
This error will occur when the request contained an entity that could not be parsed by the middleware\&. The \fRstatus\fP property is set to \fR400\fP, the \fRtype\fP property is set to `'entity\&.parse\&.failed'\fR, and the\fPbody` property is set to the entity value that failed parsing\&.
.SS "entity verify failed"
This error will occur when the request contained an entity that could not be failed verification by the defined \fRverify\fP option\&. The \fRstatus\fP property is set to \fR403\fP, the \fRtype\fP property is set to `'entity\&.verify\&.failed'\fR, and the \fPbody` property is set to the entity value that failed verification\&.
.SS "request aborted"
This error will occur when the request is aborted by the client before reading the body has finished\&. The \fRreceived\fP property will be set to the number of bytes received before the request was aborted and the \fRexpected\fP property is set to the number of expected bytes\&. The \fRstatus\fP property is set to \fR400\fP and \fRtype\fP property is set to `'request\&.aborted'`\&.
.SS "request entity too large"
This error will occur when the request body's size is larger than the 'limit' option\&. The \fRlimit\fP property will be set to the byte limit and the \fRlength\fP property will be set to the request body's length\&. The \fRstatus\fP property is set to \fR413\fP and the \fRtype\fP property is set to `'entity\&.too\&.large'`\&.
.SS "request size did not match content length"
This error will occur when the request's length did not match the length from the \fRContent-Length\fP header\&. This typically occurs when the request is malformed, typically when the \fRContent-Length\fP header was calculated based on characters instead of bytes\&. The \fRstatus\fP property is set to \fR400\fP and the \fRtype\fP property is set to `'request\&.size\&.invalid'`\&.
.SS "stream encoding should not be set"
This error will occur when something called the \fRreq\&.setEncoding\fP method prior to this middleware\&. This module operates directly on bytes only and you cannot call \fRreq\&.setEncoding\fP when using this module\&. The \fRstatus\fP property is set to \fR500\fP and the \fRtype\fP property is set to `'stream\&.encoding\&.set'`\&.
.SS "stream is not readable"
This error will occur when the request is no longer readable when this middleware attempts to read it\&. This typically means something other than a middleware from this module read the request body already and the middleware was also configured to read the same request\&. The \fRstatus\fP property is set to \fR500\fP and the \fRtype\fP property is set to `'stream\&.not\&.readable'`\&.
.SS "too many parameters"
This error will occur when the content of the request exceeds the configured \fRparameterLimit\fP for the \fRurlencoded\fP parser\&. The \fRstatus\fP property is set to \fR413\fP and the \fRtype\fP property is set to `'parameters\&.too\&.many'`\&.
.SS "unsupported charset 'BOGUS'"
This error will occur when the request had a charset parameter in the \fRContent-Type\fP header, but the \fRiconv-lite\fP module does not support it OR the parser does not support it\&. The charset is contained in the message as well as in the \fRcharset\fP property\&. The \fRstatus\fP property is set to \fR415\fP, the \fRtype\fP property is set to `'charset\&.unsupported'\fR, and the\fPcharset` property is set to the charset that is unsupported\&.
.SS "unsupported content encoding 'bogus'"
This error will occur when the request had a \fRContent-Encoding\fP header that contained an unsupported encoding\&. The encoding is contained in the message as well as in the \fRencoding\fP property\&. The \fRstatus\fP property is set to \fR415\fP, the \fRtype\fP property is set to `'encoding\&.unsupported'\fR, and the\fPencoding` property is set to the encoding that is unsupported\&.
.SH "Examples"
.PP
.SS "Express/Connect top-level generic"
This example demonstrates adding a generic JSON and URL-encoded parser as a top-level middleware, which will parse the bodies of all incoming requests\&. This is the simplest setup\&.
.PP
.PP
.nf
var express = require('express')
var bodyParser = require('body\-parser')

var app = express()

// parse application/x\-www\-form\-urlencoded
app\&.use(bodyParser\&.urlencoded({ extended: false }))

// parse application/json
app\&.use(bodyParser\&.json())

app\&.use(function (req, res) {
  res\&.setHeader('Content\-Type', 'text/plain')
  res\&.write('you posted:\\n')
  res\&.end(JSON\&.stringify(req\&.body, null, 2))
})
.fi
.PP
.SS "Express route-specific"
This example demonstrates adding body parsers specifically to the routes that need them\&. In general, this is the most recommended way to use body-parser with Express\&.
.PP
.PP
.nf
var express = require('express')
var bodyParser = require('body\-parser')

var app = express()

// create application/json parser
var jsonParser = bodyParser\&.json()

// create application/x\-www\-form\-urlencoded parser
var urlencodedParser = bodyParser\&.urlencoded({ extended: false })

// POST /login gets urlencoded bodies
app\&.post('/login', urlencodedParser, function (req, res) {
  res\&.send('welcome, ' + req\&.body\&.username)
})

// POST /api/users gets JSON bodies
app\&.post('/api/users', jsonParser, function (req, res) {
  // create user in req\&.body
})
.fi
.PP
.SS "Change accepted type for parsers"
All the parsers accept a \fRtype\fP option which allows you to change the \fRContent-Type\fP that the middleware will parse\&.
.PP
.PP
.nf
var express = require('express')
var bodyParser = require('body\-parser')

var app = express()

// parse various different custom JSON types as JSON
app\&.use(bodyParser\&.json({ type: 'application/*+json' }))

// parse some custom thing into a Buffer
app\&.use(bodyParser\&.raw({ type: 'application/vnd\&.custom\-type' }))

// parse an HTML body into a string
app\&.use(bodyParser\&.text({ type: 'text/html' }))
.fi
.PP
.SH "License"
.PP
[MIT](LICENSE) 
