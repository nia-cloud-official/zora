.TH "md_backend_2node__modules_2qs_2_c_h_a_n_g_e_l_o_g" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2qs_2_c_h_a_n_g_e_l_o_g \- **6\&.11\&.0 
.PP

.IP "\(bu" 2
[New] [Fix] \fRstringify\fP: revert 0e903c0; add \fRcommaRoundTrip\fP option (#442)
.IP "\(bu" 2
[readme] fix version badge
.PP
.SH "\fB6\&.10\&.5\fP"
.PP
.IP "\(bu" 2
[Fix] \fRstringify\fP: with \fRarrayFormat: comma\fP, properly include an explicit \fR[]\fP on a single-item array (#434)
.PP
.SH "\fB6\&.10\&.4\fP"
.PP
.IP "\(bu" 2
[Fix] \fRstringify\fP: with \fRarrayFormat: comma\fP, include an explicit \fR[]\fP on a single-item array (#441)
.IP "\(bu" 2
[meta] use \fRnpmignore\fP to autogenerate an npmignore file
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP, \fR@ljharb/eslint-config\fP, \fRaud\fP, \fRhas-symbol\fP, \fRobject-inspect\fP, \fRtape\fP
.PP
.SH "\fB6\&.10\&.3\fP"
.PP
.IP "\(bu" 2
[Fix] \fRparse\fP: ignore \fR__proto__\fP keys (#428)
.IP "\(bu" 2
[Robustness] \fRstringify\fP: avoid relying on a global \fRundefined\fP (#427)
.IP "\(bu" 2
[actions] reuse common workflows
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP, \fR@ljharb/eslint-config\fP, \fRobject-inspect\fP, \fRtape\fP
.PP
.SH "\fB6\&.10\&.2\fP"
.PP
.IP "\(bu" 2
[Fix] \fRstringify\fP: actually fix cyclic references (#426)
.IP "\(bu" 2
[Fix] \fRstringify\fP: avoid encoding arrayformat comma when \fRencodeValuesOnly = true\fP (#424)
.IP "\(bu" 2
[readme] remove travis badge; add github actions/codecov badges; update URLs
.IP "\(bu" 2
[Docs] add note and links for coercing primitive values (#408)
.IP "\(bu" 2
[actions] update codecov uploader
.IP "\(bu" 2
[actions] update workflows
.IP "\(bu" 2
[Tests] clean up stringify tests slightly
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP, \fR@ljharb/eslint-config\fP, \fRaud\fP, \fRobject-inspect\fP, \fRsafe-publish-latest\fP, \fRtape\fP
.PP
.SH "\fB6\&.10\&.1\fP"
.PP
.IP "\(bu" 2
[Fix] \fRstringify\fP: avoid exception on repeated object values (#402)
.PP
.SH "\fB6\&.10\&.0\fP"
.PP
.IP "\(bu" 2
[New] \fRstringify\fP: throw on cycles, instead of an infinite loop (#395, #394, #393)
.IP "\(bu" 2
[New] \fRparse\fP: add \fRallowSparse\fP option for collapsing arrays with missing indices (#312)
.IP "\(bu" 2
[meta] fix README\&.md (#399)
.IP "\(bu" 2
[meta] only run \fRnpm run dist\fP in publish, not install
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP, \fR@ljharb/eslint-config\fP, \fRaud\fP, \fRhas-symbols\fP, \fRtape\fP
.IP "\(bu" 2
[Tests] fix tests on node v0\&.6
.IP "\(bu" 2
[Tests] use \fRljharb/actions/node/install\fP instead of \fRljharb/actions/node/run\fP
.IP "\(bu" 2
[Tests] Revert '[meta] ignore eclint transitive audit warning'
.PP
.SH "\fB6\&.9\&.7\fP"
.PP
.IP "\(bu" 2
[Fix] \fRparse\fP: ignore \fR__proto__\fP keys (#428)
.IP "\(bu" 2
[Fix] \fRstringify\fP: avoid encoding arrayformat comma when \fRencodeValuesOnly = true\fP (#424)
.IP "\(bu" 2
[Robustness] \fRstringify\fP: avoid relying on a global \fRundefined\fP (#427)
.IP "\(bu" 2
[readme] remove travis badge; add github actions/codecov badges; update URLs
.IP "\(bu" 2
[Docs] add note and links for coercing primitive values (#408)
.IP "\(bu" 2
[Tests] clean up stringify tests slightly
.IP "\(bu" 2
[meta] fix README\&.md (#399)
.IP "\(bu" 2
Revert '[meta] ignore eclint transitive audit warning'
.IP "\(bu" 2
[actions] backport actions from main
.IP "\(bu" 2
[Dev Deps] backport updates from main
.PP
.SH "\fB6\&.9\&.6\fP"
.PP
.IP "\(bu" 2
[Fix] restore \fRdist\fP dir; mistakenly removed in d4f6c32
.PP
.SH "\fB6\&.9\&.5\fP"
.PP
.IP "\(bu" 2
[Fix] \fRstringify\fP: do not encode parens for RFC1738
.IP "\(bu" 2
[Fix] \fRstringify\fP: fix arrayFormat comma with empty array/objects (#350)
.IP "\(bu" 2
[Refactor] \fRformat\fP: remove \fRutil\&.assign\fP call
.IP "\(bu" 2
[meta] add 'Allow Edits' workflow; update rebase workflow
.IP "\(bu" 2
[actions] switch Automatic Rebase workflow to \fRpull_request_target\fP event
.IP "\(bu" 2
[Tests] \fRstringify\fP: add tests for #378
.IP "\(bu" 2
[Tests] migrate tests to Github Actions
.IP "\(bu" 2
[Tests] run \fRnyc\fP on all tests; use \fRtape\fP runner
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP, \fR@ljharb/eslint-config\fP, \fRbrowserify\fP, \fRmkdirp\fP, \fRobject-inspect\fP, \fRtape\fP; add \fRaud\fP
.PP
.SH "\fB6\&.9\&.4\fP"
.PP
.IP "\(bu" 2
[Fix] \fRstringify\fP: when \fRarrayFormat\fP is \fRcomma\fP, respect \fRserializeDate\fP (#364)
.IP "\(bu" 2
[Refactor] \fRstringify\fP: reduce branching (part of #350)
.IP "\(bu" 2
[Refactor] move \fRmaybeMap\fP to \fRutils\fP
.IP "\(bu" 2
[Dev Deps] update \fRbrowserify\fP, \fRtape\fP
.PP
.SH "\fB6\&.9\&.3\fP"
.PP
.IP "\(bu" 2
[Fix] proper comma parsing of URL-encoded commas (#361)
.IP "\(bu" 2
[Fix] parses comma delimited array while having percent-encoded comma treated as normal text (#336)
.PP
.SH "\fB6\&.9\&.2\fP"
.PP
.IP "\(bu" 2
[Fix] \fRparse\fP: Fix parsing array from object with \fRcomma\fP true (#359)
.IP "\(bu" 2
[Fix] \fRparse\fP: throw a TypeError instead of an Error for bad charset (#349)
.IP "\(bu" 2
[meta] ignore eclint transitive audit warning
.IP "\(bu" 2
[meta] fix indentation in package\&.json
.IP "\(bu" 2
[meta] add tidelift marketing copy
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP, \fR@ljharb/eslint-config\fP, \fRobject-inspect\fP, \fRhas-symbols\fP, \fRtape\fP, \fRmkdirp\fP, \fRiconv-lite\fP
.IP "\(bu" 2
[actions] add automatic rebasing / merge commit blocking
.PP
.SH "\fB6\&.9\&.1\fP"
.PP
.IP "\(bu" 2
[Fix] \fRparse\fP: with comma true, handle field that holds an array of arrays (#335)
.IP "\(bu" 2
[Fix] \fRparse\fP: with comma true, do not split non-string values (#334)
.IP "\(bu" 2
[meta] add \fRfunding\fP field
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP, \fR@ljharb/eslint-config\fP
.IP "\(bu" 2
[Tests] use shared travis-ci config
.PP
.SH "\fB6\&.9\&.0\fP"
.PP
.IP "\(bu" 2
[New] \fRparse\fP/\fRstringify\fP: Pass extra key/value argument to \fRdecoder\fP (#333)
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP, \fR@ljharb/eslint-config\fP, \fRevalmd\fP
.IP "\(bu" 2
[Tests] \fRparse\fP: add passing \fRarrayFormat\fP tests
.IP "\(bu" 2
[Tests] add \fRposttest\fP using \fRnpx aud\fP to run \fRnpm audit\fP without a lockfile
.IP "\(bu" 2
[Tests] up to \fRnode\fP \fRv12\&.10\fP, \fRv11\&.15\fP, \fRv10\&.16\fP, \fRv8\&.16\fP
.IP "\(bu" 2
[Tests] \fRBuffer\&.from\fP in node v5\&.0-v5\&.9 and v4\&.0-v4\&.4 requires a TypedArray
.PP
.SH "\fB6\&.8\&.3\fP"
.PP
.IP "\(bu" 2
[Fix] \fRparse\fP: ignore \fR__proto__\fP keys (#428)
.IP "\(bu" 2
[Robustness] \fRstringify\fP: avoid relying on a global \fRundefined\fP (#427)
.IP "\(bu" 2
[Fix] \fRstringify\fP: avoid encoding arrayformat comma when \fRencodeValuesOnly = true\fP (#424)
.IP "\(bu" 2
[readme] remove travis badge; add github actions/codecov badges; update URLs
.IP "\(bu" 2
[Tests] clean up stringify tests slightly
.IP "\(bu" 2
[Docs] add note and links for coercing primitive values (#408)
.IP "\(bu" 2
[meta] fix README\&.md (#399)
.IP "\(bu" 2
[actions] backport actions from main
.IP "\(bu" 2
[Dev Deps] backport updates from main
.IP "\(bu" 2
[Refactor] \fRstringify\fP: reduce branching
.IP "\(bu" 2
[meta] do not publish workflow files
.PP
.SH "\fB6\&.8\&.2\fP"
.PP
.IP "\(bu" 2
[Fix] proper comma parsing of URL-encoded commas (#361)
.IP "\(bu" 2
[Fix] parses comma delimited array while having percent-encoded comma treated as normal text (#336)
.PP
.SH "\fB6\&.8\&.1\fP"
.PP
.IP "\(bu" 2
[Fix] \fRparse\fP: Fix parsing array from object with \fRcomma\fP true (#359)
.IP "\(bu" 2
[Fix] \fRparse\fP: throw a TypeError instead of an Error for bad charset (#349)
.IP "\(bu" 2
[Fix] \fRparse\fP: with comma true, handle field that holds an array of arrays (#335)
.IP "\(bu" 2
[fix] \fRparse\fP: with comma true, do not split non-string values (#334)
.IP "\(bu" 2
[meta] add tidelift marketing copy
.IP "\(bu" 2
[meta] add \fRfunding\fP field
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP, \fR@ljharb/eslint-config\fP, \fRtape\fP, \fRsafe-publish-latest\fP, \fRevalmd\fP, \fRhas-symbols\fP, \fRiconv-lite\fP, \fRmkdirp\fP, \fRobject-inspect\fP
.IP "\(bu" 2
[Tests] \fRparse\fP: add passing \fRarrayFormat\fP tests
.IP "\(bu" 2
[Tests] use shared travis-ci configs
.IP "\(bu" 2
[Tests] \fRBuffer\&.from\fP in node v5\&.0-v5\&.9 and v4\&.0-v4\&.4 requires a TypedArray
.IP "\(bu" 2
[actions] add automatic rebasing / merge commit blocking
.PP
.SH "\fB6\&.8\&.0\fP"
.PP
.IP "\(bu" 2
[New] add \fRdepth=false\fP to preserve the original key; [Fix] \fRdepth=0\fP should preserve the original key (#326)
.IP "\(bu" 2
[New] [Fix] stringify symbols and bigints
.IP "\(bu" 2
[Fix] ensure node 0\&.12 can stringify Symbols
.IP "\(bu" 2
[Fix] fix for an impossible situation: when the formatter is called with a non-string value
.IP "\(bu" 2
[Refactor] \fRformats\fP: tiny bit of cleanup\&.
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP, \fR@ljharb/eslint-config\fP, \fRbrowserify\fP, \fRsafe-publish-latest\fP, \fRiconv-lite\fP, \fRtape\fP
.IP "\(bu" 2
[Tests] add tests for \fRdepth=0\fP and \fRdepth=false\fP behavior, both current and intuitive/intended (#326)
.IP "\(bu" 2
[Tests] use \fReclint\fP instead of \fReditorconfig-tools\fP
.IP "\(bu" 2
[docs] readme: add security note
.IP "\(bu" 2
[meta] add github sponsorship
.IP "\(bu" 2
[meta] add FUNDING\&.yml
.IP "\(bu" 2
[meta] Clean up license text so itâ€™s properly detected as BSD-3-Clause
.PP
.SH "\fB6\&.7\&.3\fP"
.PP
.IP "\(bu" 2
[Fix] \fRparse\fP: ignore \fR__proto__\fP keys (#428)
.IP "\(bu" 2
[Fix] \fRstringify\fP: avoid encoding arrayformat comma when \fRencodeValuesOnly = true\fP (#424)
.IP "\(bu" 2
[Robustness] \fRstringify\fP: avoid relying on a global \fRundefined\fP (#427)
.IP "\(bu" 2
[readme] remove travis badge; add github actions/codecov badges; update URLs
.IP "\(bu" 2
[Docs] add note and links for coercing primitive values (#408)
.IP "\(bu" 2
[meta] fix README\&.md (#399)
.IP "\(bu" 2
[meta] do not publish workflow files
.IP "\(bu" 2
[actions] backport actions from main
.IP "\(bu" 2
[Dev Deps] backport updates from main
.IP "\(bu" 2
[Tests] use \fRnyc\fP for coverage
.IP "\(bu" 2
[Tests] clean up stringify tests slightly
.PP
.SH "\fB6\&.7\&.2\fP"
.PP
.IP "\(bu" 2
[Fix] proper comma parsing of URL-encoded commas (#361)
.IP "\(bu" 2
[Fix] parses comma delimited array while having percent-encoded comma treated as normal text (#336)
.PP
.SH "\fB6\&.7\&.1\fP"
.PP
.IP "\(bu" 2
[Fix] \fRparse\fP: Fix parsing array from object with \fRcomma\fP true (#359)
.IP "\(bu" 2
[Fix] \fRparse\fP: with comma true, handle field that holds an array of arrays (#335)
.IP "\(bu" 2
[fix] \fRparse\fP: with comma true, do not split non-string values (#334)
.IP "\(bu" 2
[Fix] \fRparse\fP: throw a TypeError instead of an Error for bad charset (#349)
.IP "\(bu" 2
[Fix] fix for an impossible situation: when the formatter is called with a non-string value
.IP "\(bu" 2
[Refactor] \fRformats\fP: tiny bit of cleanup\&.
.IP "\(bu" 2
readme: add security note
.IP "\(bu" 2
[meta] add tidelift marketing copy
.IP "\(bu" 2
[meta] add \fRfunding\fP field
.IP "\(bu" 2
[meta] add FUNDING\&.yml
.IP "\(bu" 2
[meta] Clean up license text so itâ€™s properly detected as BSD-3-Clause
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP, \fR@ljharb/eslint-config\fP, \fRtape\fP, \fRsafe-publish-latest\fP, \fRevalmd\fP, \fRiconv-lite\fP, \fRmkdirp\fP, \fRobject-inspect\fP, \fRbrowserify\fP
.IP "\(bu" 2
[Tests] \fRparse\fP: add passing \fRarrayFormat\fP tests
.IP "\(bu" 2
[Tests] use shared travis-ci configs
.IP "\(bu" 2
[Tests] \fRBuffer\&.from\fP in node v5\&.0-v5\&.9 and v4\&.0-v4\&.4 requires a TypedArray
.IP "\(bu" 2
[Tests] add tests for \fRdepth=0\fP and \fRdepth=false\fP behavior, both current and intuitive/intended
.IP "\(bu" 2
[Tests] use \fReclint\fP instead of \fReditorconfig-tools\fP
.IP "\(bu" 2
[actions] add automatic rebasing / merge commit blocking
.PP
.SH "\fB6\&.7\&.0\fP"
.PP
.IP "\(bu" 2
[New] \fRstringify\fP/\fRparse\fP: add \fRcomma\fP as an \fRarrayFormat\fP option (#276, #219)
.IP "\(bu" 2
[Fix] correctly parse nested arrays (#212)
.IP "\(bu" 2
[Fix] \fRutils\&.merge\fP: avoid a crash with a null target and a truthy non-array source, also with an array source
.IP "\(bu" 2
[Robustness] \fRstringify\fP: cache \fRObject\&.prototype\&.hasOwnProperty\fP
.IP "\(bu" 2
[Refactor] \fRutils\fP: \fRisBuffer\fP: small tweak; add tests
.IP "\(bu" 2
[Refactor] use cached \fRArray\&.isArray\fP
.IP "\(bu" 2
[Refactor] \fRparse\fP/\fRstringify\fP: make a function to normalize the options
.IP "\(bu" 2
[Refactor] \fRutils\fP: reduce observable [[Get]]s
.IP "\(bu" 2
[Refactor] \fRstringify\fP/\fRutils\fP: cache \fRArray\&.isArray\fP
.IP "\(bu" 2
[Tests] always use \fRString(x)\fP over \fRx\&.toString()\fP
.IP "\(bu" 2
[Tests] fix Buffer tests to work in node < 4\&.5 and node < 5\&.10
.IP "\(bu" 2
[Tests] temporarily allow coverage to fail
.PP
.SH "\fB6\&.6\&.1\fP"
.PP
.IP "\(bu" 2
[Fix] \fRparse\fP: ignore \fR__proto__\fP keys (#428)
.IP "\(bu" 2
[Fix] fix for an impossible situation: when the formatter is called with a non-string value
.IP "\(bu" 2
[Fix] \fRutils\&.merge\fP: avoid a crash with a null target and an array source
.IP "\(bu" 2
[Fix] \fRutils\&.merge\fP: avoid a crash with a null target and a truthy non-array source
.IP "\(bu" 2
[Fix] correctly parse nested arrays
.IP "\(bu" 2
[Robustness] \fRstringify\fP: avoid relying on a global \fRundefined\fP (#427)
.IP "\(bu" 2
[Robustness] \fRstringify\fP: cache \fRObject\&.prototype\&.hasOwnProperty\fP
.IP "\(bu" 2
[Refactor] \fRformats\fP: tiny bit of cleanup\&.
.IP "\(bu" 2
[Refactor] \fRutils\fP: \fRisBuffer\fP: small tweak; add tests
.IP "\(bu" 2
[Refactor]: \fRstringify\fP/\fRutils\fP: cache \fRArray\&.isArray\fP
.IP "\(bu" 2
[Refactor] \fRutils\fP: reduce observable [[Get]]s
.IP "\(bu" 2
[Refactor] use cached \fRArray\&.isArray\fP
.IP "\(bu" 2
[Refactor] \fRparse\fP/\fRstringify\fP: make a function to normalize the options
.IP "\(bu" 2
[readme] remove travis badge; add github actions/codecov badges; update URLs
.IP "\(bu" 2
[Docs] Clarify the need for 'arrayLimit' option
.IP "\(bu" 2
[meta] fix README\&.md (#399)
.IP "\(bu" 2
[meta] do not publish workflow files
.IP "\(bu" 2
[meta] Clean up license text so itâ€™s properly detected as BSD-3-Clause
.IP "\(bu" 2
[meta] add FUNDING\&.yml
.IP "\(bu" 2
[meta] Fixes typo in CHANGELOG\&.md
.IP "\(bu" 2
[actions] backport actions from main
.IP "\(bu" 2
[Tests] fix Buffer tests to work in node < 4\&.5 and node < 5\&.10
.IP "\(bu" 2
[Tests] always use \fRString(x)\fP over \fRx\&.toString()\fP
.IP "\(bu" 2
[Dev Deps] backport from main
.PP
.SH "\fB6\&.6\&.0\fP"
.PP
.IP "\(bu" 2
[New] Add support for iso-8859-1, utf8 'sentinel' and numeric entities (#268)
.IP "\(bu" 2
[New] move two-value combine to a \fRutils\fP function (#189)
.IP "\(bu" 2
[Fix] \fRstringify\fP: fix a crash with \fRstrictNullHandling\fP and a custom \fRfilter\fP/\fRserializeDate\fP (#279)
.IP "\(bu" 2
[Fix] when \fRparseArrays\fP is false, properly handle keys ending in \fR[]\fP (#260)
.IP "\(bu" 2
[Fix] \fRstringify\fP: do not crash in an obscure combo of \fRinterpretNumericEntities\fP, a bad custom \fRdecoder\fP, & \fRiso-8859-1\fP
.IP "\(bu" 2
[Fix] \fRutils\fP: \fRmerge\fP: fix crash when \fRsource\fP is a truthy primitive & no options are provided
.IP "\(bu" 2
[refactor] \fRstringify\fP: Avoid arr = arr\&.concat(\&.\&.\&.), push to the existing instance (#269)
.IP "\(bu" 2
[Refactor] \fRparse\fP: only need to reassign the var once
.IP "\(bu" 2
[Refactor] \fRparse\fP/\fRstringify\fP: clean up \fRcharset\fP options checking; fix defaults
.IP "\(bu" 2
[Refactor] add missing defaults
.IP "\(bu" 2
[Refactor] \fRparse\fP: one less \fRconcat\fP call
.IP "\(bu" 2
[Refactor] \fRutils\fP: \fRcompactQueue\fP: make it explicitly side-effecting
.IP "\(bu" 2
[Dev Deps] update \fRbrowserify\fP, \fReslint\fP, \fR@ljharb/eslint-config\fP, \fRiconv-lite\fP, \fRsafe-publish-latest\fP, \fRtape\fP
.IP "\(bu" 2
[Tests] up to \fRnode\fP \fRv10\&.10\fP, \fRv9\&.11\fP, \fRv8\&.12\fP, \fRv6\&.14\fP, \fRv4\&.9\fP; pin included builds to LTS
.PP
.SH "\fB6\&.5\&.3\fP"
.PP
.IP "\(bu" 2
[Fix] \fRparse\fP: ignore \fR__proto__\fP keys (#428)
.IP "\(bu" 2
[Fix]utils\&.merge\fR: avoid a crash with a null target and a truthy non-array source\fP
.IP "\(bu" 2
\fR[Fix] correctly parse nested arrays\fP
.IP "\(bu" 2
\fR[Fix]\fPstringify\fR: fix a crash with\fPstrictNullHandling\fRand a custom\fPfilter\fR/\fPserializeDate\fR(#279)\fP
.IP "\(bu" 2
\fR[Fix]\fPutils\fR:\fPmerge\fR: fix crash when\fPsource\fRis a truthy primitive & no options are provided\fP
.IP "\(bu" 2
\fR[Fix] when\fPparseArrays\fRis false, properly handle keys ending in\fP[]\fR\fP
.IP "\(bu" 2
\fR[Fix] fix for an impossible situation: when the formatter is called with a non-string value\fP
.IP "\(bu" 2
\fR[Fix]\fPutils\&.merge\fR: avoid a crash with a null target and an array source\fP
.IP "\(bu" 2
\fR[Refactor]\fPutils\fR: reduce observable [[Get]]s\fP
.IP "\(bu" 2
\fR[Refactor] use cached\fPArray\&.isArray\fR\fP
.IP "\(bu" 2
\fR[Refactor]\fPstringify\fR: Avoid arr = arr\&.concat(\&.\&.\&.), push to the existing instance (#269)\fP
.IP "\(bu" 2
\fR[Refactor]\fPparse\fR: only need to reassign the var once\fP
.IP "\(bu" 2
\fR[Robustness]\fPstringify\fR: avoid relying on a global\fPundefined\fR(#427)\fP
.IP "\(bu" 2
\fR[readme] remove travis badge; add github actions/codecov badges; update URLs\fP
.IP "\(bu" 2
\fR[Docs] Clean up license text so itâ€™s properly detected as BSD-3-Clause\fP
.IP "\(bu" 2
\fR[Docs] Clarify the need for 'arrayLimit' option\fP
.IP "\(bu" 2
\fR[meta] fix README\&.md (#399)\fP
.IP "\(bu" 2
\fR[meta] add FUNDING\&.yml\fP
.IP "\(bu" 2
\fR[actions] backport actions from main\fP
.IP "\(bu" 2
\fR[Tests] always use\fPString(x)\fRover\fPx\&.toString()`
.IP "\(bu" 2
[Tests] remove nonexistent tape option
.IP "\(bu" 2
[Dev Deps] backport from main
.PP
.SH "\fB6\&.5\&.2\fP"
.PP
.IP "\(bu" 2
[Fix] use \fRsafer-buffer\fP instead of \fRBuffer\fP constructor
.IP "\(bu" 2
[Refactor] utils: \fRmodule\&.exports\fP one thing, instead of mutating \fRexports\fP (#230)
.IP "\(bu" 2
[Dev Deps] update \fRbrowserify\fP, \fReslint\fP, \fRiconv-lite\fP, \fRsafer-buffer\fP, \fRtape\fP, \fRbrowserify\fP
.PP
.SH "\fB6\&.5\&.1\fP"
.PP
.IP "\(bu" 2
[Fix] Fix parsing & compacting very deep objects (#224)
.IP "\(bu" 2
[Refactor] name utils functions
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP, \fR@ljharb/eslint-config\fP, \fRtape\fP
.IP "\(bu" 2
[Tests] up to \fRnode\fP \fRv8\&.4\fP; use \fRnvm install-latest-npm\fP so newer npm doesnâ€™t break older node
.IP "\(bu" 2
[Tests] Use precise dist for Node\&.js 0\&.6 runtime (#225)
.IP "\(bu" 2
[Tests] make 0\&.6 required, now that itâ€™s passing
.IP "\(bu" 2
[Tests] on \fRnode\fP \fRv8\&.2\fP; fix npm on node 0\&.6
.PP
.SH "\fB6\&.5\&.0\fP"
.PP
.IP "\(bu" 2
[New] add \fRutils\&.assign\fP
.IP "\(bu" 2
[New] pass default encoder/decoder to custom encoder/decoder functions (#206)
.IP "\(bu" 2
[New] \fRparse\fP/\fRstringify\fP: add \fRignoreQueryPrefix\fP/\fRaddQueryPrefix\fP options, respectively (#213)
.IP "\(bu" 2
[Fix] Handle stringifying empty objects with addQueryPrefix (#217)
.IP "\(bu" 2
[Fix] do not mutate \fRoptions\fP argument (#207)
.IP "\(bu" 2
[Refactor] \fRparse\fP: cache index to reuse in else statement (#182)
.IP "\(bu" 2
[Docs] add various badges to readme (#208)
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP, \fRbrowserify\fP, \fRiconv-lite\fP, \fRtape\fP
.IP "\(bu" 2
[Tests] up to \fRnode\fP \fRv8\&.1\fP, \fRv7\&.10\fP, \fRv6\&.11\fP; npm v4\&.6 breaks on node < v1; npm v5+ breaks on node < v4
.IP "\(bu" 2
[Tests] add \fReditorconfig-tools\fP
.PP
.SH "\fB6\&.4\&.1\fP"
.PP
.IP "\(bu" 2
[Fix] \fRparse\fP: ignore \fR__proto__\fP keys (#428)
.IP "\(bu" 2
[Fix] fix for an impossible situation: when the formatter is called with a non-string value
.IP "\(bu" 2
[Fix] use \fRsafer-buffer\fP instead of \fRBuffer\fP constructor
.IP "\(bu" 2
[Fix] \fRutils\&.merge\fP: avoid a crash with a null target and an array source
.IP "\(bu" 2
[Fix]utils\&.merge\fR: avoid a crash with a null target and a truthy non-array source\fP
.IP "\(bu" 2
\fR[Fix]\fPstringify\fR: fix a crash with\fPstrictNullHandling\fRand a custom\fPfilter\fR/\fPserializeDate\fR(#279)\fP
.IP "\(bu" 2
\fR[Fix]\fPutils\fR:\fPmerge\fR: fix crash when\fPsource\fRis a truthy primitive & no options are provided\fP
.IP "\(bu" 2
\fR[Fix] when\fPparseArrays\fRis false, properly handle keys ending in\fP[]\fR\fP
.IP "\(bu" 2
\fR[Robustness]\fPstringify\fR: avoid relying on a global\fPundefined\fR(#427)\fP
.IP "\(bu" 2
\fR[Refactor] use cached\fPArray\&.isArray\fR\fP
.IP "\(bu" 2
\fR[Refactor]\fPstringify`: Avoid arr = arr\&.concat(\&.\&.\&.), push to the existing instance (#269)
.IP "\(bu" 2
[readme] remove travis badge; add github actions/codecov badges; update URLs
.IP "\(bu" 2
[Docs] Clarify the need for 'arrayLimit' option
.IP "\(bu" 2
[meta] fix README\&.md (#399)
.IP "\(bu" 2
[meta] Clean up license text so itâ€™s properly detected as BSD-3-Clause
.IP "\(bu" 2
[meta] add FUNDING\&.yml
.IP "\(bu" 2
[actions] backport actions from main
.IP "\(bu" 2
[Tests] remove nonexistent tape option
.IP "\(bu" 2
[Dev Deps] backport from main
.PP
.SH "\fB6\&.4\&.0\fP"
.PP
.IP "\(bu" 2
[New] \fRqs\&.stringify\fP: add \fRencodeValuesOnly\fP option
.IP "\(bu" 2
[Fix] follow \fRallowPrototypes\fP option during merge (#201, #201)
.IP "\(bu" 2
[Fix] support keys starting with brackets (#202, #200)
.IP "\(bu" 2
[Fix] chmod a-x
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP
.IP "\(bu" 2
[Tests] up to \fRnode\fP \fRv7\&.7\fP, \fRv6\&.10\fP,\fRv4\&.8\fP; disable osx builds since they block linux builds
.IP "\(bu" 2
[eslint] reduce warnings
.PP
.SH "\fB6\&.3\&.3\fP"
.PP
.IP "\(bu" 2
[Fix] \fRparse\fP: ignore \fR__proto__\fP keys (#428)
.IP "\(bu" 2
[Fix] fix for an impossible situation: when the formatter is called with a non-string value
.IP "\(bu" 2
[Fix] \fRutils\&.merge\fP: avoid a crash with a null target and an array source
.IP "\(bu" 2
[Fix]utils\&.merge\fR: avoid a crash with a null target and a truthy non-array source\fP
.IP "\(bu" 2
\fR[Fix]\fPstringify\fR: fix a crash with\fPstrictNullHandling\fRand a custom\fPfilter\fR/\fPserializeDate\fR(#279)\fP
.IP "\(bu" 2
\fR[Fix]\fPutils\fR:\fPmerge\fR: fix crash when\fPsource\fRis a truthy primitive & no options are provided\fP
.IP "\(bu" 2
\fR[Fix] when\fPparseArrays\fRis false, properly handle keys ending in\fP[]\fR\fP
.IP "\(bu" 2
\fR[Robustness]\fPstringify\fR: avoid relying on a global\fPundefined\fR(#427)\fP
.IP "\(bu" 2
\fR[Refactor] use cached\fPArray\&.isArray\fR\fP
.IP "\(bu" 2
\fR[Refactor]\fPstringify\fR: Avoid arr = arr\&.concat(\&.\&.\&.), push to the existing instance (#269)\fP
.IP "\(bu" 2
\fR[Docs] Clarify the need for 'arrayLimit' option\fP
.IP "\(bu" 2
\fR[meta] fix README\&.md (#399)\fP
.IP "\(bu" 2
\fR[meta] Clean up license text so itâ€™s properly detected as BSD-3-Clause\fP
.IP "\(bu" 2
\fR[meta] add FUNDING\&.yml\fP
.IP "\(bu" 2
\fR[actions] backport actions from main\fP
.IP "\(bu" 2
\fR[Tests] use\fPsafer-buffer\fRinstead of\fPBuffer` constructor
.IP "\(bu" 2
[Tests] remove nonexistent tape option
.IP "\(bu" 2
[Dev Deps] backport from main
.PP
.SH "\fB6\&.3\&.2\fP"
.PP
.IP "\(bu" 2
[Fix] follow \fRallowPrototypes\fP option during merge (#201, #200)
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP
.IP "\(bu" 2
[Fix] chmod a-x
.IP "\(bu" 2
[Fix] support keys starting with brackets (#202, #200)
.IP "\(bu" 2
[Tests] up to \fRnode\fP \fRv7\&.7\fP, \fRv6\&.10\fP,\fRv4\&.8\fP; disable osx builds since they block linux builds
.PP
.SH "\fB6\&.3\&.1\fP"
.PP
.IP "\(bu" 2
[Fix] ensure that \fRallowPrototypes: false\fP does not ever shadow Object\&.prototype properties (thanks, @snyk!)
.IP "\(bu" 2
[Dev Deps] update \fReslint\fP, \fR@ljharb/eslint-config\fP, \fRbrowserify\fP, \fRiconv-lite\fP, \fRqs-iconv\fP, \fRtape\fP
.IP "\(bu" 2
[Tests] on all node minors; improve test matrix
.IP "\(bu" 2
[Docs] document stringify option \fRallowDots\fP (#195)
.IP "\(bu" 2
[Docs] add empty object and array values example (#195)
.IP "\(bu" 2
[Docs] Fix minor inconsistency/typo (#192)
.IP "\(bu" 2
[Docs] document stringify option \fRsort\fP (#191)
.IP "\(bu" 2
[Refactor] \fRstringify\fP: throw faster with an invalid encoder
.IP "\(bu" 2
[Refactor] remove unnecessary escapes (#184)
.IP "\(bu" 2
Remove contributing\&.md, since \fRqs\fP is no longer part of \fRhapi\fP (#183)
.PP
.SH "\fB6\&.3\&.0\fP"
.PP
.IP "\(bu" 2
[New] Add support for RFC 1738 (#174, #173)
.IP "\(bu" 2
[New] \fRstringify\fP: Add \fRserializeDate\fP option to customize Date serialization (#159)
.IP "\(bu" 2
[Fix] ensure \fRutils\&.merge\fP handles merging two arrays
.IP "\(bu" 2
[Refactor] only constructors should be capitalized
.IP "\(bu" 2
[Refactor] capitalized var names are for constructors only
.IP "\(bu" 2
[Refactor] avoid using a sparse array
.IP "\(bu" 2
[Robustness] \fRformats\fP: cache \fRString#replace\fP
.IP "\(bu" 2
[Dev Deps] update \fRbrowserify\fP, \fReslint\fP, \fR@ljharb/eslint-config\fP; add \fRsafe-publish-latest\fP
.IP "\(bu" 2
[Tests] up to \fRnode\fP \fRv6\&.8\fP, \fRv4\&.6\fP; improve test matrix
.IP "\(bu" 2
[Tests] flesh out arrayLimit/arrayFormat tests (#107)
.IP "\(bu" 2
[Tests] skip Object\&.create tests when null objects are not available
.IP "\(bu" 2
[Tests] Turn on eslint for test files (#175)
.PP
.SH "\fB6\&.2\&.4\fP"
.PP
.IP "\(bu" 2
[Fix] \fRparse\fP: ignore \fR__proto__\fP keys (#428)
.IP "\(bu" 2
[Fix] \fRutils\&.merge\fP: avoid a crash with a null target and an array source
.IP "\(bu" 2
[Fix] \fRutils\&.merge\fP: avoid a crash with a null target and a truthy non-array source
.IP "\(bu" 2
[Fix] \fRutils\fP: \fRmerge\fP: fix crash when \fRsource\fP is a truthy primitive & no options are provided
.IP "\(bu" 2
[Fix] when \fRparseArrays\fP is false, properly handle keys ending in \fR[]\fP
.IP "\(bu" 2
[Robustness] \fRstringify\fP: avoid relying on a global \fRundefined\fP (#427)
.IP "\(bu" 2
[Refactor] use cached \fRArray\&.isArray\fP
.IP "\(bu" 2
[Docs] Clarify the need for 'arrayLimit' option
.IP "\(bu" 2
[meta] fix README\&.md (#399)
.IP "\(bu" 2
[meta] Clean up license text so itâ€™s properly detected as BSD-3-Clause
.IP "\(bu" 2
[meta] add FUNDING\&.yml
.IP "\(bu" 2
[actions] backport actions from main
.IP "\(bu" 2
[Tests] use \fRsafer-buffer\fP instead of \fRBuffer\fP constructor
.IP "\(bu" 2
[Tests] remove nonexistent tape option
.IP "\(bu" 2
[Dev Deps] backport from main
.PP
.SH "\fB6\&.2\&.3\fP"
.PP
.IP "\(bu" 2
[Fix] follow \fRallowPrototypes\fP option during merge (#201, #200)
.IP "\(bu" 2
[Fix] chmod a-x
.IP "\(bu" 2
[Fix] support keys starting with brackets (#202, #200)
.IP "\(bu" 2
[Tests] up to \fRnode\fP \fRv7\&.7\fP, \fRv6\&.10\fP,\fRv4\&.8\fP; disable osx builds since they block linux builds
.PP
.SH "\fB6\&.2\&.2\fP"
.PP
.IP "\(bu" 2
[Fix] ensure that \fRallowPrototypes: false\fP does not ever shadow Object\&.prototype properties
.PP
.SH "\fB6\&.2\&.1\fP"
.PP
.IP "\(bu" 2
[Fix] ensure \fRkey[]=x&key[]&key[]=y\fP results in 3, not 2, values
.IP "\(bu" 2
[Refactor] Be explicit and use \fRObject\&.prototype\&.hasOwnProperty\&.call\fP
.IP "\(bu" 2
[Tests] remove \fRparallelshell\fP since it does not reliably report failures
.IP "\(bu" 2
[Tests] up to \fRnode\fP \fRv6\&.3\fP, \fRv5\&.12\fP
.IP "\(bu" 2
[Dev Deps] update \fRtape\fP, \fReslint\fP, \fR@ljharb/eslint-config\fP, \fRqs-iconv\fP
.PP
.SH "\fR\fB6\&.2\&.0\fP\fP"
.PP
.IP "\(bu" 2
[New] pass Buffers to the encoder/decoder directly (#161)
.IP "\(bu" 2
[New] add 'encoder' and 'decoder' options, for custom param encoding/decoding (#160)
.IP "\(bu" 2
[Fix] fix compacting of nested sparse arrays (#150)
.PP
.SH "**6\&.1\&.2"
.PP
.IP "\(bu" 2
[Fix] follow \fRallowPrototypes\fP option during merge (#201, #200)
.IP "\(bu" 2
[Fix] chmod a-x
.IP "\(bu" 2
[Fix] support keys starting with brackets (#202, #200)
.IP "\(bu" 2
[Tests] up to \fRnode\fP \fRv7\&.7\fP, \fRv6\&.10\fP,\fRv4\&.8\fP; disable osx builds since they block linux builds
.PP
.SH "\fB6\&.1\&.1\fP"
.PP
.IP "\(bu" 2
[Fix] ensure that \fRallowPrototypes: false\fP does not ever shadow Object\&.prototype properties
.PP
.SH "\fR\fB6\&.1\&.0\fP\fP"
.PP
.IP "\(bu" 2
[New] allowDots option for \fRstringify\fP (#151)
.IP "\(bu" 2
[Fix] 'sort' option should work at a depth of 3 or more (#151)
.IP "\(bu" 2
[Fix] Restore \fRdist\fP directory; will be removed in v7 (#148)
.PP
.SH "\fB6\&.0\&.4\fP"
.PP
.IP "\(bu" 2
[Fix] follow \fRallowPrototypes\fP option during merge (#201, #200)
.IP "\(bu" 2
[Fix] chmod a-x
.IP "\(bu" 2
[Fix] support keys starting with brackets (#202, #200)
.IP "\(bu" 2
[Tests] up to \fRnode\fP \fRv7\&.7\fP, \fRv6\&.10\fP,\fRv4\&.8\fP; disable osx builds since they block linux builds
.PP
.SH "\fB6\&.0\&.3\fP"
.PP
.IP "\(bu" 2
[Fix] ensure that \fRallowPrototypes: false\fP does not ever shadow Object\&.prototype properties
.IP "\(bu" 2
[Fix] Restore \fRdist\fP directory; will be removed in v7 (#148)
.PP
.SH "\fR\fB6\&.0\&.2\fP\fP"
.PP
.IP "\(bu" 2
Revert ES6 requirement and restore support for node down to v0\&.8\&.
.PP
.SH "\fR\fB6\&.0\&.1\fP\fP"
.PP
.IP "\(bu" 2
\fR**#127**\fP Fix engines definition in package\&.json
.PP
.SH "\fR\fB6\&.0\&.0\fP\fP"
.PP
.IP "\(bu" 2
\fR**#124**\fP Use ES6 and drop support for node < v4
.PP
.SH "\fB5\&.2\&.1\fP"
.PP
.IP "\(bu" 2
[Fix] ensure \fRkey[]=x&key[]&key[]=y\fP results in 3, not 2, values
.PP
.SH "\fR\fB5\&.2\&.0\fP\fP"
.PP
.IP "\(bu" 2
\fR**#64**\fP Add option to sort object keys in the query string
.PP
.SH "\fR\fB5\&.1\&.0\fP\fP"
.PP
.IP "\(bu" 2
\fR**#117**\fP make URI encoding stringified results optional
.IP "\(bu" 2
\fR**#106**\fP Add flag \fRskipNulls\fP to optionally skip null values in stringify
.PP
.SH "\fR\fB5\&.0\&.0\fP\fP"
.PP
.IP "\(bu" 2
\fR**#114**\fP default allowDots to false
.IP "\(bu" 2
\fR**#100**\fP include dist to npm
.PP
.SH "\fR\fB4\&.0\&.0\fP\fP"
.PP
.IP "\(bu" 2
\fR**#98**\fP make returning plain objects and allowing prototype overwriting properties optional
.PP
.SH "\fR\fB3\&.1\&.0\fP\fP"
.PP
.IP "\(bu" 2
\fR**#89**\fP Add option to disable 'Transform dot notation to bracket notation'
.PP
.SH "\fR\fB3\&.0\&.0\fP\fP"
.PP
.IP "\(bu" 2
\fR**#80**\fP qs\&.parse silently drops properties
.IP "\(bu" 2
\fR**#77**\fP Perf boost
.IP "\(bu" 2
\fR**#60**\fP Add explicit option to disable array parsing
.IP "\(bu" 2
\fR**#74**\fP Bad parse when turning array into object
.IP "\(bu" 2
\fR**#81**\fP Add a \fRfilter\fP option
.IP "\(bu" 2
\fR**#68**\fP Fixed issue with recursion and passing strings into objects\&.
.IP "\(bu" 2
\fR**#66**\fP Add mixed array and object dot notation support Closes: #47
.IP "\(bu" 2
\fR**#76**\fP RFC 3986
.IP "\(bu" 2
\fR**#85**\fP No equal sign
.IP "\(bu" 2
\fR**#84**\fP update license attribute
.PP
.SH "\fR\fB2\&.4\&.1\fP\fP"
.PP
.IP "\(bu" 2
\fR**#73**\fP Property 'hasOwnProperty' of object #<Object> is not a function
.PP
.SH "\fR\fB2\&.4\&.0\fP\fP"
.PP
.IP "\(bu" 2
\fR**#70**\fP Add arrayFormat option
.PP
.SH "\fR\fB2\&.3\&.3\fP\fP"
.PP
.IP "\(bu" 2
\fR**#59**\fP make sure array indexes are >= 0, closes #57
.IP "\(bu" 2
\fR**#58**\fP make qs usable for browser loader
.PP
.SH "\fR\fB2\&.3\&.2\fP\fP"
.PP
.IP "\(bu" 2
\fR**#55**\fP allow merging a string into an object
.PP
.SH "\fR\fB2\&.3\&.1\fP\fP"
.PP
.IP "\(bu" 2
\fR**#52**\fP Return 'undefined' and 'false' instead of throwing 'TypeError'\&.
.PP
.SH "\fR\fB2\&.3\&.0\fP\fP"
.PP
.IP "\(bu" 2
\fR**#50**\fP add option to omit array indices, closes #46
.PP
.SH "\fR\fB2\&.2\&.5\fP\fP"
.PP
.IP "\(bu" 2
\fR**#39**\fP Is there an alternative to Buffer\&.isBuffer?
.IP "\(bu" 2
\fR**#49**\fP refactor utils\&.merge, fixes #45
.IP "\(bu" 2
\fR**#41**\fP avoid browserifying Buffer, for #39
.PP
.SH "\fR\fB2\&.2\&.4\fP\fP"
.PP
.IP "\(bu" 2
\fR**#38**\fP how to handle object keys beginning with a number
.PP
.SH "\fR\fB2\&.2\&.3\fP\fP"
.PP
.IP "\(bu" 2
\fR**#37**\fP parser discards first empty value in array
.IP "\(bu" 2
\fR**#36**\fP Update to lab 4\&.x
.PP
.SH "\fR\fB2\&.2\&.2\fP\fP"
.PP
.IP "\(bu" 2
\fR**#33**\fP Error when plain object in a value
.IP "\(bu" 2
\fR**#34**\fP use Object\&.prototype\&.hasOwnProperty\&.call instead of obj\&.hasOwnProperty
.IP "\(bu" 2
\fR**#24**\fP Changelog? Semver?
.PP
.SH "\fR\fB2\&.2\&.1\fP\fP"
.PP
.IP "\(bu" 2
\fR**#32**\fP account for circular references properly, closes #31
.IP "\(bu" 2
\fR**#31**\fP qs\&.parse stackoverflow on circular objects
.PP
.SH "\fR\fB2\&.2\&.0\fP\fP"
.PP
.IP "\(bu" 2
\fR**#26**\fP Don't use Buffer global if it's not present
.IP "\(bu" 2
\fR**#30**\fP Bug when merging non-object values into arrays
.IP "\(bu" 2
\fR**#29**\fP Don't call Utils\&.clone at the top of Utils\&.merge
.IP "\(bu" 2
\fR**#23**\fP Ability to not limit parameters?
.PP
.SH "\fR\fB2\&.1\&.0\fP\fP"
.PP
.IP "\(bu" 2
\fR**#22**\fP Enable using a RegExp as delimiter
.PP
.SH "\fR\fB2\&.0\&.0\fP\fP"
.PP
.IP "\(bu" 2
\fR**#18**\fP Why is there arrayLimit?
.IP "\(bu" 2
\fR**#20**\fP Configurable parametersLimit
.IP "\(bu" 2
\fR**#21**\fP make all limits optional, for #18, for #20
.PP
.SH "\fR\fB1\&.2\&.2\fP\fP"
.PP
.IP "\(bu" 2
\fR**#19**\fP Don't overwrite null values
.PP
.SH "\fR\fB1\&.2\&.1\fP\fP"
.PP
.IP "\(bu" 2
\fR**#16**\fP ignore non-string delimiters
.IP "\(bu" 2
\fR**#15**\fP Close code block
.PP
.SH "\fR\fB1\&.2\&.0\fP\fP"
.PP
.IP "\(bu" 2
\fR**#12**\fP Add optional delim argument
.IP "\(bu" 2
\fR**#13**\fP fix #11: flattened keys in array are now correctly parsed
.PP
.SH "\fR\fB1\&.1\&.0\fP\fP"
.PP
.IP "\(bu" 2
\fR**#7**\fP Empty values of a POST array disappear after being submitted
.IP "\(bu" 2
\fR**#9**\fP Should not omit equals signs (=) when value is null
.IP "\(bu" 2
\fR**#6**\fP Minor grammar fix in README
.PP
.SH "\fR\fB1\&.0\&.2\fP\fP"
.PP
.IP "\(bu" 2
\fR**#5**\fP array holes incorrectly copied into object on large index 
.PP

