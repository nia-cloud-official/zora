.TH "node_sqlite3::Backup" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
node_sqlite3::Backup
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <backup\&.h>\fP
.PP
Inherits \fBNapi::ObjectWrap< Backup >\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBBaton\fP"
.br
.ti -1c
.RI "struct \fBCall\fP"
.br
.ti -1c
.RI "struct \fBInitializeBaton\fP"
.br
.ti -1c
.RI "struct \fBStepBaton\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef void(* \fBWork_Callback\fP) (\fBBaton\fP *baton)"
.br
.in -1c

Public Types inherited from \fBNapi::ObjectWrap< Backup >\fP
.in +1c
.ti -1c
.RI "using \fBStaticVoidMethodCallback\fP"
.br
.ti -1c
.RI "using \fBStaticMethodCallback\fP"
.br
.ti -1c
.RI "using \fBStaticGetterCallback\fP"
.br
.ti -1c
.RI "using \fBStaticSetterCallback\fP"
.br
.ti -1c
.RI "using \fBPropertyDescriptor\fP"
.br
.in -1c

Public Types inherited from \fBNapi::InstanceWrap< Backup >\fP
.in +1c
.ti -1c
.RI "using \fBInstanceVoidMethodCallback\fP"
.br
.ti -1c
.RI "using \fBInstanceMethodCallback\fP"
.br
.ti -1c
.RI "using \fBInstanceGetterCallback\fP"
.br
.ti -1c
.RI "using \fBInstanceSetterCallback\fP"
.br
.ti -1c
.RI "using \fBPropertyDescriptor\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBackup\fP (const \fBNapi::CallbackInfo\fP &info)"
.br
.ti -1c
.RI "\fB~Backup\fP ()"
.br
.ti -1c
.RI "\fBNapi::Value\fP \fBIdleGetter\fP (const \fBNapi::CallbackInfo\fP &info)"
.br
.ti -1c
.RI "\fBNapi::Value\fP \fBCompletedGetter\fP (const \fBNapi::CallbackInfo\fP &info)"
.br
.ti -1c
.RI "\fBNapi::Value\fP \fBFailedGetter\fP (const \fBNapi::CallbackInfo\fP &info)"
.br
.ti -1c
.RI "\fBNapi::Value\fP \fBPageCountGetter\fP (const \fBNapi::CallbackInfo\fP &info)"
.br
.ti -1c
.RI "\fBNapi::Value\fP \fBRemainingGetter\fP (const \fBNapi::CallbackInfo\fP &info)"
.br
.ti -1c
.RI "\fBNapi::Value\fP \fBFatalErrorGetter\fP (const \fBNapi::CallbackInfo\fP &info)"
.br
.ti -1c
.RI "\fBNapi::Value\fP \fBRetryErrorGetter\fP (const \fBNapi::CallbackInfo\fP &info)"
.br
.ti -1c
.RI "void \fBFatalErrorSetter\fP (const \fBNapi::CallbackInfo\fP &info, const \fBNapi::Value\fP &value)"
.br
.ti -1c
.RI "void \fBRetryErrorSetter\fP (const \fBNapi::CallbackInfo\fP &info, const \fBNapi::Value\fP &value)"
.br
.in -1c

Public Member Functions inherited from \fBNapi::ObjectWrap< Backup >\fP
.in +1c
.ti -1c
.RI "\fBObjectWrap\fP (const \fBCallbackInfo\fP &callbackInfo)"
.br
.ti -1c
.RI "virtual \fB~ObjectWrap\fP ()"
.br
.ti -1c
.RI "\fBClassPropertyDescriptor\fP< Backup > \fBStaticMethod\fP (const char *utf8name, napi_property_attributes attributes, void *data)"
.br
.ti -1c
.RI "\fBClassPropertyDescriptor\fP< Backup > \fBStaticMethod\fP (\fBSymbol\fP name, napi_property_attributes attributes, void *data)"
.br
.ti -1c
.RI "\fBClassPropertyDescriptor\fP< Backup > \fBStaticAccessor\fP (const char *utf8name, napi_property_attributes attributes, void *data)"
.br
.ti -1c
.RI "\fBClassPropertyDescriptor\fP< Backup > \fBStaticAccessor\fP (\fBSymbol\fP name, napi_property_attributes attributes, void *data)"
.br
.ti -1c
.RI "virtual void \fBFinalize\fP (\fBNapi::Env\fP env)"
.br
.in -1c

Public Member Functions inherited from \fBNapi::InstanceWrap< Backup >\fP
.in +1c
.ti -1c
.RI "\fBClassPropertyDescriptor\fP< Backup > \fBInstanceMethod\fP (const char *utf8name, napi_property_attributes attributes, void *data)"
.br
.ti -1c
.RI "\fBClassPropertyDescriptor\fP< Backup > \fBInstanceMethod\fP (\fBSymbol\fP name, napi_property_attributes attributes, void *data)"
.br
.ti -1c
.RI "\fBClassPropertyDescriptor\fP< Backup > \fBInstanceAccessor\fP (const char *utf8name, napi_property_attributes attributes, void *data)"
.br
.ti -1c
.RI "\fBClassPropertyDescriptor\fP< Backup > \fBInstanceAccessor\fP (\fBSymbol\fP name, napi_property_attributes attributes, void *data)"
.br
.in -1c

Public Member Functions inherited from \fBNapi::Reference< Object >\fP
.in +1c
.ti -1c
.RI "\fBReference\fP ()"
.br
.ti -1c
.RI "\fBReference\fP (napi_env env, napi_ref ref)"
.br
.ti -1c
.RI "\fBReference\fP (\fBReference\fP< \fBObject\fP > &&other)"
.br
.ti -1c
.RI "\fB~Reference\fP ()"
.br
.ti -1c
.RI "\fBReference\fP< \fBObject\fP > & \fBoperator=\fP (\fBReference\fP< \fBObject\fP > &&other)"
.br
.ti -1c
.RI "\fBoperator napi_ref\fP () const"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBReference\fP< \fBObject\fP > &other) const"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBReference\fP< \fBObject\fP > &other) const"
.br
.ti -1c
.RI "\fBNapi::Env\fP \fBEnv\fP () const"
.br
.ti -1c
.RI "bool \fBIsEmpty\fP () const"
.br
.ti -1c
.RI "\fBObject\fP \fBValue\fP () const"
.br
.ti -1c
.RI "uint32_t \fBRef\fP () const"
.br
.ti -1c
.RI "uint32_t \fBUnref\fP () const"
.br
.ti -1c
.RI "void \fBReset\fP ()"
.br
.ti -1c
.RI "void \fBReset\fP (const \fBObject\fP &value, uint32_t refcount=0)"
.br
.ti -1c
.RI "void \fBSuppressDestruct\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBNapi::Object\fP \fBInit\fP (\fBNapi::Env\fP env, \fBNapi::Object\fP exports)"
.br
.in -1c

Static Public Member Functions inherited from \fBNapi::ObjectWrap< Backup >\fP
.in +1c
.ti -1c
.RI "static Backup * \fBUnwrap\fP (\fBObject\fP wrapper)"
.br
.ti -1c
.RI "static \fBFunction\fP \fBDefineClass\fP (\fBNapi::Env\fP env, const char *utf8name, const std::initializer_list< \fBPropertyDescriptor\fP > &properties, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBFunction\fP \fBDefineClass\fP (\fBNapi::Env\fP env, const char *utf8name, const std::vector< \fBPropertyDescriptor\fP > &properties, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBStaticMethod\fP (const char *utf8name, \fBStaticVoidMethodCallback\fP method, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBStaticMethod\fP (const char *utf8name, \fBStaticMethodCallback\fP method, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBStaticMethod\fP (\fBSymbol\fP name, \fBStaticVoidMethodCallback\fP method, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBStaticMethod\fP (\fBSymbol\fP name, \fBStaticMethodCallback\fP method, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBStaticMethod\fP (const char *utf8name, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBStaticMethod\fP (\fBSymbol\fP name, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBStaticMethod\fP (const char *utf8name, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBStaticMethod\fP (\fBSymbol\fP name, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBStaticAccessor\fP (const char *utf8name, \fBStaticGetterCallback\fP getter, \fBStaticSetterCallback\fP setter, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBStaticAccessor\fP (\fBSymbol\fP name, \fBStaticGetterCallback\fP getter, \fBStaticSetterCallback\fP setter, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBStaticAccessor\fP (const char *utf8name, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBStaticAccessor\fP (\fBSymbol\fP name, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBStaticValue\fP (const char *utf8name, \fBNapi::Value\fP value, napi_property_attributes attributes=napi_default)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBStaticValue\fP (\fBSymbol\fP name, \fBNapi::Value\fP value, napi_property_attributes attributes=napi_default)"
.br
.ti -1c
.RI "static \fBNapi::Value\fP \fBOnCalledAsFunction\fP (const \fBNapi::CallbackInfo\fP &callbackInfo)"
.br
.in -1c

Static Public Member Functions inherited from \fBNapi::InstanceWrap< Backup >\fP
.in +1c
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBInstanceMethod\fP (const char *utf8name, \fBInstanceVoidMethodCallback\fP method, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBInstanceMethod\fP (const char *utf8name, \fBInstanceMethodCallback\fP method, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBInstanceMethod\fP (\fBSymbol\fP name, \fBInstanceVoidMethodCallback\fP method, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBInstanceMethod\fP (\fBSymbol\fP name, \fBInstanceMethodCallback\fP method, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBInstanceMethod\fP (const char *utf8name, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBInstanceMethod\fP (const char *utf8name, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBInstanceMethod\fP (\fBSymbol\fP name, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBInstanceMethod\fP (\fBSymbol\fP name, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBInstanceAccessor\fP (const char *utf8name, \fBInstanceGetterCallback\fP getter, \fBInstanceSetterCallback\fP setter, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBInstanceAccessor\fP (\fBSymbol\fP name, \fBInstanceGetterCallback\fP getter, \fBInstanceSetterCallback\fP setter, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBInstanceAccessor\fP (const char *utf8name, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBInstanceAccessor\fP (\fBSymbol\fP name, napi_property_attributes attributes=napi_default, void *data=nullptr)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBInstanceValue\fP (const char *utf8name, \fBNapi::Value\fP value, napi_property_attributes attributes=napi_default)"
.br
.ti -1c
.RI "static \fBPropertyDescriptor\fP \fBInstanceValue\fP (\fBSymbol\fP name, \fBNapi::Value\fP value, napi_property_attributes attributes=napi_default)"
.br
.in -1c

Static Public Member Functions inherited from \fBNapi::Reference< Object >\fP
.in +1c
.ti -1c
.RI "static \fBReference\fP< \fBObject\fP > \fBNew\fP (const \fBObject\fP &value, uint32_t initialRefcount=0)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBSchedule\fP (\fBWork_Callback\fP callback, \fBBaton\fP *baton)"
.br
.ti -1c
.RI "void \fBProcess\fP ()"
.br
.ti -1c
.RI "void \fBCleanQueue\fP ()"
.br
.ti -1c
.RI "void \fBFinishAll\fP ()"
.br
.ti -1c
.RI "void \fBFinishSqlite\fP ()"
.br
.ti -1c
.RI "void \fBGetRetryErrors\fP (std::set< int > &retryErrorsSet)"
.br
.in -1c

Protected Member Functions inherited from \fBNapi::Reference< Object >\fP
.in +1c
.ti -1c
.RI "\fBReference\fP (const \fBReference\fP< \fBObject\fP > &)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static void \fBWork_BeginInitialize\fP (\fBDatabase::Baton\fP *baton)"
.br
.ti -1c
.RI "static void \fBWork_Initialize\fP (napi_env env, void *data)"
.br
.ti -1c
.RI "static void \fBWork_AfterInitialize\fP (napi_env env, napi_status \fBstatus\fP, void *data)"
.br
.ti -1c
.RI "template<class T > static void \fBError\fP (T *baton)"
.br
.in -1c

Static Protected Member Functions inherited from \fBNapi::InstanceWrap< Backup >\fP
.in +1c
.ti -1c
.RI "static void \fBAttachPropData\fP (napi_env env, napi_value value, const napi_property_descriptor *prop)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBDatabase\fP * \fBdb\fP"
.br
.ti -1c
.RI "sqlite3_backup * \fB_handle\fP = NULL"
.br
.ti -1c
.RI "sqlite3 * \fB_otherDb\fP = NULL"
.br
.ti -1c
.RI "sqlite3 * \fB_destDb\fP = NULL"
.br
.ti -1c
.RI "bool \fBinited\fP = false"
.br
.ti -1c
.RI "bool \fBlocked\fP = true"
.br
.ti -1c
.RI "bool \fBcompleted\fP = false"
.br
.ti -1c
.RI "bool \fBfailed\fP = false"
.br
.ti -1c
.RI "int \fBremaining\fP = \-1"
.br
.ti -1c
.RI "int \fBpageCount\fP = \-1"
.br
.ti -1c
.RI "bool \fBfinished\fP = false"
.br
.ti -1c
.RI "int \fBstatus\fP"
.br
.ti -1c
.RI "std::string \fBmessage\fP"
.br
.ti -1c
.RI "std::queue< std::unique_ptr< \fBCall\fP > > \fBqueue\fP"
.br
.ti -1c
.RI "\fBNapi::Reference\fP< \fBArray\fP > \fBretryErrors\fP"
.br
.in -1c

Protected Attributes inherited from \fBNapi::Reference< Object >\fP
.in +1c
.ti -1c
.RI "napi_env \fB_env\fP"
.br
.RI "!cond INTERNAL "
.ti -1c
.RI "napi_ref \fB_ref\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A class for managing an sqlite3_backup object\&. For consistency with other node-sqlite3 classes, it maintains an internal queue of calls\&.
.PP
Intended usage from node:
.PP
var db = new sqlite3\&.Database('live\&.db'); var backup = db\&.backup('backup\&.db'); \&.\&.\&. // in event loop, move backup forward when we have time\&. if (backup\&.idle) { backup\&.step(NPAGES); } if (backup\&.completed) { \&.\&.\&. success \&.\&.\&. } if (backup\&.failed) { \&.\&.\&. sadness \&.\&.\&. } // do other work in event loop - fine to modify live\&.db \&.\&.\&.
.PP
Here is how sqlite's backup api is exposed:
.PP
.IP "\(bu" 2
\fRsqlite3_backup_init\fP: This is implemented as \fRdb\&.backup(filename, [callback])\fP or \fRdb\&.backup(filename, destDbName, sourceDbName, filenameIsDest, [callback])\fP\&.
.IP "\(bu" 2
\fRsqlite3_backup_step\fP: \fRbackup\&.step(pages, [callback])\fP\&.
.IP "\(bu" 2
\fRsqlite3_backup_finish\fP: \fRbackup\&.finish([callback])\fP\&.
.IP "\(bu" 2
\fRsqlite3_backup_remaining\fP: \fRbackup\&.remaining\fP\&.
.IP "\(bu" 2
\fRsqlite3_backup_pagecount\fP: \fRbackup\&.pageCount\fP\&.
.PP
.PP
There are the following read-only properties:
.PP
.IP "\(bu" 2
\fRbackup\&.completed\fP is set to \fRtrue\fP when the backup succeeeds\&.
.IP "\(bu" 2
\fRbackup\&.failed\fP is set to \fRtrue\fP when the backup has a fatal error\&.
.IP "\(bu" 2
\fRbackup\&.idle\fP is set to \fRtrue\fP when no operation is currently in progress or queued for the backup\&.
.IP "\(bu" 2
\fRbackup\&.remaining\fP is an integer with the remaining number of pages after the last call to \fRbackup\&.step\fP (-1 if \fRstep\fP not yet called)\&.
.IP "\(bu" 2
\fRbackup\&.pageCount\fP is an integer with the total number of pages measured during the last call to \fRbackup\&.step\fP (-1 if \fRstep\fP not yet called)\&.
.PP
.PP
There is the following writable property:
.PP
.IP "\(bu" 2
\fRbackup\&.retryErrors\fP: an array of sqlite3 error codes that are treated as non-fatal - meaning, if they occur, backup\&.failed is not set, and the backup may continue\&. By default, this is \fR[sqlite3\&.BUSY, sqlite3\&.LOCKED]\fP\&.
.PP
.PP
The \fRdb\&.backup(filename, [callback])\fP shorthand is sufficient for making a backup of a database opened by node-sqlite3\&. If using attached or temporary databases, or moving data in the opposite direction, the more complete (but daunting) \fRdb\&.backup(filename, destDbName, sourceDbName, filenameIsDest, [callback])\fP signature is provided\&.
.PP
A backup will finish automatically when it succeeds or a fatal error occurs, meaning it is not necessary to call \fRdb\&.finish()\fP\&. By default, SQLITE_LOCKED and SQLITE_BUSY errors are not treated as failures, and the backup will continue if they occur\&. The set of errors that are tolerated can be controlled by setting \fRbackup\&.retryErrors\fP\&. To disable automatic finishing and stick strictly to sqlite's raw api, set \fRbackup\&.retryErrors\fP to \fR[]\fP\&. In that case, it is necessary to call \fRbackup\&.finish()\fP\&.
.PP
In the same way as node-sqlite3 databases and statements, backup methods can be called safely without callbacks, due to an internal call queue\&. So for example this naive code will correctly back up a db, if there are no errors:
.PP
var backup = db\&.backup('backup\&.db'); backup\&.step(-1); backup\&.finish(); 
.PP
Definition at line \fB94\fP of file \fBbackup\&.h\fP\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef void(* node_sqlite3::Backup::Work_Callback) (\fBBaton\fP *baton)"

.PP
Definition at line \fB141\fP of file \fBbackup\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Backup::Backup (const \fBNapi::CallbackInfo\fP & info)"

.PP
Definition at line \fB122\fP of file \fBbackup\&.cc\fP\&.
.SS "node_sqlite3::Backup::~Backup ()\fR [inline]\fP"

.PP
Definition at line \fB151\fP of file \fBbackup\&.h\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void Backup::CleanQueue ()\fR [protected]\fP"

.PP
Definition at line \fB77\fP of file \fBbackup\&.cc\fP\&.
.SS "\fBNapi::Value\fP Backup::CompletedGetter (const \fBNapi::CallbackInfo\fP & info)"

.PP
Definition at line \fB372\fP of file \fBbackup\&.cc\fP\&.
.SS "template<class T > void Backup::Error (T * baton)\fR [static]\fP, \fR [protected]\fP"

.PP
Definition at line \fB56\fP of file \fBbackup\&.cc\fP\&.
.SS "\fBNapi::Value\fP Backup::FailedGetter (const \fBNapi::CallbackInfo\fP & info)"

.PP
Definition at line \fB377\fP of file \fBbackup\&.cc\fP\&.
.SS "\fBNapi::Value\fP node_sqlite3::Backup::FatalErrorGetter (const \fBNapi::CallbackInfo\fP & info)"

.SS "void node_sqlite3::Backup::FatalErrorSetter (const \fBNapi::CallbackInfo\fP & info, const \fBNapi::Value\fP & value)"

.SS "void Backup::FinishAll ()\fR [protected]\fP"

.PP
Definition at line \fB343\fP of file \fBbackup\&.cc\fP\&.
.SS "void Backup::FinishSqlite ()\fR [protected]\fP"

.PP
Definition at line \fB354\fP of file \fBbackup\&.cc\fP\&.
.SS "void Backup::GetRetryErrors (std::set< int > & retryErrorsSet)\fR [protected]\fP"

.PP
Definition at line \fB408\fP of file \fBbackup\&.cc\fP\&.
.SS "\fBNapi::Value\fP Backup::IdleGetter (const \fBNapi::CallbackInfo\fP & info)"

.PP
Definition at line \fB366\fP of file \fBbackup\&.cc\fP\&.
.SS "\fBNapi::Object\fP Backup::Init (\fBNapi::Env\fP env, \fBNapi::Object\fP exports)\fR [static]\fP"

.PP
Definition at line \fB9\fP of file \fBbackup\&.cc\fP\&.
.SS "\fBNapi::Value\fP Backup::PageCountGetter (const \fBNapi::CallbackInfo\fP & info)"

.PP
Definition at line \fB387\fP of file \fBbackup\&.cc\fP\&.
.SS "void Backup::Process ()\fR [protected]\fP"

.PP
Definition at line \fB30\fP of file \fBbackup\&.cc\fP\&.
.SS "\fBNapi::Value\fP Backup::RemainingGetter (const \fBNapi::CallbackInfo\fP & info)"

.PP
Definition at line \fB382\fP of file \fBbackup\&.cc\fP\&.
.SS "\fBNapi::Value\fP Backup::RetryErrorGetter (const \fBNapi::CallbackInfo\fP & info)"

.PP
Definition at line \fB392\fP of file \fBbackup\&.cc\fP\&.
.SS "void Backup::RetryErrorSetter (const \fBNapi::CallbackInfo\fP & info, const \fBNapi::Value\fP & value)"

.PP
Definition at line \fB397\fP of file \fBbackup\&.cc\fP\&.
.SS "void Backup::Schedule (\fBWork_Callback\fP callback, \fBBaton\fP * baton)\fR [protected]\fP"

.PP
Definition at line \fB43\fP of file \fBbackup\&.cc\fP\&.
.SS "void Backup::Work_AfterInitialize (napi_env env, napi_status status, void * data)\fR [static]\fP, \fR [protected]\fP"

.PP
Definition at line \fB214\fP of file \fBbackup\&.cc\fP\&.
.SS "void Backup::Work_BeginInitialize (\fBDatabase::Baton\fP * baton)\fR [static]\fP, \fR [protected]\fP"

.PP
Definition at line \fB178\fP of file \fBbackup\&.cc\fP\&.
.SS "void Backup::Work_Initialize (napi_env env, void * data)\fR [static]\fP, \fR [protected]\fP"

.PP
Definition at line \fB185\fP of file \fBbackup\&.cc\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "sqlite3* node_sqlite3::Backup::_destDb = NULL\fR [protected]\fP"

.PP
Definition at line \fB190\fP of file \fBbackup\&.h\fP\&.
.SS "sqlite3_backup* node_sqlite3::Backup::_handle = NULL\fR [protected]\fP"

.PP
Definition at line \fB188\fP of file \fBbackup\&.h\fP\&.
.SS "sqlite3* node_sqlite3::Backup::_otherDb = NULL\fR [protected]\fP"

.PP
Definition at line \fB189\fP of file \fBbackup\&.h\fP\&.
.SS "bool node_sqlite3::Backup::completed = false\fR [protected]\fP"

.PP
Definition at line \fB194\fP of file \fBbackup\&.h\fP\&.
.SS "\fBDatabase\fP* node_sqlite3::Backup::db\fR [protected]\fP"

.PP
Definition at line \fB186\fP of file \fBbackup\&.h\fP\&.
.SS "bool node_sqlite3::Backup::failed = false\fR [protected]\fP"

.PP
Definition at line \fB195\fP of file \fBbackup\&.h\fP\&.
.SS "bool node_sqlite3::Backup::finished = false\fR [protected]\fP"

.PP
Definition at line \fB198\fP of file \fBbackup\&.h\fP\&.
.SS "bool node_sqlite3::Backup::inited = false\fR [protected]\fP"

.PP
Definition at line \fB192\fP of file \fBbackup\&.h\fP\&.
.SS "bool node_sqlite3::Backup::locked = true\fR [protected]\fP"

.PP
Definition at line \fB193\fP of file \fBbackup\&.h\fP\&.
.SS "std::string node_sqlite3::Backup::message\fR [protected]\fP"

.PP
Definition at line \fB201\fP of file \fBbackup\&.h\fP\&.
.SS "int node_sqlite3::Backup::pageCount = \-1\fR [protected]\fP"

.PP
Definition at line \fB197\fP of file \fBbackup\&.h\fP\&.
.SS "std::queue<std::unique_ptr<\fBCall\fP> > node_sqlite3::Backup::queue\fR [protected]\fP"

.PP
Definition at line \fB202\fP of file \fBbackup\&.h\fP\&.
.SS "int node_sqlite3::Backup::remaining = \-1\fR [protected]\fP"

.PP
Definition at line \fB196\fP of file \fBbackup\&.h\fP\&.
.SS "\fBNapi::Reference\fP<\fBArray\fP> node_sqlite3::Backup::retryErrors\fR [protected]\fP"

.PP
Definition at line \fB204\fP of file \fBbackup\&.h\fP\&.
.SS "int node_sqlite3::Backup::status\fR [protected]\fP"

.PP
Definition at line \fB200\fP of file \fBbackup\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
