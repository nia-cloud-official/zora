.TH "gyp.MSVSUtil" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gyp.MSVSUtil
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fB_GetLargePdbShimCcPath\fP ()"
.br
.ti -1c
.RI "\fB_DeepCopySomeKeys\fP (in_dict, keys)"
.br
.ti -1c
.RI "\fB_SuffixName\fP (name, suffix)"
.br
.ti -1c
.RI "\fB_ShardName\fP (name, number)"
.br
.ti -1c
.RI "\fBShardTargets\fP (target_list, target_dicts)"
.br
.ti -1c
.RI "\fB_GetPdbPath\fP (target_dict, config_name, vars)"
.br
.ti -1c
.RI "\fBInsertLargePdbShims\fP (target_list, target_dicts, vars)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "dict \fBTARGET_TYPE_EXT\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
Utility functions shared amongst the Windows generators\&.
.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "gyp\&.MSVSUtil\&._DeepCopySomeKeys ( in_dict,  keys)\fR [protected]\fP"

.PP
.nf
Performs a partial deep-copy on |in_dict|, only copying the keys in |keys|\&.

Arguments:
in_dict: The dictionary to copy\&.
keys: The keys to be copied\&. If a key is in this list and doesn't exist in
    |in_dict| this is not an error\&.
Returns:
The partially deep-copied dictionary\&.

.fi
.PP
 
.PP
Definition at line \fB30\fP of file \fBMSVSUtil\&.py\fP\&.
.SS "gyp\&.MSVSUtil\&._GetLargePdbShimCcPath ()\fR [protected]\fP"

.PP
.nf
Returns the path of the large_pdb_shim\&.cc file\&.
.fi
.PP
 
.PP
Definition at line \fB21\fP of file \fBMSVSUtil\&.py\fP\&.
.SS "gyp\&.MSVSUtil\&._GetPdbPath ( target_dict,  config_name,  vars)\fR [protected]\fP"

.PP
.nf
Returns the path to the PDB file that will be generated by a given
configuration\&.

The lookup proceeds as follows:
- Look for an explicit path in the VCLinkerTool configuration block\&.
- Look for an 'msvs_large_pdb_path' variable\&.
- Use '<(PRODUCT_DIR)/<(product_name)\&.(exe|dll)\&.pdb' if 'product_name' is
  specified\&.
- Use '<(PRODUCT_DIR)/<(target_name)\&.(exe|dll)\&.pdb'\&.

Arguments:
target_dict: The target dictionary to be searched\&.
config_name: The name of the configuration of interest\&.
vars: A dictionary of common GYP variables with generator-specific values\&.
Returns:
The path of the corresponding PDB file\&.

.fi
.PP
 
.PP
Definition at line \fB130\fP of file \fBMSVSUtil\&.py\fP\&.
.SS "gyp\&.MSVSUtil\&._ShardName ( name,  number)\fR [protected]\fP"

.PP
.nf
Add a shard number to the end of a target\&.

Arguments:
name: name of the target (foo#target)
number: shard number
Returns:
Target name with shard added (foo_1#target)

.fi
.PP
 
.PP
Definition at line \fB62\fP of file \fBMSVSUtil\&.py\fP\&.
.SS "gyp\&.MSVSUtil\&._SuffixName ( name,  suffix)\fR [protected]\fP"

.PP
.nf
Add a suffix to the end of a target\&.

Arguments:
name: name of the target (foo#target)
suffix: the suffix to be added
Returns:
Target name with suffix added (foo_suffix#target)

.fi
.PP
 
.PP
Definition at line \fB48\fP of file \fBMSVSUtil\&.py\fP\&.
.SS "gyp\&.MSVSUtil\&.InsertLargePdbShims ( target_list,  target_dicts,  vars)"

.PP
.nf
Insert a shim target that forces the linker to use 4KB pagesize PDBs\&.

This is a workaround for targets with PDBs greater than 1GB in size, the
limit for the 1KB pagesize PDBs created by the linker by default\&.

Arguments:
target_list: List of target pairs: 'base/base\&.gyp:base'\&.
target_dicts: Dict of target properties keyed on target pair\&.
vars: A dictionary of common GYP variables with generator-specific values\&.
Returns:
Tuple of the shimmed version of the inputs\&.

.fi
.PP
 
.PP
Definition at line \fB169\fP of file \fBMSVSUtil\&.py\fP\&.
.SS "gyp\&.MSVSUtil\&.ShardTargets ( target_list,  target_dicts)"

.PP
.nf
Shard some targets apart to work around the linkers limits\&.

Arguments:
target_list: List of target pairs: 'base/base\&.gyp:base'\&.
target_dicts: Dict of target properties keyed on target pair\&.
Returns:
Tuple of the new sharded versions of the inputs\&.

.fi
.PP
 
.PP
Definition at line \fB74\fP of file \fBMSVSUtil\&.py\fP\&.
.SH "Variable Documentation"
.PP 
.SS "dict gyp\&.MSVSUtil\&.TARGET_TYPE_EXT"
\fBInitial value:\fP
.nf
1 =  {
2     "executable": "exe",
3     "loadable_module": "dll",
4     "shared_library": "dll",
5     "static_library": "lib",
6     "windows_driver": "sys",
7 }
.PP
.fi

.PP
Definition at line \fB12\fP of file \fBMSVSUtil\&.py\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
