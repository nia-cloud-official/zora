.TH "pretty_gyp" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
pretty_gyp
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBcomment_replace\fP (matchobj)"
.br
.ti -1c
.RI "\fBmask_comments\fP (input)"
.br
.ti -1c
.RI "\fBquote_replace\fP (matchobj)"
.br
.ti -1c
.RI "\fBmask_quotes\fP (input)"
.br
.ti -1c
.RI "\fBdo_split\fP (input, masked_input, search_re)"
.br
.ti -1c
.RI "\fBsplit_double_braces\fP (input)"
.br
.ti -1c
.RI "\fBcount_braces\fP (line)"
.br
.ti -1c
.RI "\fBprettyprint_input\fP (lines)"
.br
.ti -1c
.RI "\fBmain\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBCOMMENT_RE\fP = re\&.compile(r'\\s*#\&.*')"
.br
.ti -1c
.RI "str \fBQUOTE_RE_STR\fP = r'(?P<q>[\\''])(\&.*?)(?<![^\\\\][\\\\])(?P=q)'"
.br
.ti -1c
.RI "\fBQUOTE_RE\fP = re\&.compile(\fBQUOTE_RE_STR\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
Pretty-prints the contents of a GYP file\&.
.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "pretty_gyp\&.comment_replace ( matchobj)"

.PP
Definition at line \fB25\fP of file \fBpretty_gyp\&.py\fP\&.
.SS "pretty_gyp\&.count_braces ( line)"

.PP
.nf
keeps track of the number of braces on a given line and returns the result\&.

It starts at zero and subtracts for closed braces, and adds for open braces\&.

.fi
.PP
 
.PP
Definition at line \fB86\fP of file \fBpretty_gyp\&.py\fP\&.
.SS "pretty_gyp\&.do_split ( input,  masked_input,  search_re)"

.PP
Definition at line \fB50\fP of file \fBpretty_gyp\&.py\fP\&.
.SS "pretty_gyp\&.main ()"

.PP
Definition at line \fB142\fP of file \fBpretty_gyp\&.py\fP\&.
.SS "pretty_gyp\&.mask_comments ( input)"

.PP
.nf
Mask the quoted strings so we skip braces inside quoted strings\&.
.fi
.PP
 
.PP
Definition at line \fB29\fP of file \fBpretty_gyp\&.py\fP\&.
.SS "pretty_gyp\&.mask_quotes ( input)"

.PP
.nf
Mask the quoted strings so we skip braces inside quoted strings\&.
.fi
.PP
 
.PP
Definition at line \fB44\fP of file \fBpretty_gyp\&.py\fP\&.
.SS "pretty_gyp\&.prettyprint_input ( lines)"

.PP
.nf
Does the main work of indenting the input based on the brace counts\&.
.fi
.PP
 
.PP
Definition at line \fB118\fP of file \fBpretty_gyp\&.py\fP\&.
.SS "pretty_gyp\&.quote_replace ( matchobj)"

.PP
Definition at line \fB35\fP of file \fBpretty_gyp\&.py\fP\&.
.SS "pretty_gyp\&.split_double_braces ( input)"

.PP
.nf
Masks out the quotes and comments, and then splits appropriate
lines (lines that matche the double_*_brace re's above) before
indenting them below\&.

These are used to split lines which have multiple braces on them, so
that the indentation looks prettier when all laid out (e\&.g\&. closing
braces make a nice diagonal line)\&.

.fi
.PP
 
.PP
Definition at line \fB65\fP of file \fBpretty_gyp\&.py\fP\&.
.SH "Variable Documentation"
.PP 
.SS "pretty_gyp\&.COMMENT_RE = re\&.compile(r'\\s*#\&.*')"

.PP
Definition at line \fB15\fP of file \fBpretty_gyp\&.py\fP\&.
.SS "pretty_gyp\&.QUOTE_RE = re\&.compile(\fBQUOTE_RE_STR\fP)"

.PP
Definition at line \fB22\fP of file \fBpretty_gyp\&.py\fP\&.
.SS "str pretty_gyp\&.QUOTE_RE_STR = r'(?P<q>[\\''])(\&.*?)(?<![^\\\\][\\\\])(?P=q)'"

.PP
Definition at line \fB21\fP of file \fBpretty_gyp\&.py\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
