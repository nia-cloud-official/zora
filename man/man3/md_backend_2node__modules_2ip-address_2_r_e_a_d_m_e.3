.TH "md_backend_2node__modules_2ip-address_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2ip-address_2_r_e_a_d_m_e \- README 
.PP
 \fR![codecov]\fP \fR![downloads]\fP \fR![npm]\fP \fR![snyk]\fP
.SS "ip-address"
\fRip-address\fP is a library for validating and manipulating IPv4 and IPv6 addresses in JavaScript\&.
.SS "Migrating from 6\&.x to 7\&.x"
\fRip-address\fP was rewritten in TypeScript for version 7\&. If you were using version 6 you'll need to make these changes to upgrade:
.PP
.IP "\(bu" 2
Instead of checking \fRisValid()\fP, which has been removed, you'll need to use a \fRtry\fP/\fRcatch\fP if you're accepting unknown input\&. This made the TypeScript types substantially easier as well as allowed the use of an \fRAddressError\fP class which will contain a \fRparseMessage\fP if an error occurred in the parsing step\&.
.IP "\(bu" 2
Instead of using the \fRerror\fP, \fRparseError\fP, and \fRvalid\fP attributes you'll need to use the \fRmessage\fP and \fRparseMessage\fP of the thrown \fRAddressError\fP\&.
.PP
.SS "Documentation"
Documentation is available at \fRip-address\&.js\&.org\fP\&.
.SS "Examples"
.PP
.nf
var Address6 = require('ip\-address')\&.Address6;

var address = new Address6('2001:0:ce49:7601:e866:efff:62c3:fffe');

var teredo = address\&.inspectTeredo();

teredo\&.client4;    // '157\&.60\&.0\&.1'
.fi
.PP
.SS "Features"
.IP "\(bu" 2
Usable via CommonJS or ESM
.IP "\(bu" 2
Parsing of all IPv6 notations
.IP "\(bu" 2
Parsing of IPv6 addresses and ports from URLs with \fRAddress6\&.fromURL(url)\fP
.IP "\(bu" 2
Validity checking
.IP "\(bu" 2
Decoding of the \fRTeredo information\fP in an address
.IP "\(bu" 2
Whether one address is a valid subnet of another
.IP "\(bu" 2
What special properties a given address has (multicast prefix, unique local address prefix, etc\&.)
.IP "\(bu" 2
Number of subnets of a certain size in a given address
.IP "\(bu" 2
Display methods
.IP "  \(bu" 4
Hex, binary, and decimal
.IP "  \(bu" 4
Canonical form
.IP "  \(bu" 4
Correct form
.IP "  \(bu" 4
IPv4-compatible (i\&.e\&. \fRffff:192\&.168\&.0\&.1\fP)
.PP

.IP "\(bu" 2
Works in \fRnode\fP and the browser (with browserify)
.IP "\(bu" 2
~1,600 test cases
.PP
.SS "Used by"
.IP "\(bu" 2
\fRanon\fP which powers \fR@congressedits\fP, among \fRmany others\fP
.IP "\(bu" 2
\fRbase85\fP: base85 encoding/decoding
.IP "\(bu" 2
\fRcontrail-web-core\fP: part of Contrail, a network virtualization solution made by Juniper Networks
.IP "\(bu" 2
\fRdhcpjs\fP: a DHCP client and server
.IP "\(bu" 2
\fRepochtalk\fP: next generation forum software
.IP "\(bu" 2
\fRgeoip-web\fP: a server for quickly geolocating IP addresses
.IP "\(bu" 2
\fRhexabus\fP: an IPv6-based home automation bus
.IP "\(bu" 2
\fRhubot-deploy\fP: GitHub Flow via hubot
.IP "\(bu" 2
\fRheroku-portscanner\fP: nmap hosted on Heroku
.IP "\(bu" 2
\fRipfs-swarm\fP: a swarm implementation based on IPFS
.IP "\(bu" 2
\fRjavascript-x-server\fP: an X server written in JavaScript
.IP "\(bu" 2
\fRlibnmap\fP: a node API for nmap
.IP "\(bu" 2
\fRmail-io\fP: a lightweight SMTP server
.IP "\(bu" 2
\fRmaxmind-db-reader\fP: a library for reading MaxMind database files
.IP "\(bu" 2
\fRproxy-protocol-v2\fP: a proxy protocol encoder/decoder built by \fRAbly\fP
.IP "\(bu" 2
\fRSamsara\fP: a Docker web interface
.IP "\(bu" 2
\fRsis-api\fP: a configuration management database API
.IP "\(bu" 2
\fRsocks5-client\fP: a SOCKS v5 client
.IP "\(bu" 2
\fRsocksified\fP: a SOCKS v5 client
.IP "\(bu" 2
\fRsocksv5\fP: a SOCKS v5 server/client
.IP "\(bu" 2
\fRssdapi\fP: an API created by the University of Portsmouth
.IP "\(bu" 2
\fRSwitchyOmega\fP: a \fRChrome extension\fP for switching between multiple proxies with ~311k users!
.IP "\(bu" 2
\fRswiz\fP: a serialization framework built and used by \fRRackspace\fP 
.PP

