.TH "md_backend_2node__modules_2media-typer_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2media-typer_2_r_e_a_d_m_e \- media-typer 
.PP
 \fR\fP \fR\fP \fR\fP \fR\fP \fR\fP
.PP
Simple RFC 6838 media type parser
.SH "Installation"
.PP
.PP
.nf
$ npm install media\-typer
.fi
.PP
.SH "API"
.PP
.PP
.nf
var typer = require('media\-typer')
.fi
.PP
.SS "typer\&.parse(string)"
.PP
.nf
var obj = typer\&.parse('image/svg+xml; charset=utf\-8')
.fi
.PP
.PP
Parse a media type string\&. This will return an object with the following properties (examples are shown for the string `'image/svg+xml; charset=utf-8'`):
.PP
.IP "\(bu" 2
\fRtype\fP: The type of the media type (always lower case)\&. Example: `'image'`
.IP "\(bu" 2
\fRsubtype\fP: The subtype of the media type (always lower case)\&. Example: `'svg'`
.IP "\(bu" 2
\fRsuffix\fP: The suffix of the media type (always lower case)\&. Example: `'xml'`
.IP "\(bu" 2
\fRparameters\fP: An object of the parameters in the media type (name of parameter always lower case)\&. Example: `{charset: 'utf-8'}`
.PP
.SS "typer\&.parse(req)"
.PP
.nf
var obj = typer\&.parse(req)
.fi
.PP
.PP
Parse the \fRcontent-type\fP header from the given \fRreq\fP\&. Short-cut for `typer\&.parse(req\&.headers['content-type'])`\&.
.SS "typer\&.parse(res)"
.PP
.nf
var obj = typer\&.parse(res)
.fi
.PP
.PP
Parse the \fRcontent-type\fP header set on the given \fRres\fP\&. Short-cut for `typer\&.parse(res\&.getHeader('content-type'))`\&.
.SS "typer\&.format(obj)"
.PP
.nf
var obj = typer\&.format({type: 'image', subtype: 'svg', suffix: 'xml'})
.fi
.PP
.PP
Format an object into a media type string\&. This will return a string of the mime type for the given object\&. For the properties of the object, see the documentation for \fRtyper\&.parse(string)\fP\&.
.SH "License"
.PP
[MIT](LICENSE) 
