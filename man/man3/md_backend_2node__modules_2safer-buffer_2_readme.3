.TH "md_backend_2node__modules_2safer-buffer_2_readme" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2safer-buffer_2_readme \- safer-buffer \fR\fP \fR\fP \fR\fP \fR\fP 
.PP

.PP
Modern Buffer API polyfill without footguns, working on Node\&.js from 0\&.8 to current\&.
.SH "How to use?"
.PP
First, port all \fRBuffer()\fP and \fRnew Buffer()\fP calls to \fRBuffer\&.alloc()\fP and \fRBuffer\&.from()\fP API\&.
.PP
Then, to achieve compatibility with outdated Node\&.js versions (\fR<4\&.5\&.0\fP and 5\&.x \fR<5\&.9\&.0\fP), use `const Buffer = require('safer-buffer')\&.Buffer\fRin all files where you make calls to the new Buffer API\&. _Use\fPvar\fRinstead of\fPconst` if you need that for your Node\&.js version range support\&._
.PP
Also, see the \fRporting Buffer\fP guide\&.
.SH "Do I need it?"
.PP
Hopefully, not — dropping support for outdated Node\&.js versions should be fine nowdays, and that is the recommended path forward\&. You \fIdo\fP need to port to the \fRBuffer\&.alloc()\fP and \fRBuffer\&.from()\fP though\&.
.PP
See the \fRporting guide\fP for a better description\&.
.SH "Why not \fRsafe-buffer\fP?"
.PP
\fIIn short: while \fRsafe-buffer\fP serves as a polyfill for the new API, it allows old API usage and itself contains footguns\&.\fP
.PP
\fRsafe-buffer\fP could be used safely to get the new API while still keeping support for older Node\&.js versions (like this module), but while analyzing ecosystem usage of the old Buffer API I found out that \fRsafe-buffer\fP is itself causing problems in some cases\&.
.PP
For example, consider the following snippet:
.PP
.PP
.nf
$ cat example\&.unsafe\&.js
console\&.log(Buffer(20))
$ \&./node\-v6\&.13\&.0\-linux\-x64/bin/node example\&.unsafe\&.js
<Buffer 0a 00 00 00 00 00 00 00 28 13 de 02 00 00 00 00 05 00 00 00>
$ standard example\&.unsafe\&.js
standard: Use JavaScript Standard Style (https://standardjs\&.com)
  /home/chalker/repo/safer\-buffer/example\&.unsafe\&.js:2:13: 'Buffer()' was deprecated since v6\&. Use 'Buffer\&.alloc()' or 'Buffer\&.from()' (use 'https://www\&.npmjs\&.com/package/safe\-buffer' for '<4\&.5\&.0') instead\&.
.fi
.PP
.PP
This is allocates and writes to console an uninitialized chunk of memory\&. \fRstandard\fP linter (among others) catch that and warn people to avoid using unsafe API\&.
.PP
Let's now throw in \fRsafe-buffer\fP!
.PP
.PP
.nf
$ cat example\&.safe\-buffer\&.js
const Buffer = require('safe\-buffer')\&.Buffer
console\&.log(Buffer(20))
$ standard example\&.safe\-buffer\&.js
$ \&./node\-v6\&.13\&.0\-linux\-x64/bin/node example\&.safe\-buffer\&.js
<Buffer 08 00 00 00 00 00 00 00 28 58 01 82 fe 7f 00 00 00 00 00 00>
.fi
.PP
.PP
See the problem? Adding in \fRsafe-buffer\fP \fImagically removes the lint warning\fP, but the behavior remains identiсal to what we had before, and when launched on Node\&.js 6\&.x LTS — this dumps out chunks of uninitialized memory\&. \fIAnd this code will still emit runtime warnings on Node\&.js 10\&.x and above\&.\fP
.PP
That was done by design\&. I first considered changing \fRsafe-buffer\fP, prohibiting old API usage or emitting warnings on it, but that significantly diverges from \fRsafe-buffer\fP design\&. After some discussion, it was decided to move my approach into a separate package, and \fIthis is that separate package\fP\&.
.PP
This footgun is not imaginary — I observed top-downloaded packages doing that kind of thing, «fixing» the lint warning by blindly including \fRsafe-buffer\fP without any actual changes\&.
.PP
Also in some cases, even if the API \fIwas\fP migrated to use of safe Buffer API — a random pull request can bring unsafe Buffer API usage back to the codebase by adding new calls — and that could go unnoticed even if you have a linter prohibiting that (becase of the reason stated above), and even pass CI\&. \fII also observed that being done in popular packages\&.\fP
.PP
Some examples:
.IP "\(bu" 2
\fRwebdriverio\fP (a module with 548 759 downloads/month),
.IP "\(bu" 2
\fRwebsocket-stream\fP (218 288 d/m, fix in \fRmaxogden/websocket-stream#142\fP),
.IP "\(bu" 2
\fRnode-serialport\fP (113 138 d/m, fix in \fRnode-serialport/node-serialport#1510\fP),
.IP "\(bu" 2
\fRkarma\fP (3 973 193 d/m, fix in \fRkarma-runner/karma#2947\fP),
.IP "\(bu" 2
\fRspdy-transport\fP (5 970 727 d/m, fix in \fRspdy-http2/spdy-transport#53\fP)\&.
.IP "\(bu" 2
And there are a lot more over the ecosystem\&.
.PP
.PP
I filed a PR at \fRmysticatea/eslint-plugin-node#110\fP to partially fix that (for cases when that lint rule is used), but it is a semver-major change for linter rules and presets, so it would take significant time for that to reach actual setups\&. \fIIt also hasn't been released yet (2018-03-20)\&.\fP
.PP
Also, \fRsafer-buffer\fP discourages the usage of \fR\&.allocUnsafe()\fP, which is often done by a mistake\&. It still supports it with an explicit concern barier, by placing it under `require('safer-buffer/dangereous')`\&.
.SH "But isn't throwing bad?"
.PP
Not really\&. It's an error that could be noticed and fixed early, instead of causing havoc later like unguarded \fRnew Buffer()\fP calls that end up receiving user input can do\&.
.PP
This package affects only the files where `var Buffer = require('safer-buffer')\&.Buffer` was done, so it is really simple to keep track of things and make sure that you don't mix old API usage with that\&. Also, CI should hint anything that you might have missed\&.
.PP
New commits, if tested, won't land new usage of unsafe Buffer API this way\&. \fINode\&.js 10\&.x also deals with that by printing a runtime depecation warning\&.\fP
.SS "Would it affect third-party modules?"
No, unless you explicitly do an awful thing like monkey-patching or overriding the built-in \fRBuffer\fP\&. Don't do that\&.
.SS "But I don't want throwing…"
That is also fine!
.PP
Also, it could be better in some cases when you don't comprehensive enough test coverage\&.
.PP
In that case — just don't override \fRBuffer\fP and use `var SaferBuffer = require('safer-buffer')\&.Buffer` instead\&.
.PP
That way, everything using \fRBuffer\fP natively would still work, but there would be two drawbacks:
.PP
.IP "\(bu" 2
\fRBuffer\&.from\fP/\fRBuffer\&.alloc\fP won't be polyfilled — use \fRSaferBuffer\&.from\fP and \fRSaferBuffer\&.alloc\fP instead\&.
.IP "\(bu" 2
You are still open to accidentally using the insecure deprecated API — use a linter to catch that\&.
.PP
.PP
Note that using a linter to catch accidential \fRBuffer\fP constructor usage in this case is strongly recommended\&. \fRBuffer\fP is not overriden in this usecase, so linters won't get confused\&.
.SH "«Without footguns»?"
.PP
Well, it is still possible to do \fIsome\fP things with \fRBuffer\fP API, e\&.g\&. accessing \fR\&.buffer\fP property on older versions and duping things from there\&. You shouldn't do that in your code, probabably\&.
.PP
The intention is to remove the most significant footguns that affect lots of packages in the ecosystem, and to do it in the proper way\&.
.PP
Also, this package doesn't protect against security issues affecting some Node\&.js versions, so for usage in your own production code, it is still recommended to update to a Node\&.js version \fRsupported by upstream\fP\&. 
