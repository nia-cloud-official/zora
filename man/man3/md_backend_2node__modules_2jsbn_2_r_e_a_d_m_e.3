.TH "md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2jsbn_2_r_e_a_d_m_e \- jsbn: javascript big number 
.PP
 \fRTom Wu's Original Website\fP
.PP
I felt compelled to put this on github and publish to npm\&. I haven't tested every other big integer library out there, but the few that I have tested in comparison to this one have not even come close in performance\&. I am aware of the \fRbi\fP module on npm, however it has been modified and I wanted to publish the original without modifications\&. This is jsbn and jsbn2 from Tom Wu's original website above, with the module pattern applied to prevent global leaks and to allow for use with node\&.js on the server side\&.
.SH "usage"
.PP
.PP
.nf
var BigInteger = require('jsbn')\&.BigInteger;

var bi = new BigInteger('91823918239182398123');
console\&.log(bi\&.bitLength()); // 67
.fi
.PP
.SH "API"
.PP
.SS "bi\&.toString()"
returns the base-10 number as a string
.SS "bi\&.negate()"
returns a new BigInteger equal to the negation of \fRbi\fP
.SS "bi\&.abs"
returns new BI of absolute value
.SS "bi\&.compareTo"
.SS "bi\&.bitLength"
.SS "bi\&.mod"
.SS "bi\&.modPowInt"
.SS "bi\&.clone"
.SS "bi\&.intValue"
.SS "bi\&.byteValue"
.SS "bi\&.shortValue"
.SS "bi\&.signum"
.SS "bi\&.toByteArray"
.SS "bi\&.equals"
.SS "bi\&.min"
.SS "bi\&.max"
.SS "bi\&.and"
.SS "bi\&.or"
.SS "bi\&.xor"
.SS "bi\&.andNot"
.SS "bi\&.not"
.SS "bi\&.shiftLeft"
.SS "bi\&.shiftRight"
.SS "bi\&.getLowestSetBit"
.SS "bi\&.bitCount"
.SS "bi\&.testBit"
.SS "bi\&.setBit"
.SS "bi\&.clearBit"
.SS "bi\&.flipBit"
.SS "bi\&.add"
.SS "bi\&.subtract"
.SS "bi\&.multiply"
.SS "bi\&.divide"
.SS "bi\&.remainder"
.SS "bi\&.divideAndRemainder"
.SS "bi\&.modPow"
.SS "bi\&.modInverse"
.SS "bi\&.pow"
.SS "bi\&.gcd"
.SS "bi\&.isProbablePrime"

