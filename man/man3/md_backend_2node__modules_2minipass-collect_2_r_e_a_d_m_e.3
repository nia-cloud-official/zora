.TH "md_backend_2node__modules_2minipass-collect_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2minipass-collect_2_r_e_a_d_m_e \- minipass-collect 
.PP
 A Minipass stream that collects all the data into a single chunk
.PP
Note that this buffers ALL data written to it, so it's only good for situations where you are sure the entire stream fits in memory\&.
.PP
Note: this is primarily useful for the \fRCollect\&.PassThrough\fP class, since Minipass streams already have a \fR\&.collect()\fP method which returns a promise that resolves to the array of chunks, and a \fR\&.concat()\fP method that returns the data concatenated into a single Buffer or String\&.
.SH "USAGE"
.PP
.PP
.nf
const Collect = require('minipass\-collect')

const collector = new Collect()
collector\&.on('data', allTheData => {
  console\&.log('all the data!', allTheData)
})

someSourceOfData\&.pipe(collector)

// note that you can also simply do:
someSourceOfData\&.pipe(new Minipass())\&.concat()\&.then(data => \&.\&.\&.)
// or even, if someSourceOfData is a Minipass:
someSourceOfData\&.concat()\&.then(data => \&.\&.\&.)
// but you might prefer to have it stream\-shaped rather than
// Promise\-shaped in some scenarios\&.
.fi
.PP
.PP
If you want to collect the data, but \fIalso\fP act as a passthrough stream, then use \fRCollect\&.PassThrough\fP instead (for example to memoize streaming responses), and listen on the \fRcollect\fP event\&.
.PP
.PP
.nf
const Collect = require('minipass\-collect')

const collector = new Collect\&.PassThrough()
collector\&.on('collect', allTheData => {
  console\&.log('all the data!', allTheData)
})

someSourceOfData\&.pipe(collector)\&.pipe(someOtherStream)
.fi
.PP
.PP
All \fRminipass options\fP are supported\&. 
