.TH "gyp.RegeneratableOptionParser" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gyp.RegeneratableOptionParser
.SH SYNOPSIS
.br
.PP
.PP
Inherits argparse\&.ArgumentParser\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__init__\fP (self, usage)"
.br
.ti -1c
.RI "\fBadd_argument\fP (self, *args, **kw)"
.br
.ti -1c
.RI "\fBparse_args\fP (self, *args)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB274\fP of file \fB__init__\&.py\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "gyp\&.RegeneratableOptionParser\&.__init__ ( self,  usage)"

.PP
Definition at line \fB275\fP of file \fB__init__\&.py\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "gyp\&.RegeneratableOptionParser\&.add_argument ( self, * args, ** kw)"

.PP
.nf
Add an option to the parser\&.

This accepts the same arguments as ArgumentParser\&.add_argument, plus the
following:
regenerate: can be set to False to prevent this option from being included
          in regeneration\&.
env_name: name of environment variable that additional values for this
        option come from\&.
type: adds type='path', to tell the regenerator that the values of
    this option need to be made relative to options\&.depth

.fi
.PP
 
.PP
Definition at line \fB279\fP of file \fB__init__\&.py\fP\&.
.SS "gyp\&.RegeneratableOptionParser\&.parse_args ( self, * args)"

.PP
Definition at line \fB310\fP of file \fB__init__\&.py\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
