.TH "md_backend_2node__modules_2mime-types_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2mime-types_2_r_e_a_d_m_e \- mime-types 
.PP
 \fR\fP \fR\fP \fR\fP \fR\fP \fR\fP
.PP
The ultimate javascript content-type utility\&.
.PP
Similar to \fRthe \fRmime@1\&.x\fP module\fP, except:
.PP
.IP "\(bu" 2
\fBNo fallbacks\&.\fP Instead of naively returning the first available type, \fRmime-types\fP simply returns \fRfalse\fP, so do `var type = mime\&.lookup('unrecognized') || 'application/octet-stream'\fR\&.\fP
.IP "\(bu" 2
\fRNo\fPnew Mime()\fRbusiness, so you could do\fPvar lookup = require('mime-types')\&.lookup\fR\&.\fP
.IP "\(bu" 2
\fRNo\fP\&.define()\fRfunctionality\fP
.IP "\(bu" 2
\fRBug fixes for\fP\&.lookup(path)`
.PP
.PP
Otherwise, the API is compatible with \fRmime\fP 1\&.x\&.
.SH "Install"
.PP
This is a \fRNode\&.js\fP module available through the \fRnpm registry\fP\&. Installation is done using the \fR\fRnpm install\fP command\fP:
.PP
.PP
.nf
$ npm install mime\-types
.fi
.PP
.SH "Adding Types"
.PP
All mime types are based on \fRmime-db\fP, so open a PR there if you'd like to add mime types\&.
.SH "API"
.PP
.PP
.nf
var mime = require('mime\-types')
.fi
.PP
.PP
All functions return \fRfalse\fP if input is invalid or not found\&.
.SS "mime\&.lookup(path)"
Lookup the content-type associated with a file\&.
.PP
.PP
.nf
mime\&.lookup('json') // 'application/json'
mime\&.lookup('\&.md') // 'text/markdown'
mime\&.lookup('file\&.html') // 'text/html'
mime\&.lookup('folder/file\&.js') // 'application/javascript'
mime\&.lookup('folder/\&.htaccess') // false

mime\&.lookup('cats') // false
.fi
.PP
.SS "mime\&.contentType(type)"
Create a full content-type header given a content-type or extension\&. When given an extension, \fRmime\&.lookup\fP is used to get the matching content-type, otherwise the given content-type is used\&. Then if the content-type does not already have a \fRcharset\fP parameter, \fRmime\&.charset\fP is used to get the default charset and add to the returned content-type\&.
.PP
.PP
.nf
mime\&.contentType('markdown') // 'text/x\-markdown; charset=utf\-8'
mime\&.contentType('file\&.json') // 'application/json; charset=utf\-8'
mime\&.contentType('text/html') // 'text/html; charset=utf\-8'
mime\&.contentType('text/html; charset=iso\-8859\-1') // 'text/html; charset=iso\-8859\-1'

// from a full path
mime\&.contentType(path\&.extname('/path/to/file\&.json')) // 'application/json; charset=utf\-8'
.fi
.PP
.SS "mime\&.extension(type)"
Get the default extension for a content-type\&.
.PP
.PP
.nf
mime\&.extension('application/octet\-stream') // 'bin'
.fi
.PP
.SS "mime\&.charset(type)"
Lookup the implied default charset of a content-type\&.
.PP
.PP
.nf
mime\&.charset('text/markdown') // 'UTF\-8'
.fi
.PP
.SS "var type = mime\&.types[extension]"
A map of content-types by extension\&.
.SS "[extensions\&.\&.\&.] = mime\&.extensions[type]"
A map of extensions by content-type\&.
.SH "License"
.PP
[MIT](LICENSE) 
