.TH "gyp.MSVSVersion" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gyp.MSVSVersion
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBVisualStudioVersion\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBJoinPath\fP (*args)"
.br
.ti -1c
.RI "\fB_RegistryQueryBase\fP (sysdir, key, value)"
.br
.ti -1c
.RI "\fB_RegistryQuery\fP (key, value=None)"
.br
.ti -1c
.RI "\fB_RegistryGetValueUsingWinReg\fP (key, value)"
.br
.ti -1c
.RI "\fB_RegistryGetValue\fP (key, value)"
.br
.ti -1c
.RI "\fB_CreateVersion\fP (name, path, sdk_based=False)"
.br
.ti -1c
.RI "\fB_ConvertToCygpath\fP (path)"
.br
.ti -1c
.RI "\fB_DetectVisualStudioVersions\fP (versions_to_check, force_express)"
.br
.ti -1c
.RI "\fBSelectVisualStudioVersion\fP (version='auto', allow_fallback=True)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
Handle version information related to Visual Stuio\&.
.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "gyp\&.MSVSVersion\&._ConvertToCygpath ( path)\fR [protected]\fP"

.PP
.nf
Convert to cygwin path if we are using cygwin\&.
.fi
.PP
 
.PP
Definition at line \fB427\fP of file \fBMSVSVersion\&.py\fP\&.
.SS "gyp\&.MSVSVersion\&._CreateVersion ( name,  path,  sdk_based = \fRFalse\fP)\fR [protected]\fP"

.PP
.nf
Sets up MSVS project generation\&.

Setup is based off the GYP_MSVS_VERSION environment variable or whatever is
autodetected if GYP_MSVS_VERSION is not explicitly specified\&. If a version is
passed in that doesn't match a value in versions python will throw a error\&.

.fi
.PP
 
.PP
Definition at line \fB262\fP of file \fBMSVSVersion\&.py\fP\&.
.SS "gyp\&.MSVSVersion\&._DetectVisualStudioVersions ( versions_to_check,  force_express)\fR [protected]\fP"

.PP
.nf
Collect the list of installed visual studio versions\&.

Returns:
A list of visual studio versions installed in descending order of
usage preference\&.
Base this on the registry and a quick check if devenv\&.exe exists\&.
Possibilities are:
  2005(e) - Visual Studio 2005 (8)
  2008(e) - Visual Studio 2008 (9)
  2010(e) - Visual Studio 2010 (10)
  2012(e) - Visual Studio 2012 (11)
  2013(e) - Visual Studio 2013 (12)
  2015    - Visual Studio 2015 (14)
  2017    - Visual Studio 2017 (15)
  2019    - Visual Studio 2019 (16)
  2022    - Visual Studio 2022 (17)
Where (e) is e for express editions of MSVS and blank otherwise\&.

.fi
.PP
 
.PP
Definition at line \fB435\fP of file \fBMSVSVersion\&.py\fP\&.
.SS "gyp\&.MSVSVersion\&._RegistryGetValue ( key,  value)\fR [protected]\fP"

.PP
.nf
Use _winreg or reg\&.exe to obtain the value of a registry key\&.

Using _winreg is preferable because it solves an issue on some corporate
environments where access to reg\&.exe is locked down\&. However, we still need
to fallback to reg\&.exe for the case where the _winreg module is not available
(for example in cygwin python)\&.

Args:
key: The registry key\&.
value: The particular registry value to read\&.
Return:
contents of the registry key's value, or None on failure\&.

.fi
.PP
 
.PP
Definition at line \fB232\fP of file \fBMSVSVersion\&.py\fP\&.
.SS "gyp\&.MSVSVersion\&._RegistryGetValueUsingWinReg ( key,  value)\fR [protected]\fP"

.PP
.nf
Use the _winreg module to obtain the value of a registry key\&.

Args:
key: The registry key\&.
value: The particular registry value to read\&.
Return:
contents of the registry key's value, or None on failure\&.  Throws
ImportError if winreg is unavailable\&.

.fi
.PP
 
.PP
Definition at line \fB212\fP of file \fBMSVSVersion\&.py\fP\&.
.SS "gyp\&.MSVSVersion\&._RegistryQuery ( key,  value = \fRNone\fP)\fR [protected]\fP"

.PP
.nf
Use reg\&.exe to read a particular key through _RegistryQueryBase\&.

First tries to launch from %WinDir%\\Sysnative to avoid WoW64 redirection\&. If
that fails, it falls back to System32\&.  Sysnative is available on Vista and
up and available on Windows Server 2003 and XP through KB patch 942589\&. Note
that Sysnative will always fail if using 64-bit python due to it being a
virtual directory and System32 will work correctly in the first place\&.

KB 942589 - http://support\&.microsoft\&.com/kb/942589/en-us\&.

Arguments:
key: The registry key\&.
value: The particular registry value to read (optional)\&.
Return:
stdout from reg\&.exe, or None for failure\&.

.fi
.PP
 
.PP
Definition at line \fB184\fP of file \fBMSVSVersion\&.py\fP\&.
.SS "gyp\&.MSVSVersion\&._RegistryQueryBase ( sysdir,  key,  value)\fR [protected]\fP"

.PP
.nf
Use reg\&.exe to read a particular key\&.

While ideally we might use the win32 module, we would like gyp to be
python neutral, so for instance cygwin python lacks this module\&.

Arguments:
sysdir: The system subdirectory to attempt to launch reg\&.exe from\&.
key: The registry key to read from\&.
value: The particular value to read\&.
Return:
stdout from reg\&.exe, or None for failure\&.

.fi
.PP
 
.PP
Definition at line \fB154\fP of file \fBMSVSVersion\&.py\fP\&.
.SS "gyp\&.MSVSVersion\&.JoinPath (* args)"

.PP
Definition at line \fB15\fP of file \fBMSVSVersion\&.py\fP\&.
.SS "gyp\&.MSVSVersion\&.SelectVisualStudioVersion ( version = \fR'auto'\fP,  allow_fallback = \fRTrue\fP)"

.PP
.nf
Select which version of Visual Studio projects to generate\&.

Arguments:
version: Hook to allow caller to force a particular version (vs auto)\&.
Returns:
An object representing a visual studio project format version\&.

.fi
.PP
 
.PP
Definition at line \fB527\fP of file \fBMSVSVersion\&.py\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
