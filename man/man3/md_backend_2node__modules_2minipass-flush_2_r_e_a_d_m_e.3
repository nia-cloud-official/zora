.TH "md_backend_2node__modules_2minipass-flush_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2minipass-flush_2_r_e_a_d_m_e \- minipass-flush 
.PP
 A Minipass stream that calls a flush function before emitting 'end'
.SH "USAGE"
.PP
.PP
.nf
const Flush = require('minipass\-flush')
cons f = new Flush({
  flush (cb) {
    // call the cb when done, or return a promise
    // the 'end' event will wait for it, along with
    // close, finish, and prefinish\&.
    // call the cb with an error, or return a rejecting
    // promise to emit 'error' instead of doing the 'end'
    return rerouteAllEncryptions()\&.then(() => clearAllChannels())
  },
  // all other minipass options accepted as well
})

someDataSource\&.pipe(f)\&.on('end', () => {
  // proper flushing has been accomplished
})

// Or as a subclass implementing a 'flush' method:
class MyFlush extends Flush {
  flush (cb) {
    // old fashioned callback style!
    rerouteAllEncryptions(er => {
      if (er)
        return cb(er)
      clearAllChannels(er => {
        if (er)
          cb(er)
        cb()
      })
    })
  }
}
.fi
.PP
.PP
That's about it\&.
.PP
If your \fRflush\fP method doesn't have to do anything asynchronous, then it's better to call the callback right away in this tick, rather than returning \fRPromise\&.resolve()\fP, so that the \fRend\fP event can happen as soon as possible\&. 
