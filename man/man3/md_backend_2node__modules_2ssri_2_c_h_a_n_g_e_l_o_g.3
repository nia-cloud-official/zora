.TH "md_backend_2node__modules_2ssri_2_c_h_a_n_g_e_l_o_g" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2ssri_2_c_h_a_n_g_e_l_o_g \- Changelog 
.PP
 All notable changes to this project will be documented in this file\&. See \fRstandard-version\fP for commit guidelines\&.
.SS "\fR8\&.0\&.1\fP (2024-01-27)"
.SS "Bug Fixes"
.IP "\(bu" 2
simplify regex for strict mode, add tests (\fR76e2233\fP)
.PP
.SH "\fR8\&.0\&.0\fP (2020-02-18)"
.PP
.SS "⚠ BREAKING CHANGES"
.IP "\(bu" 2
SRI values with \fR\&.\&./\fP in the algorithm name now throw as invalid (which they always probably should have!)
.IP "\(bu" 2
adds a new error that will be thrown\&. Empty SRIs are no longer considered valid for checking, only when using integrityStream to calculate the SRI value\&.
.PP
.PP
PR-URL: https://github.com/npm/ssri/pull/12 Credit: @claudiahdz
.SS "Features"
.IP "\(bu" 2
remove figgy-pudding (\fR0e78fd7\fP)
.PP
.SS "Bug Fixes"
.IP "\(bu" 2
harden SRI parsing against \&.\&./ funny business (\fR4062735\fP)
.IP "\(bu" 2
IntegrityStream responds to mutating opts object mid-stream (\fR4a963e5\fP)
.IP "\(bu" 2
throw null when sri is empty or bad (\fRa6811cb\fP), closes \fR#12\fP
.PP
.SH "\fR7\&.1\&.0\fP (2019-10-24)"
.PP
.SS "Bug Fixes"
.IP "\(bu" 2
Do not blow up if the opts object is mutated (\fR806e8c8\fP)
.PP
.SS "Features"
.IP "\(bu" 2
Add Integrity::merge method (\fR0572c1d\fP), closes \fR#4\fP
.PP
.SS "\fR7\&.0\&.1\fP (2019-09-30)"
.SH "\fR7\&.0\&.0\fP (2019-09-18)"
.PP
.SS "⚠ BREAKING CHANGES"
.IP "\(bu" 2
ssri no longer accepts a Promise option, and does not use, return, or rely on Bluebird promises\&.
.IP "\(bu" 2
drop support for Node\&.js v6\&.
.PP
.PP
We knew this was coming, and the Stream changes are breaking anyway\&. May as well do this now\&.
.IP "\(bu" 2
\fBstreams:\fP this replaces the Node\&.js stream with a Minipass stream\&. See http://npm.im/minipass for documentation\&.
.PP
.SS "Bug Fixes"
.IP "\(bu" 2
return super\&.write() return value (\fR55b055d\fP)
.IP "\(bu" 2
Use native promises only (\fR6d13165\fP)
.IP "\(bu" 2
update tap, standard, standard-version, travis (\fR2e54956\fP)
.IP "\(bu" 2
\fBstreams:\fP replace transform streams with minipass (\fR363995e\fP)
.PP
.PP
 
.SH "\fR6\&.0\&.1\fP (2018-08-27)"
.PP
.SS "Bug Fixes"
.IP "\(bu" 2
\fBopts:\fP use figgy-pudding to specify consumed opts (\fRcf86553\fP)
.PP
.PP
 
.SH "\fR6\&.0\&.0\fP (2018-04-09)"
.PP
.SS "Bug Fixes"
.IP "\(bu" 2
\fBdocs:\fP minor typo (\fRb71ef17\fP)
.PP
.SS "meta"
.IP "\(bu" 2
drop support for node@4 (\fRd9bf359\fP)
.PP
.SS "BREAKING CHANGES"
.IP "\(bu" 2
node@4 is no longer supported
.PP
.PP
 
.SH "\fR5\&.3\&.0\fP (2018-03-13)"
.PP
.SS "Features"
.IP "\(bu" 2
\fBcheckData:\fP optionally throw when checkData fails (\fRbf26b84\fP)
.PP
.PP
 
.SS "\fR5\&.2\&.4\fP (2018-02-16)"
 
.SS "\fR5\&.2\&.3\fP (2018-02-16)"
.SS "Bug Fixes"
.IP "\(bu" 2
\fBhashes:\fP filter hash priority list by available hashes (\fR2fa30b8\fP)
.IP "\(bu" 2
\fBintegrityStream:\fP dedupe algorithms to generate (\fRd56c654\fP)
.PP
.PP
 
.SS "\fR5\&.2\&.2\fP (2018-02-14)"
.SS "Bug Fixes"
.IP "\(bu" 2
\fBsecurity:\fP tweak strict SRI regex (\fR#10\fP) (\fRd0ebcdc\fP)
.PP
.PP
 
.SS "\fR5\&.2\&.1\fP (2018-02-06)"
 
.SH "\fR5\&.2\&.0\fP (2018-02-06)"
.PP
.SS "Features"
.IP "\(bu" 2
\fBmatch:\fP add integrity\&.match() (\fR3c49cc4\fP)
.PP
.PP
 
.SH "\fR5\&.1\&.0\fP (2018-01-18)"
.PP
.SS "Bug Fixes"
.IP "\(bu" 2
\fBcheckStream:\fP integrityStream now takes opts\&.integrity algos into account (\fRd262910\fP)
.PP
.SS "Features"
.IP "\(bu" 2
\fBsha3:\fP do some guesswork about upcoming sha3 (\fR7fdd9df\fP)
.PP
.PP
 
.SH "\fR5\&.0\&.0\fP (2017-10-23)"
.PP
.SS "Features"
.IP "\(bu" 2
\fBlicense:\fP relicense to ISC (#9) (\fRc82983a\fP)
.PP
.SS "BREAKING CHANGES"
.IP "\(bu" 2
\fBlicense:\fP the license has been changed from CC0-1\&.0 to ISC\&.
.PP
.PP
 
.SS "\fR4\&.1\&.6\fP (2017-06-07)"
.SS "Bug Fixes"
.IP "\(bu" 2
\fBcheckStream:\fP make sure to pass all opts through (\fR0b1bcbe\fP)
.PP
.PP
 
.SS "\fR4\&.1\&.5\fP (2017-06-05)"
.SS "Bug Fixes"
.IP "\(bu" 2
\fBintegrityStream:\fP stop crashing if opts\&.algorithms and opts\&.integrity have an algo mismatch (\fRfb1293e\fP)
.PP
.PP
 
.SS "\fR4\&.1\&.4\fP (2017-05-31)"
.SS "Bug Fixes"
.IP "\(bu" 2
\fBnode:\fP older versions of node\fR@4\fP do not support base64buffer string parsing (\fR513df4e\fP)
.PP
.PP
 
.SS "\fR4\&.1\&.3\fP (2017-05-24)"
.SS "Bug Fixes"
.IP "\(bu" 2
\fBcheck:\fP handle various bad hash corner cases better (\fRc2c262b\fP)
.PP
.PP
 
.SS "\fR4\&.1\&.2\fP (2017-04-18)"
.SS "Bug Fixes"
.IP "\(bu" 2
\fBstream:\fP _flush can be called multiple times\&. use on('end') (\fRb1c4805\fP)
.PP
.PP
 
.SS "\fR4\&.1\&.1\fP (2017-04-12)"
.SS "Bug Fixes"
.IP "\(bu" 2
\fBpickAlgorithm:\fP error if pickAlgorithm() is used in an empty Integrity (\fRfab470e\fP)
.PP
.PP
 
.SH "\fR4\&.1\&.0\fP (2017-04-07)"
.PP
.SS "Features"
.IP "\(bu" 2
adding ssri\&.create for a crypto style interface (#2) (\fR96f52ad\fP)
.PP
.PP
 
.SH "\fR4\&.0\&.0\fP (2017-04-03)"
.PP
.SS "Bug Fixes"
.IP "\(bu" 2
\fBintegrity:\fP should have changed the error code before\&. oops (\fR8381afa\fP)
.PP
.SS "BREAKING CHANGES"
.IP "\(bu" 2
\fBintegrity:\fP EBADCHECKSUM -> EINTEGRITY for verification errors
.PP
.PP
 
.SS "\fR3\&.0\&.2\fP (2017-04-03)"
 
.SS "\fR3\&.0\&.1\fP (2017-04-03)"
.SS "Bug Fixes"
.IP "\(bu" 2
\fBpackage\&.json:\fP really should have these in the keywords because search (\fRa6ac6d0\fP)
.PP
.PP
 
.SH "\fR3\&.0\&.0\fP (2017-04-03)"
.PP
.SS "Bug Fixes"
.IP "\(bu" 2
\fBhashes:\fP IntegrityMetadata -> Hash (\fRd04aa1f\fP)
.PP
.SS "Features"
.IP "\(bu" 2
\fBcheck:\fP return IntegrityMetadata on check success (\fR2301e74\fP)
.IP "\(bu" 2
\fBfromHex:\fP ssri\&.fromHex to make it easier to generate them from hex valus (\fR049b89e\fP)
.IP "\(bu" 2
\fBhex:\fP utility function for getting hex version of digest (\fRa9f021c\fP)
.IP "\(bu" 2
\fBhexDigest:\fP added hexDigest method to Integrity objects too (\fR85208ba\fP)
.IP "\(bu" 2
\fBintegrity:\fP add \&.isIntegrity and \&.isIntegrityMetadata (\fR1b29e6f\fP)
.IP "\(bu" 2
\fBintegrityStream:\fP new stream that can both generate and check streamed data (\fRfd23e1b\fP)
.IP "\(bu" 2
\fBparse:\fP allow parsing straight into a single IntegrityMetadata object (\fRc8ddf48\fP)
.IP "\(bu" 2
\fBpickAlgorithm:\fP Intergrity::pickAlgorithm() added (\fRb97a796\fP)
.IP "\(bu" 2
\fBsize:\fP calculate and update stream sizes (\fR02ed1ad\fP)
.PP
.SS "BREAKING CHANGES"
.IP "\(bu" 2
\fBhashes:\fP \fR\&.isIntegrityMetadata\fP is now \fR\&.isHash\fP\&. Also, any references to \fRIntegrityMetadata\fP now refer to \fRHash\fP\&.
.IP "\(bu" 2
\fBintegrityStream:\fP createCheckerStream has been removed and replaced with a general-purpose integrityStream\&.
.PP
.PP
To convert existing createCheckerStream code, move the \fRsri\fP argument into \fRopts\&.integrity\fP in integrityStream\&. All other options should be the same\&.
.IP "\(bu" 2
\fBcheck:\fP \fRcheckData\fP, \fRcheckStream\fP, and \fRcreateCheckerStream\fP now yield a whole IntegrityMetadata instance representing the first successful hash match\&.
.PP
.PP
 
.SH "\fR2\&.0\&.0\fP (2017-03-24)"
.PP
.SS "Bug Fixes"
.IP "\(bu" 2
\fBstrict-mode:\fP make regexes more rigid (\fR122a32c\fP)
.PP
.SS "Features"
.IP "\(bu" 2
\fBapi:\fP added serialize alias for unparse (\fR999b421\fP)
.IP "\(bu" 2
\fBconcat:\fP add Integrity::concat() (\fRcae12c7\fP)
.IP "\(bu" 2
\fBpickAlgo:\fP pick the strongest algorithm provided, by default (\fR58c18f7\fP)
.IP "\(bu" 2
\fBstrict-mode:\fP strict SRI support (\fR3f0b64c\fP)
.IP "\(bu" 2
\fBstringify:\fP replaced unparse/serialize with stringify (\fR4acad30\fP)
.IP "\(bu" 2
\fBverification:\fP add opts\&.pickAlgorithm (\fRf72e658\fP)
.PP
.SS "BREAKING CHANGES"
.IP "\(bu" 2
\fBpickAlgo:\fP ssri will prioritize specific hashes now
.IP "\(bu" 2
\fBstringify:\fP serialize and unparse have been removed\&. Use ssri\&.stringify instead\&.
.IP "\(bu" 2
\fBstrict-mode:\fP functions that accepted an optional \fRsep\fP argument now expect \fRopts\&.sep\fP\&.
.PP
.PP
 
.SH "1\&.0\&.0 (2017-03-23)"
.PP
.SS "Features"
.IP "\(bu" 2
\fBapi:\fP implemented initial api (\fR4fbb16b\fP)
.PP
.SS "BREAKING CHANGES"
.IP "\(bu" 2
\fBapi:\fP Initial API established\&. 
.PP

