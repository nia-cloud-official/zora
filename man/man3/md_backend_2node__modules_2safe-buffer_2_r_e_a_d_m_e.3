.TH "md_backend_2node__modules_2safe-buffer_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2safe-buffer_2_r_e_a_d_m_e \- safe-buffer \fR\fP \fR\fP \fR\fP \fR\fP 
.PP

.SS "Safer Node\&.js Buffer API"
**Use the new Node\&.js Buffer APIs (\fRBuffer\&.from\fP, \fRBuffer\&.alloc\fP, \fRBuffer\&.allocUnsafe\fP, \fRBuffer\&.allocUnsafeSlow\fP) in all versions of Node\&.js\&.**
.PP
\fBUses the built-in implementation when available\&.\fP
.SH "install"
.PP
.PP
.nf
npm install safe\-buffer
.fi
.PP
.SH "usage"
.PP
The goal of this package is to provide a safe replacement for the node\&.js \fRBuffer\fP\&.
.PP
It's a drop-in replacement for \fRBuffer\fP\&. You can use it by adding one \fRrequire\fP line to the top of your node\&.js modules:
.PP
.PP
.nf
var Buffer = require('safe\-buffer')\&.Buffer

// Existing buffer code will continue to work without issues:

new Buffer('hey', 'utf8')
new Buffer([1, 2, 3], 'utf8')
new Buffer(obj)
new Buffer(16) // create an uninitialized buffer (potentially unsafe)

// But you can use these new explicit APIs to make clear what you want:

Buffer\&.from('hey', 'utf8') // convert from many types to a Buffer
Buffer\&.alloc(16) // create a zero\-filled buffer (safe)
Buffer\&.allocUnsafe(16) // create an uninitialized buffer (potentially unsafe)
.fi
.PP
.SH "api"
.PP
.SS "Class Method: Buffer\&.from(array)"
.IP "\(bu" 2
\fRarray\fP {Array}
.PP
.PP
Allocates a new \fRBuffer\fP using an \fRarray\fP of octets\&.
.PP
.PP
.nf
const buf = Buffer\&.from([0x62,0x75,0x66,0x66,0x65,0x72]);
  // creates a new Buffer containing ASCII bytes
  // ['b','u','f','f','e','r']
.fi
.PP
.PP
A \fRTypeError\fP will be thrown if \fRarray\fP is not an \fRArray\fP\&.
.SS "Class Method: Buffer\&.from(arrayBuffer[, byteOffset[, length]])"
.IP "\(bu" 2
\fRarrayBuffer\fP {ArrayBuffer} The \fR\&.buffer\fP property of a \fRTypedArray\fP or a \fRnew ArrayBuffer()\fP
.IP "\(bu" 2
\fRbyteOffset\fP {Number} Default: \fR0\fP
.IP "\(bu" 2
\fRlength\fP {Number} Default: \fRarrayBuffer\&.length - byteOffset\fP
.PP
.PP
When passed a reference to the \fR\&.buffer\fP property of a \fRTypedArray\fP instance, the newly created \fRBuffer\fP will share the same allocated memory as the TypedArray\&.
.PP
.PP
.nf
const arr = new Uint16Array(2);
arr[0] = 5000;
arr[1] = 4000;

const buf = Buffer\&.from(arr\&.buffer); // shares the memory with arr;

console\&.log(buf);
  // Prints: <Buffer 88 13 a0 0f>

// changing the TypedArray changes the Buffer also
arr[1] = 6000;

console\&.log(buf);
  // Prints: <Buffer 88 13 70 17>
.fi
.PP
.PP
The optional \fRbyteOffset\fP and \fRlength\fP arguments specify a memory range within the \fRarrayBuffer\fP that will be shared by the \fRBuffer\fP\&.
.PP
.PP
.nf
const ab = new ArrayBuffer(10);
const buf = Buffer\&.from(ab, 0, 2);
console\&.log(buf\&.length);
  // Prints: 2
.fi
.PP
.PP
A \fRTypeError\fP will be thrown if \fRarrayBuffer\fP is not an \fRArrayBuffer\fP\&.
.SS "Class Method: Buffer\&.from(buffer)"
.IP "\(bu" 2
\fRbuffer\fP {Buffer}
.PP
.PP
Copies the passed \fRbuffer\fP data onto a new \fRBuffer\fP instance\&.
.PP
.PP
.nf
const buf1 = Buffer\&.from('buffer');
const buf2 = Buffer\&.from(buf1);

buf1[0] = 0x61;
console\&.log(buf1\&.toString());
  // 'auffer'
console\&.log(buf2\&.toString());
  // 'buffer' (copy is not changed)
.fi
.PP
.PP
A \fRTypeError\fP will be thrown if \fRbuffer\fP is not a \fRBuffer\fP\&.
.SS "Class Method: Buffer\&.from(str[, encoding])"
.IP "\(bu" 2
\fRstr\fP {String} String to encode\&.
.IP "\(bu" 2
\fRencoding\fP {String} Encoding to use, Default: `'utf8'`
.PP
.PP
Creates a new \fRBuffer\fP containing the given JavaScript string \fRstr\fP\&. If provided, the \fRencoding\fP parameter identifies the character encoding\&. If not provided, \fRencoding\fP defaults to `'utf8'`\&.
.PP
.PP
.nf
const buf1 = Buffer\&.from('this is a tést');
console\&.log(buf1\&.toString());
  // prints: this is a tést
console\&.log(buf1\&.toString('ascii'));
  // prints: this is a tC)st

const buf2 = Buffer\&.from('7468697320697320612074c3a97374', 'hex');
console\&.log(buf2\&.toString());
  // prints: this is a tést
.fi
.PP
.PP
A \fRTypeError\fP will be thrown if \fRstr\fP is not a string\&.
.SS "Class Method: Buffer\&.alloc(size[, fill[, encoding]])"
.IP "\(bu" 2
\fRsize\fP {Number}
.IP "\(bu" 2
\fRfill\fP {Value} Default: \fRundefined\fP
.IP "\(bu" 2
\fRencoding\fP {String} Default: \fRutf8\fP
.PP
.PP
Allocates a new \fRBuffer\fP of \fRsize\fP bytes\&. If \fRfill\fP is \fRundefined\fP, the \fRBuffer\fP will be \fIzero-filled\fP\&.
.PP
.PP
.nf
const buf = Buffer\&.alloc(5);
console\&.log(buf);
  // <Buffer 00 00 00 00 00>
.fi
.PP
.PP
The \fRsize\fP must be less than or equal to the value of `require('buffer')\&.kMaxLength\fR(on 64-bit architectures,\fPkMaxLength\fRis \fP(2^31)-1\fR)\&. Otherwise, a [\fPRangeError\fR][] is thrown\&. A zero-length Buffer will be created if a\fPsize` less than or equal to 0 is specified\&.
.PP
If \fRfill\fP is specified, the allocated \fRBuffer\fP will be initialized by calling \fRbuf\&.fill(fill)\fP\&. See [\fRbuf\&.fill()\fP][] for more information\&.
.PP
.PP
.nf
const buf = Buffer\&.alloc(5, 'a');
console\&.log(buf);
  // <Buffer 61 61 61 61 61>
.fi
.PP
.PP
If both \fRfill\fP and \fRencoding\fP are specified, the allocated \fRBuffer\fP will be initialized by calling \fRbuf\&.fill(fill, encoding)\fP\&. For example:
.PP
.PP
.nf
const buf = Buffer\&.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');
console\&.log(buf);
  // <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>
.fi
.PP
.PP
Calling \fRBuffer\&.alloc(size)\fP can be significantly slower than the alternative \fRBuffer\&.allocUnsafe(size)\fP but ensures that the newly created \fRBuffer\fP instance contents will \fInever contain sensitive data\fP\&.
.PP
A \fRTypeError\fP will be thrown if \fRsize\fP is not a number\&.
.SS "Class Method: Buffer\&.allocUnsafe(size)"
.IP "\(bu" 2
\fRsize\fP {Number}
.PP
.PP
Allocates a new \fInon-zero-filled\fP \fRBuffer\fP of \fRsize\fP bytes\&. The \fRsize\fP must be less than or equal to the value of `require('buffer')\&.kMaxLength\fR(on 64-bit architectures,\fPkMaxLength\fRis\fP(2^31)-1\fR)\&. Otherwise, a [\fPRangeError\fR][] is thrown\&. A zero-length Buffer will be created if a\fPsize` less than or equal to 0 is specified\&.
.PP
The underlying memory for \fRBuffer\fP instances created in this way is \fInot initialized\fP\&. The contents of the newly created \fRBuffer\fP are unknown and \fImay contain sensitive data\fP\&. Use [\fRbuf\&.fill(0)\fP][] to initialize such \fRBuffer\fP instances to zeroes\&.
.PP
.PP
.nf
const buf = Buffer\&.allocUnsafe(5);
console\&.log(buf);
  // <Buffer 78 e0 82 02 01>
  // (octets will be different, every time)
buf\&.fill(0);
console\&.log(buf);
  // <Buffer 00 00 00 00 00>
.fi
.PP
.PP
A \fRTypeError\fP will be thrown if \fRsize\fP is not a number\&.
.PP
Note that the \fRBuffer\fP module pre-allocates an internal \fRBuffer\fP instance of size \fRBuffer\&.poolSize\fP that is used as a pool for the fast allocation of new \fRBuffer\fP instances created using \fRBuffer\&.allocUnsafe(size)\fP (and the deprecated \fRnew Buffer(size)\fP constructor) only when \fRsize\fP is less than or equal to \fRBuffer\&.poolSize >> 1\fP (floor of \fRBuffer\&.poolSize\fP divided by two)\&. The default value of \fRBuffer\&.poolSize\fP is \fR8192\fP but can be modified\&.
.PP
Use of this pre-allocated internal memory pool is a key difference between calling \fRBuffer\&.alloc(size, fill)\fP vs\&. \fRBuffer\&.allocUnsafe(size)\&.fill(fill)\fP\&. Specifically, \fRBuffer\&.alloc(size, fill)\fP will \fInever\fP use the internal Buffer pool, while \fRBuffer\&.allocUnsafe(size)\&.fill(fill)\fP \fIwill\fP use the internal Buffer pool if \fRsize\fP is less than or equal to half \fRBuffer\&.poolSize\fP\&. The difference is subtle but can be important when an application requires the additional performance that \fRBuffer\&.allocUnsafe(size)\fP provides\&.
.SS "Class Method: Buffer\&.allocUnsafeSlow(size)"
.IP "\(bu" 2
\fRsize\fP {Number}
.PP
.PP
Allocates a new \fInon-zero-filled\fP and non-pooled \fRBuffer\fP of \fRsize\fP bytes\&. The \fRsize\fP must be less than or equal to the value of `require('buffer')\&.kMaxLength\fR(on 64-bit architectures,\fPkMaxLength\fRis \fP(2^31)-1\fR)\&. Otherwise, a [\fPRangeError\fR][] is thrown\&. A zero-length Buffer will be created if a\fPsize` less than or equal to 0 is specified\&.
.PP
The underlying memory for \fRBuffer\fP instances created in this way is \fInot initialized\fP\&. The contents of the newly created \fRBuffer\fP are unknown and \fImay contain sensitive data\fP\&. Use [\fRbuf\&.fill(0)\fP][] to initialize such \fRBuffer\fP instances to zeroes\&.
.PP
When using \fRBuffer\&.allocUnsafe()\fP to allocate new \fRBuffer\fP instances, allocations under 4KB are, by default, sliced from a single pre-allocated \fRBuffer\fP\&. This allows applications to avoid the garbage collection overhead of creating many individually allocated Buffers\&. This approach improves both performance and memory usage by eliminating the need to track and cleanup as many \fRPersistent\fP objects\&.
.PP
However, in the case where a developer may need to retain a small chunk of memory from a pool for an indeterminate amount of time, it may be appropriate to create an un-pooled Buffer instance using \fRBuffer\&.allocUnsafeSlow()\fP then copy out the relevant bits\&.
.PP
.PP
.nf
// need to keep around a few small chunks of memory
const store = [];

socket\&.on('readable', () => {
  const data = socket\&.read();
  // allocate for retained data
  const sb = Buffer\&.allocUnsafeSlow(10);
  // copy the data into the new allocation
  data\&.copy(sb, 0, 0, 10);
  store\&.push(sb);
});
.fi
.PP
.PP
Use of \fRBuffer\&.allocUnsafeSlow()\fP should be used only as a last resort \fIafter\fP a developer has observed undue memory retention in their applications\&.
.PP
A \fRTypeError\fP will be thrown if \fRsize\fP is not a number\&.
.SS "All the Rest"
The rest of the \fRBuffer\fP API is exactly the same as in node\&.js\&. \fRSee the docs\fP\&.
.SH "Related links"
.PP
.IP "\(bu" 2
\fRNode\&.js issue: Buffer(number) is unsafe\fP
.IP "\(bu" 2
\fRNode\&.js Enhancement Proposal: Buffer\&.from/Buffer\&.alloc/Buffer\&.zalloc/Buffer() soft-deprecate\fP
.PP
.SH "Why is \fRBuffer\fP unsafe?"
.PP
Today, the node\&.js \fRBuffer\fP constructor is overloaded to handle many different argument types like \fRString\fP, \fRArray\fP, \fRObject\fP, \fRTypedArrayView\fP (\fRUint8Array\fP, etc\&.), \fRArrayBuffer\fP, and also \fRNumber\fP\&.
.PP
The API is optimized for convenience: you can throw any type at it, and it will try to do what you want\&.
.PP
Because the Buffer constructor is so powerful, you often see code like this:
.PP
.PP
.nf
// Convert UTF\-8 strings to hex
function toHex (str) {
  return new Buffer(str)\&.toString('hex')
}
.fi
.PP
.PP
\fI\fBBut what happens if \fRtoHex\fP is called with a \fRNumber\fP argument?\fP\fP
.SS "Remote Memory Disclosure"
If an attacker can make your program call the \fRBuffer\fP constructor with a \fRNumber\fP argument, then they can make it allocate uninitialized memory from the node\&.js process\&. This could potentially disclose TLS private keys, user data, or database passwords\&.
.PP
When the \fRBuffer\fP constructor is passed a \fRNumber\fP argument, it returns an \fBUNINITIALIZED\fP block of memory of the specified \fRsize\fP\&. When you create a \fRBuffer\fP like this, you \fBMUST\fP overwrite the contents before returning it to the user\&.
.PP
From the \fRnode\&.js docs\fP:
.PP
.RS 4
\fRnew Buffer(size)\fP
.PP
.IP "\(bu" 2
\fRsize\fP Number
.PP
.PP
The underlying memory for \fRBuffer\fP instances created in this way is not initialized\&. \fBThe contents of a newly created \fRBuffer\fP are unknown and could contain sensitive data\&.\fP Use \fRbuf\&.fill(0)\fP to initialize a Buffer to zeroes\&. 
.RE
.PP
.PP
(Emphasis our own\&.)
.PP
Whenever the programmer intended to create an uninitialized \fRBuffer\fP you often see code like this:
.PP
.PP
.nf
var buf = new Buffer(16)

// Immediately overwrite the uninitialized buffer with data from another buffer
for (var i = 0; i < buf\&.length; i++) {
  buf[i] = otherBuf[i]
}
.fi
.PP
.SS "Would this ever be a problem in real code?"
Yes\&. It's surprisingly common to forget to check the type of your variables in a dynamically-typed language like JavaScript\&.
.PP
Usually the consequences of assuming the wrong type is that your program crashes with an uncaught exception\&. But the failure mode for forgetting to check the type of arguments to the \fRBuffer\fP constructor is more catastrophic\&.
.PP
Here's an example of a vulnerable service that takes a JSON payload and converts it to hex:
.PP
.PP
.nf
// Take a JSON payload {str: "some string"} and convert it to hex
var server = http\&.createServer(function (req, res) {
  var data = ''
  req\&.setEncoding('utf8')
  req\&.on('data', function (chunk) {
    data += chunk
  })
  req\&.on('end', function () {
    var body = JSON\&.parse(data)
    res\&.end(new Buffer(body\&.str)\&.toString('hex'))
  })
})

server\&.listen(8080)
.fi
.PP
.PP
In this example, an http client just has to send:
.PP
.PP
.nf
{
  "str": 1000
}
.fi
.PP
.PP
and it will get back 1,000 bytes of uninitialized memory from the server\&.
.PP
This is a very serious bug\&. It's similar in severity to the \fRthe Heartbleed bug\fP that allowed disclosure of OpenSSL process memory by remote attackers\&.
.SS "Which real-world packages were vulnerable?"
.SS "\fR\fRbittorrent-dht\fP\fP"
\fRMathias Buus\fP and I (\fRFeross Aboukhadijeh\fP) found this issue in one of our own packages, \fR\fRbittorrent-dht\fP\fP\&. The bug would allow anyone on the internet to send a series of messages to a user of \fRbittorrent-dht\fP and get them to reveal 20 bytes at a time of uninitialized memory from the node\&.js process\&.
.PP
Here's \fRthe commit\fP that fixed it\&. We released a new fixed version, created a \fRNode Security Project disclosure\fP, and deprecated all vulnerable versions on npm so users will get a warning to upgrade to a newer version\&.
.SS "\fR\fRws\fP\fP"
That got us wondering if there were other vulnerable packages\&. Sure enough, within a short period of time, we found the same issue in \fR\fRws\fP\fP, the most popular WebSocket implementation in node\&.js\&.
.PP
If certain APIs were called with \fRNumber\fP parameters instead of \fRString\fP or \fRBuffer\fP as expected, then uninitialized server memory would be disclosed to the remote peer\&.
.PP
These were the vulnerable methods:
.PP
.PP
.nf
socket\&.send(number)
socket\&.ping(number)
socket\&.pong(number)
.fi
.PP
.PP
Here's a vulnerable socket server with some echo functionality:
.PP
.PP
.nf
server\&.on('connection', function (socket) {
  socket\&.on('message', function (message) {
    message = JSON\&.parse(message)
    if (message\&.type === 'echo') {
      socket\&.send(message\&.data) // send back the user's message
    }
  })
})
.fi
.PP
.PP
\fRsocket\&.send(number)\fP called on the server, will disclose server memory\&.
.PP
Here's \fRthe release\fP where the issue was fixed, with a more detailed explanation\&. Props to \fRArnout Kazemier\fP for the quick fix\&. Here's the \fRNode Security Project disclosure\fP\&.
.SS "What's the solution?"
It's important that node\&.js offers a fast way to get memory otherwise performance-critical applications would needlessly get a lot slower\&.
.PP
But we need a better way to \fIsignal our intent\fP as programmers\&. \fBWhen we want uninitialized memory, we should request it explicitly\&.\fP
.PP
Sensitive functionality should not be packed into a developer-friendly API that loosely accepts many different types\&. This type of API encourages the lazy practice of passing variables in without checking the type very carefully\&.
.SS "A new API: \fRBuffer\&.allocUnsafe(number)\fP"
The functionality of creating buffers with uninitialized memory should be part of another API\&. We propose \fRBuffer\&.allocUnsafe(number)\fP\&. This way, it's not part of an API that frequently gets user input of all sorts of different types passed into it\&.
.PP
.PP
.nf
var buf = Buffer\&.allocUnsafe(16) // careful, uninitialized memory!

// Immediately overwrite the uninitialized buffer with data from another buffer
for (var i = 0; i < buf\&.length; i++) {
  buf[i] = otherBuf[i]
}
.fi
.PP
.SS "How do we fix node\&.js core?"
We sent \fRa PR to node\&.js core\fP (merged as \fRsemver-major\fP) which defends against one case:
.PP
.PP
.nf
var str = 16
new Buffer(str, 'utf8')
.fi
.PP
.PP
In this situation, it's implied that the programmer intended the first argument to be a string, since they passed an encoding as a second argument\&. Today, node\&.js will allocate uninitialized memory in the case of \fRnew Buffer(number, encoding)\fP, which is probably not what the programmer intended\&.
.PP
But this is only a partial solution, since if the programmer does \fRnew Buffer(variable)\fP (without an \fRencoding\fP parameter) there's no way to know what they intended\&. If \fRvariable\fP is sometimes a number, then uninitialized memory will sometimes be returned\&.
.SS "What's the real long-term fix?"
We could deprecate and remove \fRnew Buffer(number)\fP and use \fRBuffer\&.allocUnsafe(number)\fP when we need uninitialized memory\&. But that would break 1000s of packages\&.
.PP
We believe the best solution is to:
.PP
1\&. Change \fRnew Buffer(number)\fP to return safe, zeroed-out memory
.PP
2\&. Create a new API for creating uninitialized Buffers\&. We propose: \fRBuffer\&.allocUnsafe(number)\fP
.SS "Update"
We now support adding three new APIs:
.PP
.IP "\(bu" 2
\fRBuffer\&.from(value)\fP - convert from any type to a buffer
.IP "\(bu" 2
\fRBuffer\&.alloc(size)\fP - create a zero-filled buffer
.IP "\(bu" 2
\fRBuffer\&.allocUnsafe(size)\fP - create an uninitialized buffer with given size
.PP
.PP
This solves the core problem that affected \fRws\fP and \fRbittorrent-dht\fP which is \fRBuffer(variable)\fP getting tricked into taking a number argument\&.
.PP
This way, existing code continues working and the impact on the npm ecosystem will be minimal\&. Over time, npm maintainers can migrate performance-critical code to use \fRBuffer\&.allocUnsafe(number)\fP instead of \fRnew Buffer(number)\fP\&.
.SS "Conclusion"
We think there's a serious design issue with the \fRBuffer\fP API as it exists today\&. It promotes insecure software by putting high-risk functionality into a convenient API with friendly 'developer ergonomics'\&.
.PP
This wasn't merely a theoretical exercise because we found the issue in some of the most popular npm packages\&.
.PP
Fortunately, there's an easy fix that can be applied today\&. Use \fRsafe-buffer\fP in place of \fRbuffer\fP\&.
.PP
.PP
.nf
var Buffer = require('safe\-buffer')\&.Buffer
.fi
.PP
.PP
Eventually, we hope that node\&.js core can switch to this new, safer behavior\&. We believe the impact on the ecosystem would be minimal since it's not a breaking change\&. Well-maintained, popular packages would be updated to use \fRBuffer\&.alloc\fP quickly, while older, insecure packages would magically become safe from this attack vector\&.
.SH "links"
.PP
.IP "\(bu" 2
\fRNode\&.js PR: buffer: throw if both length and enc are passed\fP
.IP "\(bu" 2
\fRNode Security Project disclosure for \fRws\fP\fP
.IP "\(bu" 2
\fRNode Security Project disclosure for\fRbittorrent-dht\fP\fP
.PP
.SH "credit"
.PP
The original issues in \fRbittorrent-dht\fP (\fRdisclosure\fP) and \fRws\fP (\fRdisclosure\fP) were discovered by \fRMathias Buus\fP and \fRFeross Aboukhadijeh\fP\&.
.PP
Thanks to \fRAdam Baldwin\fP for helping disclose these issues and for his work running the \fRNode Security Project\fP\&.
.PP
Thanks to \fRJohn Hiesey\fP for proofreading this README and auditing the code\&.
.SH "license"
.PP
MIT\&. Copyright (C) \fRFeross Aboukhadijeh\fP 
