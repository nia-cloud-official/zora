.TH "gyp.xcode_emulation.XcodeSettings" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gyp.xcode_emulation.XcodeSettings
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__init__\fP (self, \fBspec\fP)"
.br
.ti -1c
.RI "\fBIsBinaryOutputFormat\fP (self, \fBconfigname\fP)"
.br
.ti -1c
.RI "\fBIsIosFramework\fP (self)"
.br
.ti -1c
.RI "\fBGetFrameworkVersion\fP (self)"
.br
.ti -1c
.RI "\fBGetWrapperExtension\fP (self)"
.br
.ti -1c
.RI "\fBGetProductName\fP (self)"
.br
.ti -1c
.RI "\fBGetFullProductName\fP (self)"
.br
.ti -1c
.RI "\fBGetWrapperName\fP (self)"
.br
.ti -1c
.RI "\fBGetBundleContentsFolderPath\fP (self)"
.br
.ti -1c
.RI "\fBGetBundleResourceFolder\fP (self)"
.br
.ti -1c
.RI "\fBGetBundleExecutableFolderPath\fP (self)"
.br
.ti -1c
.RI "\fBGetBundleJavaFolderPath\fP (self)"
.br
.ti -1c
.RI "\fBGetBundleFrameworksFolderPath\fP (self)"
.br
.ti -1c
.RI "\fBGetBundleSharedFrameworksFolderPath\fP (self)"
.br
.ti -1c
.RI "\fBGetBundleSharedSupportFolderPath\fP (self)"
.br
.ti -1c
.RI "\fBGetBundlePlugInsFolderPath\fP (self)"
.br
.ti -1c
.RI "\fBGetBundleXPCServicesFolderPath\fP (self)"
.br
.ti -1c
.RI "\fBGetBundlePlistPath\fP (self)"
.br
.ti -1c
.RI "\fBGetProductType\fP (self)"
.br
.ti -1c
.RI "\fBGetMachOType\fP (self)"
.br
.ti -1c
.RI "\fBGetExecutableName\fP (self)"
.br
.ti -1c
.RI "\fBGetExecutablePath\fP (self)"
.br
.ti -1c
.RI "\fBGetActiveArchs\fP (self, \fBconfigname\fP)"
.br
.ti -1c
.RI "\fBGetCflags\fP (self, \fBconfigname\fP, arch=None)"
.br
.ti -1c
.RI "\fBGetCflagsC\fP (self, \fBconfigname\fP)"
.br
.ti -1c
.RI "\fBGetCflagsCC\fP (self, \fBconfigname\fP)"
.br
.ti -1c
.RI "\fBGetCflagsObjC\fP (self, \fBconfigname\fP)"
.br
.ti -1c
.RI "\fBGetCflagsObjCC\fP (self, \fBconfigname\fP)"
.br
.ti -1c
.RI "\fBGetInstallNameBase\fP (self)"
.br
.ti -1c
.RI "\fBGetInstallName\fP (self)"
.br
.ti -1c
.RI "\fBGetLdflags\fP (self, \fBconfigname\fP, product_dir, gyp_to_build_path, arch=None)"
.br
.ti -1c
.RI "\fBGetLibtoolflags\fP (self, \fBconfigname\fP)"
.br
.ti -1c
.RI "\fBGetPerTargetSettings\fP (self)"
.br
.ti -1c
.RI "\fBGetPerConfigSetting\fP (self, setting, \fBconfigname\fP, default=None)"
.br
.ti -1c
.RI "\fBGetPerTargetSetting\fP (self, setting, default=None)"
.br
.ti -1c
.RI "\fBAddImplicitPostbuilds\fP (self, \fBconfigname\fP, output, output_binary, postbuilds=[], quiet=False)"
.br
.ti -1c
.RI "\fBAdjustLibraries\fP (self, libraries, config_name=None)"
.br
.ti -1c
.RI "\fBGetExtraPlistItems\fP (self, \fBconfigname\fP=None)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBspec\fP"
.br
.ti -1c
.RI "\fBisIOS\fP"
.br
.ti -1c
.RI "\fBmac_toolchain_dir\fP"
.br
.ti -1c
.RI "\fBheader_map_path\fP"
.br
.ti -1c
.RI "\fBxcode_settings\fP"
.br
.ti -1c
.RI "\fBconfigname\fP"
.br
.ti -1c
.RI "\fBlibrary_re\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fB_ConvertConditionalKeys\fP (self, \fBconfigname\fP)"
.br
.ti -1c
.RI "\fB_Settings\fP (self)"
.br
.ti -1c
.RI "\fB_Test\fP (self, test_key, cond_key, default)"
.br
.ti -1c
.RI "\fB_Appendf\fP (self, lst, test_key, format_str, default=None)"
.br
.ti -1c
.RI "\fB_WarnUnimplemented\fP (self, test_key)"
.br
.ti -1c
.RI "\fB_IsBundle\fP (self)"
.br
.ti -1c
.RI "\fB_IsXCTest\fP (self)"
.br
.ti -1c
.RI "\fB_IsXCUiTest\fP (self)"
.br
.ti -1c
.RI "\fB_IsIosAppExtension\fP (self)"
.br
.ti -1c
.RI "\fB_IsIosWatchKitExtension\fP (self)"
.br
.ti -1c
.RI "\fB_IsIosWatchApp\fP (self)"
.br
.ti -1c
.RI "\fB_GetBundleBinaryPath\fP (self)"
.br
.ti -1c
.RI "\fB_GetStandaloneExecutableSuffix\fP (self)"
.br
.ti -1c
.RI "\fB_GetStandaloneExecutablePrefix\fP (self)"
.br
.ti -1c
.RI "\fB_GetStandaloneBinaryPath\fP (self)"
.br
.ti -1c
.RI "\fB_GetSdkVersionInfoItem\fP (self, sdk, infoitem)"
.br
.ti -1c
.RI "\fB_SdkRoot\fP (self, \fBconfigname\fP)"
.br
.ti -1c
.RI "\fB_XcodePlatformPath\fP (self, \fBconfigname\fP=None)"
.br
.ti -1c
.RI "\fB_SdkPath\fP (self, \fBconfigname\fP=None)"
.br
.ti -1c
.RI "\fB_XcodeSdkPath\fP (self, sdk_root)"
.br
.ti -1c
.RI "\fB_AppendPlatformVersionMinFlags\fP (self, lst)"
.br
.ti -1c
.RI "\fB_AddObjectiveCGarbageCollectionFlags\fP (self, flags)"
.br
.ti -1c
.RI "\fB_AddObjectiveCARCFlags\fP (self, flags)"
.br
.ti -1c
.RI "\fB_AddObjectiveCMissingPropertySynthesisFlags\fP (self, flags)"
.br
.ti -1c
.RI "\fB_StandardizePath\fP (self, path)"
.br
.ti -1c
.RI "\fB_MapLinkerFlagFilename\fP (self, ldflag, gyp_to_build_path)"
.br
.ti -1c
.RI "\fB_GetStripPostbuilds\fP (self, \fBconfigname\fP, output_binary, quiet)"
.br
.ti -1c
.RI "\fB_GetDebugInfoPostbuilds\fP (self, \fBconfigname\fP, output, output_binary, quiet)"
.br
.ti -1c
.RI "\fB_GetTargetPostbuilds\fP (self, \fBconfigname\fP, output, output_binary, quiet=False)"
.br
.ti -1c
.RI "\fB_GetIOSPostbuilds\fP (self, \fBconfigname\fP, output_binary)"
.br
.ti -1c
.RI "\fB_GetIOSCodeSignIdentityKey\fP (self, settings)"
.br
.ti -1c
.RI "\fB_AdjustLibrary\fP (self, library, config_name=None)"
.br
.ti -1c
.RI "\fB_BuildMachineOSBuild\fP (self)"
.br
.ti -1c
.RI "\fB_XcodeIOSDeviceFamily\fP (self, \fBconfigname\fP)"
.br
.ti -1c
.RI "\fB_DefaultSdkRoot\fP (self)"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "dict \fB_sdk_path_cache\fP = {}"
.br
.ti -1c
.RI "dict \fB_platform_path_cache\fP = {}"
.br
.ti -1c
.RI "dict \fB_sdk_root_cache\fP = {}"
.br
.ti -1c
.RI "dict \fB_plist_cache\fP = {}"
.br
.ti -1c
.RI "dict \fB_codesigning_key_cache\fP = {}"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
A class that understands the gyp 'xcode_settings' object\&.
.fi
.PP
 
.PP
Definition at line \fB148\fP of file \fBxcode_emulation\&.py\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.__init__ ( self,  spec)"

.PP
Definition at line \fB165\fP of file \fBxcode_emulation\&.py\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._AddObjectiveCARCFlags ( self,  flags)\fR [protected]\fP"

.PP
Definition at line \fB761\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._AddObjectiveCGarbageCollectionFlags ( self,  flags)\fR [protected]\fP"

.PP
Definition at line \fB754\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._AddObjectiveCMissingPropertySynthesisFlags ( self,  flags)\fR [protected]\fP"

.PP
Definition at line \fB765\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._AdjustLibrary ( self,  library,  config_name = \fRNone\fP)\fR [protected]\fP"

.PP
Definition at line \fB1246\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._Appendf ( self,  lst,  test_key,  format_str,  default = \fRNone\fP)\fR [protected]\fP"

.PP
Definition at line \fB216\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._AppendPlatformVersionMinFlags ( self,  lst)\fR [protected]\fP"

.PP
Definition at line \fB557\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._BuildMachineOSBuild ( self)\fR [protected]\fP"

.PP
Definition at line \fB1284\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._ConvertConditionalKeys ( self,  configname)\fR [protected]\fP"

.PP
.nf
Converts or warns on conditional keys\&.  Xcode supports conditional keys,
such as CODE_SIGN_IDENTITY[sdk=iphoneos*]\&.  This is a partial implementation
with some keys converted while the rest force a warning\&.
.fi
.PP
 
.PP
Definition at line \fB190\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._DefaultSdkRoot ( self)\fR [protected]\fP"

.PP
.nf
Returns the default SDKROOT to use\&.

Prior to version 5\&.0\&.0, if SDKROOT was not explicitly set in the Xcode
project, then the environment variable was empty\&. Starting with this
version, Xcode uses the name of the newest SDK installed\&.

.fi
.PP
 
.PP
Definition at line \fB1342\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._GetBundleBinaryPath ( self)\fR [protected]\fP"

.PP
.nf
Returns the name of the bundle binary of by this target\&.
E\&.g\&. Chromium\&.app/Contents/MacOS/Chromium\&. Only valid for bundles\&.
.fi
.PP
 
.PP
Definition at line \fB439\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._GetDebugInfoPostbuilds ( self,  configname,  output,  output_binary,  quiet)\fR [protected]\fP"

.PP
.nf
Returns a list of shell commands that contain the shell commands
necessary to massage this target's debug information\&. These should be run
as postbuilds before the actual postbuilds run\&.
.fi
.PP
 
.PP
Definition at line \fB1093\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._GetIOSCodeSignIdentityKey ( self,  settings)\fR [protected]\fP"

.PP
Definition at line \fB1218\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._GetIOSPostbuilds ( self,  configname,  output_binary)\fR [protected]\fP"

.PP
.nf
Return a shell command to codesign the iOS output binary so it can
be deployed to a device\&.  This should be run as the very last step of the
build\&.
.fi
.PP
 
.PP
Definition at line \fB1123\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._GetSdkVersionInfoItem ( self,  sdk,  infoitem)\fR [protected]\fP"

.PP
Definition at line \fB519\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._GetStandaloneBinaryPath ( self)\fR [protected]\fP"

.PP
.nf
Returns the name of the non-bundle binary represented by this target\&.
E\&.g\&. hello_world\&. Only valid for non-bundles\&.
.fi
.PP
 
.PP
Definition at line \fB470\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._GetStandaloneExecutablePrefix ( self)\fR [protected]\fP"

.PP
Definition at line \fB457\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._GetStandaloneExecutableSuffix ( self)\fR [protected]\fP"

.PP
Definition at line \fB447\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._GetStripPostbuilds ( self,  configname,  output_binary,  quiet)\fR [protected]\fP"

.PP
.nf
Returns a list of shell commands that contain the shell commands
necessary to strip this target's binary\&. These should be run as postbuilds
before the actual postbuilds run\&.
.fi
.PP
 
.PP
Definition at line \fB1058\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._GetTargetPostbuilds ( self,  configname,  output,  output_binary,  quiet = \fRFalse\fP)\fR [protected]\fP"

.PP
.nf
Returns a list of shell commands that contain the shell commands
to run as postbuilds for this target, before the actual postbuilds\&.
.fi
.PP
 
.PP
Definition at line \fB1115\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._IsBundle ( self)\fR [protected]\fP"

.PP
Definition at line \fB234\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._IsIosAppExtension ( self)\fR [protected]\fP"

.PP
Definition at line \fB247\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._IsIosWatchApp ( self)\fR [protected]\fP"

.PP
Definition at line \fB253\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._IsIosWatchKitExtension ( self)\fR [protected]\fP"

.PP
Definition at line \fB250\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._IsXCTest ( self)\fR [protected]\fP"

.PP
Definition at line \fB241\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._IsXCUiTest ( self)\fR [protected]\fP"

.PP
Definition at line \fB244\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._MapLinkerFlagFilename ( self,  ldflag,  gyp_to_build_path)\fR [protected]\fP"

.PP
.nf
Checks if ldflag contains a filename and if so remaps it from
gyp-directory-relative to build-directory-relative\&.
.fi
.PP
 
.PP
Definition at line \fB867\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._SdkPath ( self,  configname = \fRNone\fP)\fR [protected]\fP"

.PP
Definition at line \fB543\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._SdkRoot ( self,  configname)\fR [protected]\fP"

.PP
Definition at line \fB529\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._Settings ( self)\fR [protected]\fP"

.PP
Definition at line \fB209\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._StandardizePath ( self,  path)\fR [protected]\fP"

.PP
.nf
Do :standardizepath processing for path\&.
.fi
.PP
 
.PP
Definition at line \fB806\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._Test ( self,  test_key,  cond_key,  default)\fR [protected]\fP"

.PP
Definition at line \fB213\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._WarnUnimplemented ( self,  test_key)\fR [protected]\fP"

.PP
Definition at line \fB222\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._XcodeIOSDeviceFamily ( self,  configname)\fR [protected]\fP"

.PP
Definition at line \fB1287\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._XcodePlatformPath ( self,  configname = \fRNone\fP)\fR [protected]\fP"

.PP
Definition at line \fB534\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&._XcodeSdkPath ( self,  sdk_root)\fR [protected]\fP"

.PP
Definition at line \fB549\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.AddImplicitPostbuilds ( self,  configname,  output,  output_binary,  postbuilds = \fR[]\fP,  quiet = \fRFalse\fP)"

.PP
.nf
Returns a list of shell commands that should run before and after
|postbuilds|\&.
.fi
.PP
 
.PP
Definition at line \fB1236\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.AdjustLibraries ( self,  libraries,  config_name = \fRNone\fP)"

.PP
.nf
Transforms entries like 'Cocoa\&.framework' in libraries into entries like
'-framework Cocoa', 'libcrypto\&.dylib' into '-lcrypto', etc\&.

.fi
.PP
 
.PP
Definition at line \fB1277\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetActiveArchs ( self,  configname)"

.PP
.nf
Returns the architectures this target should be built for\&.
.fi
.PP
 
.PP
Definition at line \fB509\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetBundleContentsFolderPath ( self)"

.PP
.nf
Returns the qualified path to the bundle's contents folder\&. E\&.g\&.
Chromium\&.app/Contents or Foo\&.bundle/Versions/A\&. Only valid for bundles\&.
.fi
.PP
 
.PP
Definition at line \fB303\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetBundleExecutableFolderPath ( self)"

.PP
.nf
Returns the qualified path to the bundle's executables folder\&. E\&.g\&.
Chromium\&.app/Contents/MacOS\&. Only valid for bundles\&.
.fi
.PP
 
.PP
Definition at line \fB325\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetBundleFrameworksFolderPath ( self)"

.PP
.nf
Returns the qualified path to the bundle's frameworks folder\&. E\&.g,
Chromium\&.app/Contents/Frameworks\&. Only valid for bundles\&.
.fi
.PP
 
.PP
Definition at line \fB340\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetBundleJavaFolderPath ( self)"

.PP
.nf
Returns the qualified path to the bundle's Java resource folder\&.
E\&.g\&. Chromium\&.app/Contents/Resources/Java\&. Only valid for bundles\&.
.fi
.PP
 
.PP
Definition at line \fB334\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetBundlePlistPath ( self)"

.PP
.nf
Returns the qualified path to the bundle's plist file\&. E\&.g\&.
Chromium\&.app/Contents/Info\&.plist\&. Only valid for bundles\&.
.fi
.PP
 
.PP
Definition at line \fB373\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetBundlePlugInsFolderPath ( self)"

.PP
.nf
Returns the qualified path to the bundle's plugins folder\&. E\&.g,
Chromium\&.app/Contents/PlugIns\&. Only valid for bundles\&.
.fi
.PP
 
.PP
Definition at line \fB361\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetBundleResourceFolder ( self)"

.PP
.nf
Returns the qualified path to the bundle's resource folder\&. E\&.g\&.
Chromium\&.app/Contents/Resources\&. Only valid for bundles\&.
.fi
.PP
 
.PP
Definition at line \fB317\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetBundleSharedFrameworksFolderPath ( self)"

.PP
.nf
Returns the qualified path to the bundle's frameworks folder\&. E\&.g,
Chromium\&.app/Contents/SharedFrameworks\&. Only valid for bundles\&.
.fi
.PP
 
.PP
Definition at line \fB346\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetBundleSharedSupportFolderPath ( self)"

.PP
.nf
Returns the qualified path to the bundle's shared support folder\&. E\&.g,
Chromium\&.app/Contents/SharedSupport\&. Only valid for bundles\&.
.fi
.PP
 
.PP
Definition at line \fB352\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetBundleXPCServicesFolderPath ( self)"

.PP
.nf
Returns the qualified path to the bundle's XPC services folder\&. E\&.g,
Chromium\&.app/Contents/XPCServices\&. Only valid for bundles\&.
.fi
.PP
 
.PP
Definition at line \fB367\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetCflags ( self,  configname,  arch = \fRNone\fP)"

.PP
.nf
Returns flags that need to be added to \&.c, \&.cc, \&.m, and \&.mm
compilations\&.
.fi
.PP
 
.PP
Definition at line \fB571\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetCflagsC ( self,  configname)"

.PP
.nf
Returns flags that need to be added to \&.c, and \&.m compilations\&.
.fi
.PP
 
.PP
Definition at line \fB700\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetCflagsCC ( self,  configname)"

.PP
.nf
Returns flags that need to be added to \&.cc, and \&.mm compilations\&.
.fi
.PP
 
.PP
Definition at line \fB712\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetCflagsObjC ( self,  configname)"

.PP
.nf
Returns flags that need to be added to \&.m compilations\&.
.fi
.PP
 
.PP
Definition at line \fB771\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetCflagsObjCC ( self,  configname)"

.PP
.nf
Returns flags that need to be added to \&.mm compilations\&.
.fi
.PP
 
.PP
Definition at line \fB781\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetExecutableName ( self)"

.PP
.nf
Returns the executable name of the bundle represented by this target\&.
E\&.g\&. Chromium\&.
.fi
.PP
 
.PP
Definition at line \fB493\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetExecutablePath ( self)"

.PP
.nf
Returns the qualified path to the primary executable of the bundle
represented by this target\&. E\&.g\&. Chromium\&.app/Contents/MacOS/Chromium\&.
.fi
.PP
 
.PP
Definition at line \fB501\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetExtraPlistItems ( self,  configname = \fRNone\fP)"

.PP
.nf
Returns a dictionary with extra items to insert into Info\&.plist\&.
.fi
.PP
 
.PP
Definition at line \fB1291\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetFrameworkVersion ( self)"

.PP
.nf
Returns the framework version of the current target\&. Only valid for
bundles\&.
.fi
.PP
 
.PP
Definition at line \fB256\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetFullProductName ( self)"

.PP
.nf
Returns FULL_PRODUCT_NAME\&.
.fi
.PP
 
.PP
Definition at line \fB290\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetInstallName ( self)"

.PP
.nf
Return LD_DYLIB_INSTALL_NAME for this target\&.
.fi
.PP
 
.PP
Definition at line \fB818\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetInstallNameBase ( self)"

.PP
.nf
Return DYLIB_INSTALL_NAME_BASE for this target\&.
.fi
.PP
 
.PP
Definition at line \fB793\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetLdflags ( self,  configname,  product_dir,  gyp_to_build_path,  arch = \fRNone\fP)"

.PP
.nf
Returns flags that need to be passed to the linker\&.

Args:
configname: The name of the configuration to get ld flags for\&.
product_dir: The directory where products such static and dynamic
    libraries are placed\&. This is added to the library search path\&.
gyp_to_build_path: A function that converts paths relative to the
    current gyp file to paths relative to the build directory\&.

.fi
.PP
 
.PP
Definition at line \fB898\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetLibtoolflags ( self,  configname)"

.PP
.nf
Returns flags that need to be passed to the static linker\&.

Args:
configname: The name of the configuration to get ld flags for\&.

.fi
.PP
 
.PP
Definition at line \fB1001\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetMachOType ( self)"

.PP
.nf
Returns the MACH_O_TYPE of this target\&.
.fi
.PP
 
.PP
Definition at line \fB427\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetPerConfigSetting ( self,  setting,  configname,  default = \fRNone\fP)"

.PP
Definition at line \fB1034\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetPerTargetSetting ( self,  setting,  default = \fRNone\fP)"

.PP
.nf
Tries to get xcode_settings\&.setting from spec\&. Assumes that the setting
has the same value in all configurations and throws otherwise\&.
.fi
.PP
 
.PP
Definition at line \fB1040\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetPerTargetSettings ( self)"

.PP
.nf
Gets a list of all the per-target settings\&. This will only fetch keys
whose values are the same across all configurations\&.
.fi
.PP
 
.PP
Definition at line \fB1017\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetProductName ( self)"

.PP
.nf
Returns PRODUCT_NAME\&.
.fi
.PP
 
.PP
Definition at line \fB286\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetProductType ( self)"

.PP
.nf
Returns the PRODUCT_TYPE of this target\&.
.fi
.PP
 
.PP
Definition at line \fB387\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetWrapperExtension ( self)"

.PP
.nf
Returns the bundle extension (\&.app, \&.framework, \&.plugin, etc)\&.  Only
valid for bundles\&.
.fi
.PP
 
.PP
Definition at line \fB262\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.GetWrapperName ( self)"

.PP
.nf
Returns the directory name of the bundle represented by this target\&.
Only valid for bundles\&.
.fi
.PP
 
.PP
Definition at line \fB297\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.IsBinaryOutputFormat ( self,  configname)"

.PP
Definition at line \fB226\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.IsIosFramework ( self)"

.PP
Definition at line \fB231\fP of file \fBxcode_emulation\&.py\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "dict gyp\&.xcode_emulation\&.XcodeSettings\&._codesigning_key_cache = {}\fR [static]\fP, \fR [protected]\fP"

.PP
Definition at line \fB163\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "dict gyp\&.xcode_emulation\&.XcodeSettings\&._platform_path_cache = {}\fR [static]\fP, \fR [protected]\fP"

.PP
Definition at line \fB154\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "dict gyp\&.xcode_emulation\&.XcodeSettings\&._plist_cache = {}\fR [static]\fP, \fR [protected]\fP"

.PP
Definition at line \fB159\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "dict gyp\&.xcode_emulation\&.XcodeSettings\&._sdk_path_cache = {}\fR [static]\fP, \fR [protected]\fP"

.PP
Definition at line \fB153\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "dict gyp\&.xcode_emulation\&.XcodeSettings\&._sdk_root_cache = {}\fR [static]\fP, \fR [protected]\fP"

.PP
Definition at line \fB155\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.configname"

.PP
Definition at line \fB185\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.header_map_path"

.PP
Definition at line \fB170\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.isIOS"

.PP
Definition at line \fB168\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.library_re"

.PP
Definition at line \fB188\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.mac_toolchain_dir"

.PP
Definition at line \fB169\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.spec"

.PP
Definition at line \fB166\fP of file \fBxcode_emulation\&.py\fP\&.
.SS "gyp\&.xcode_emulation\&.XcodeSettings\&.xcode_settings"

.PP
Definition at line \fB176\fP of file \fBxcode_emulation\&.py\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
