.TH "Napi" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Napi
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBdetails\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBAccessorCallbackData\fP"
.br
.ti -1c
.RI "class \fBArray\fP"
.br
.ti -1c
.RI "class \fBArrayBuffer\fP"
.br
.RI "A JavaScript array buffer value\&. "
.ti -1c
.RI "class \fBAsyncContext\fP"
.br
.ti -1c
.RI "class \fBAsyncWorker\fP"
.br
.ti -1c
.RI "class \fBBoolean\fP"
.br
.RI "A JavaScript boolean value\&. "
.ti -1c
.RI "class \fBBuffer\fP"
.br
.ti -1c
.RI "class \fBCallbackInfo\fP"
.br
.ti -1c
.RI "class \fBClassPropertyDescriptor\fP"
.br
.ti -1c
.RI "class \fBDataView\fP"
.br
.ti -1c
.RI "class \fBEnv\fP"
.br
.ti -1c
.RI "class \fBError\fP"
.br
.ti -1c
.RI "class \fBEscapableHandleScope\fP"
.br
.ti -1c
.RI "class \fBExternal\fP"
.br
.ti -1c
.RI "class \fBFunction\fP"
.br
.ti -1c
.RI "class \fBFunctionReference\fP"
.br
.ti -1c
.RI "class \fBHandleScope\fP"
.br
.ti -1c
.RI "class \fBInstanceWrap\fP"
.br
.ti -1c
.RI "class \fBMaybe\fP"
.br
.ti -1c
.RI "class \fBMemoryManagement\fP"
.br
.ti -1c
.RI "struct \fBMethodCallbackData\fP"
.br
.ti -1c
.RI "class \fBName\fP"
.br
.RI "A JavaScript string or symbol value (that can be used as a property name)\&. "
.ti -1c
.RI "class \fBNumber\fP"
.br
.RI "A JavaScript number value\&. "
.ti -1c
.RI "class \fBObject\fP"
.br
.RI "A JavaScript object value\&. "
.ti -1c
.RI "class \fBObjectReference\fP"
.br
.ti -1c
.RI "class \fBObjectWrap\fP"
.br
.ti -1c
.RI "class \fBPromise\fP"
.br
.ti -1c
.RI "class \fBPropertyDescriptor\fP"
.br
.ti -1c
.RI "class \fBRangeError\fP"
.br
.ti -1c
.RI "class \fBReference\fP"
.br
.ti -1c
.RI "class \fBString\fP"
.br
.RI "A JavaScript string value\&. "
.ti -1c
.RI "class \fBSymbol\fP"
.br
.RI "A JavaScript symbol value\&. "
.ti -1c
.RI "class \fBTypedArray\fP"
.br
.ti -1c
.RI "class \fBTypedArrayOf\fP"
.br
.ti -1c
.RI "class \fBTypeError\fP"
.br
.ti -1c
.RI "class \fBTypeTaggable\fP"
.br
.ti -1c
.RI "class \fBValue\fP"
.br
.ti -1c
.RI "class \fBVersionManagement\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "using \fBInt8Array\fP"
.br
.RI "Typed-array of signed 8-bit integers\&. "
.ti -1c
.RI "using \fBUint8Array\fP"
.br
.RI "Typed-array of unsigned 8-bit integers\&. "
.ti -1c
.RI "using \fBInt16Array\fP"
.br
.RI "Typed-array of signed 16-bit integers\&. "
.ti -1c
.RI "using \fBUint16Array\fP"
.br
.RI "Typed-array of unsigned 16-bit integers\&. "
.ti -1c
.RI "using \fBInt32Array\fP"
.br
.RI "Typed-array of signed 32-bit integers\&. "
.ti -1c
.RI "using \fBUint32Array\fP"
.br
.RI "Typed-array of unsigned 32-bit integers\&. "
.ti -1c
.RI "using \fBFloat32Array\fP"
.br
.RI "Typed-array of 32-bit floating-point values\&. "
.ti -1c
.RI "using \fBFloat64Array\fP"
.br
.RI "Typed-array of 64-bit floating-point values\&. "
.ti -1c
.RI "using \fBModuleRegisterCallback\fP = \fBObject\fP (*)(\fBEnv\fP env, \fBObject\fP exports)"
.br
.ti -1c
.RI "template<typename T > using \fBMaybeOrValue\fP = T"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "napi_value \fBRegisterModule\fP (napi_env env, napi_value exports, \fBModuleRegisterCallback\fP registerCallback)"
.br
.ti -1c
.RI "template<class T > \fBMaybe\fP< T > \fBNothing\fP ()"
.br
.ti -1c
.RI "template<class T > \fBMaybe\fP< T > \fBJust\fP (const T &t)"
.br
.ti -1c
.RI "template<typename CbData > napi_status \fBCreateFunction\fP (napi_env env, const char *utf8name, napi_callback cb, CbData *data, napi_value *result)"
.br
.ti -1c
.RI "template<typename T > \fBReference\fP< T > \fBWeak\fP (T value)"
.br
.ti -1c
.RI "\fBObjectReference\fP \fBWeak\fP (\fBObject\fP value)"
.br
.ti -1c
.RI "\fBFunctionReference\fP \fBWeak\fP (\fBFunction\fP value)"
.br
.ti -1c
.RI "template<typename T > \fBReference\fP< T > \fBPersistent\fP (T value)"
.br
.ti -1c
.RI "\fBObjectReference\fP \fBPersistent\fP (\fBObject\fP value)"
.br
.ti -1c
.RI "\fBFunctionReference\fP \fBPersistent\fP (\fBFunction\fP value)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Node-API C++ Wrapper Classes
.PP
These classes wrap the 'Node-API' ABI-stable C APIs for Node\&.js, providing a C++ object model and C++ exception-handling semantics with low overhead\&. The wrappers are all header-only so that they do not affect the ABI\&. 
.SH "Typedef Documentation"
.PP 
.SS "using \fBNapi::Float32Array\fP"
\fBInitial value:\fP
.nf

    TypedArrayOf<float>
.PP
.fi

.PP
Typed-array of 32-bit floating-point values\&. 
.PP
Definition at line \fB204\fP of file \fBnapi\&.h\fP\&.
.SS "using \fBNapi::Float64Array\fP"
\fBInitial value:\fP
.nf

    TypedArrayOf<double>
.PP
.fi

.PP
Typed-array of 64-bit floating-point values\&. 
.PP
Definition at line \fB206\fP of file \fBnapi\&.h\fP\&.
.SS "using \fBNapi::Int16Array\fP"
\fBInitial value:\fP
.nf

    TypedArrayOf<int16_t>
.PP
.fi

.PP
Typed-array of signed 16-bit integers\&. 
.PP
Definition at line \fB196\fP of file \fBnapi\&.h\fP\&.
.SS "using \fBNapi::Int32Array\fP"
\fBInitial value:\fP
.nf

    TypedArrayOf<int32_t>
.PP
.fi

.PP
Typed-array of signed 32-bit integers\&. 
.PP
Definition at line \fB200\fP of file \fBnapi\&.h\fP\&.
.SS "using \fBNapi::Int8Array\fP"
\fBInitial value:\fP
.nf

    TypedArrayOf<int8_t>
.PP
.fi

.PP
Typed-array of signed 8-bit integers\&. 
.PP
Definition at line \fB192\fP of file \fBnapi\&.h\fP\&.
.SS "template<typename T > using \fBNapi::MaybeOrValue\fP = T"

.PP
Definition at line \fB279\fP of file \fBnapi\&.h\fP\&.
.SS "using \fBNapi::ModuleRegisterCallback\fP = \fBObject\fP (*)(\fBEnv\fP env, \fBObject\fP exports)"
Defines the signature of a Node-API C++ module's registration callback (init) function\&. 
.PP
Definition at line \fB217\fP of file \fBnapi\&.h\fP\&.
.SS "using \fBNapi::Uint16Array\fP"
\fBInitial value:\fP
.nf

    TypedArrayOf<uint16_t>
.PP
.fi

.PP
Typed-array of unsigned 16-bit integers\&. 
.PP
Definition at line \fB198\fP of file \fBnapi\&.h\fP\&.
.SS "using \fBNapi::Uint32Array\fP"
\fBInitial value:\fP
.nf

    TypedArrayOf<uint32_t>
.PP
.fi

.PP
Typed-array of unsigned 32-bit integers\&. 
.PP
Definition at line \fB202\fP of file \fBnapi\&.h\fP\&.
.SS "using \fBNapi::Uint8Array\fP"
\fBInitial value:\fP
.nf

    TypedArrayOf<uint8_t>
.PP
.fi

.PP
Typed-array of unsigned 8-bit integers\&. 
.PP
Definition at line \fB194\fP of file \fBnapi\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "template<typename CbData > napi_status Napi::CreateFunction (napi_env env, const char * utf8name, napi_callback cb, CbData * data, napi_value * result)\fR [inline]\fP"

.PP
Definition at line \fB2371\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "template<class T > \fBMaybe\fP< T > Napi::Just (const T & t)\fR [inline]\fP"

.PP
Definition at line \fB444\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "template<class T > \fBMaybe\fP< T > Napi::Nothing ()\fR [inline]\fP"

.PP
Definition at line \fB439\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "\fBFunctionReference\fP Napi::Persistent (\fBFunction\fP value)\fR [inline]\fP"

.PP
Definition at line \fB3341\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "\fBObjectReference\fP Napi::Persistent (\fBObject\fP value)\fR [inline]\fP"

.PP
Definition at line \fB3337\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "template<typename T > \fBReference\fP< T > Napi::Persistent (T value)\fR [inline]\fP"

.PP
Definition at line \fB3333\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "napi_value Napi::RegisterModule (napi_env env, napi_value exports, \fBModuleRegisterCallback\fP registerCallback)\fR [inline]\fP"

.PP
Definition at line \fB373\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "\fBFunctionReference\fP Napi::Weak (\fBFunction\fP value)\fR [inline]\fP"

.PP
Definition at line \fB3328\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "\fBObjectReference\fP Napi::Weak (\fBObject\fP value)\fR [inline]\fP"

.PP
Definition at line \fB3324\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "template<typename T > \fBReference\fP< T > Napi::Weak (T value)\fR [inline]\fP"

.PP
Definition at line \fB3320\fP of file \fBnapi\-inl\&.h\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
