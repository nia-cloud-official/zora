.TH "md_backend_2node__modules_2fs-minipass_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2fs-minipass_2_r_e_a_d_m_e \- fs-minipass 
.PP
 Filesystem streams based on \fRminipass\fP\&.
.PP
4 classes are exported:
.PP
.IP "\(bu" 2
ReadStream
.IP "\(bu" 2
ReadStreamSync
.IP "\(bu" 2
WriteStream
.IP "\(bu" 2
WriteStreamSync
.PP
.PP
When using \fRReadStreamSync\fP, all of the data is made available immediately upon consuming the stream\&. Nothing is buffered in memory when the stream is constructed\&. If the stream is piped to a writer, then it will synchronously \fRread()\fP and emit data into the writer as fast as the writer can consume it\&. (That is, it will respect backpressure\&.) If you call \fRstream\&.read()\fP then it will read the entire file and return the contents\&.
.PP
When using \fRWriteStreamSync\fP, every write is flushed to the file synchronously\&. If your writes all come in a single tick, then it'll write it all out in a single tick\&. It's as synchronous as you are\&.
.PP
The async versions work much like their node builtin counterparts, with the exception of introducing significantly less Stream machinery overhead\&.
.SH "USAGE"
.PP
It's just streams, you pipe them or read() them or write() to them\&.
.PP
.PP
.nf
const fsm = require('fs\-minipass')
const readStream = new fsm\&.ReadStream('file\&.txt')
const writeStream = new fsm\&.WriteStream('output\&.txt')
writeStream\&.write('some file header or whatever\\n')
readStream\&.pipe(writeStream)
.fi
.PP
.SH "ReadStream(path, options)"
.PP
Path string is required, but somewhat irrelevant if an open file descriptor is passed in as an option\&.
.PP
Options:
.PP
.IP "\(bu" 2
\fRfd\fP Pass in a numeric file descriptor, if the file is already open\&.
.IP "\(bu" 2
\fRreadSize\fP The size of reads to do, defaults to 16MB
.IP "\(bu" 2
\fRsize\fP The size of the file, if known\&. Prevents zero-byte read() call at the end\&.
.IP "\(bu" 2
\fRautoClose\fP Set to \fRfalse\fP to prevent the file descriptor from being closed when the file is done being read\&.
.PP
.SH "WriteStream(path, options)"
.PP
Path string is required, but somewhat irrelevant if an open file descriptor is passed in as an option\&.
.PP
Options:
.PP
.IP "\(bu" 2
\fRfd\fP Pass in a numeric file descriptor, if the file is already open\&.
.IP "\(bu" 2
\fRmode\fP The mode to create the file with\&. Defaults to \fR0o666\fP\&.
.IP "\(bu" 2
\fRstart\fP The position in the file to start reading\&. If not specified, then the file will start writing at position zero, and be truncated by default\&.
.IP "\(bu" 2
\fRautoClose\fP Set to \fRfalse\fP to prevent the file descriptor from being closed when the stream is ended\&.
.IP "\(bu" 2
\fRflags\fP Flags to use when opening the file\&. Irrelevant if \fRfd\fP is passed in, since file won't be opened in that case\&. Defaults to `'a'\fRif a\fPpos\fRis specified, or\fP'w'` otherwise\&. 
.PP

