.TH "gyp.simple_copy" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gyp.simple_copy
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBError\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBdeepcopy\fP (x)"
.br
.ti -1c
.RI "\fB_deepcopy_atomic\fP (x)"
.br
.ti -1c
.RI "\fB_deepcopy_list\fP (x)"
.br
.ti -1c
.RI "\fB_deepcopy_dict\fP (x)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "dict \fB_deepcopy_dispatch\fP = {}"
.br
.ti -1c
.RI "\fBtypes\fP = bool, float, int, str, type, type(None)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
A clone of the default copy\&.deepcopy that doesn't handle cyclic
structures or complex types except for dicts and lists\&. This is
because gyp copies so large structure that small copy overhead ends up
taking seconds in a project the size of Chromium\&.
.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "gyp\&.simple_copy\&._deepcopy_atomic ( x)\fR [protected]\fP"

.PP
Definition at line \fB35\fP of file \fBsimple_copy\&.py\fP\&.
.SS "gyp\&.simple_copy\&._deepcopy_dict ( x)\fR [protected]\fP"

.PP
Definition at line \fB52\fP of file \fBsimple_copy\&.py\fP\&.
.SS "gyp\&.simple_copy\&._deepcopy_list ( x)\fR [protected]\fP"

.PP
Definition at line \fB45\fP of file \fBsimple_copy\&.py\fP\&.
.SS "gyp\&.simple_copy\&.deepcopy ( x)"

.PP
.nf
Deep copy operation on gyp objects such as strings, ints, dicts
and lists\&. More than twice as fast as copy\&.deepcopy but much less
generic\&.
.fi
.PP
 
.PP
Definition at line \fB18\fP of file \fBsimple_copy\&.py\fP\&.
.SH "Variable Documentation"
.PP 
.SS "dict gyp\&.simple_copy\&._deepcopy_dispatch = {}\fR [protected]\fP"

.PP
Definition at line \fB32\fP of file \fBsimple_copy\&.py\fP\&.
.SS "gyp\&.simple_copy\&.types = bool, float, int, str, type, type(None)"

.PP
Definition at line \fB39\fP of file \fBsimple_copy\&.py\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
