.TH "Napi::Value" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Napi::Value
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <napi\&.h>\fP
.PP
Inherited by \fBNapi::Boolean\fP, \fBNapi::Name\fP, \fBNapi::Number\fP, and \fBNapi::TypeTaggable\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBValue\fP ()"
.br
.RI "Creates a new \fIempty\fP \fBValue\fP instance\&. "
.ti -1c
.RI "\fBValue\fP (napi_env env, napi_value value)"
.br
.RI "Wraps a Node-API value primitive\&. "
.ti -1c
.RI "\fBoperator napi_value\fP () const"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBValue\fP &other) const"
.br
.RI "Tests if this value strictly equals another value\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBValue\fP &other) const"
.br
.RI "Tests if this value does not strictly equal another value\&. "
.ti -1c
.RI "bool \fBStrictEquals\fP (const \fBValue\fP &other) const"
.br
.RI "Tests if this value strictly equals another value\&. "
.ti -1c
.RI "\fBNapi::Env\fP \fBEnv\fP () const"
.br
.RI "Gets the environment the value is associated with\&. "
.ti -1c
.RI "bool \fBIsEmpty\fP () const"
.br
.ti -1c
.RI "napi_valuetype \fBType\fP () const"
.br
.RI "Gets the type of the value\&. "
.ti -1c
.RI "bool \fBIsUndefined\fP () const"
.br
.RI "Tests if a value is an undefined JavaScript value\&. "
.ti -1c
.RI "bool \fBIsNull\fP () const"
.br
.RI "Tests if a value is a null JavaScript value\&. "
.ti -1c
.RI "bool \fBIsBoolean\fP () const"
.br
.RI "Tests if a value is a JavaScript boolean\&. "
.ti -1c
.RI "bool \fBIsNumber\fP () const"
.br
.RI "Tests if a value is a JavaScript number\&. "
.ti -1c
.RI "bool \fBIsString\fP () const"
.br
.RI "Tests if a value is a JavaScript string\&. "
.ti -1c
.RI "bool \fBIsSymbol\fP () const"
.br
.RI "Tests if a value is a JavaScript symbol\&. "
.ti -1c
.RI "bool \fBIsArray\fP () const"
.br
.RI "Tests if a value is a JavaScript array\&. "
.ti -1c
.RI "bool \fBIsArrayBuffer\fP () const"
.br
.RI "Tests if a value is a JavaScript array buffer\&. "
.ti -1c
.RI "bool \fBIsTypedArray\fP () const"
.br
.RI "Tests if a value is a JavaScript typed array\&. "
.ti -1c
.RI "bool \fBIsObject\fP () const"
.br
.RI "Tests if a value is a JavaScript object\&. "
.ti -1c
.RI "bool \fBIsFunction\fP () const"
.br
.RI "Tests if a value is a JavaScript function\&. "
.ti -1c
.RI "bool \fBIsPromise\fP () const"
.br
.RI "Tests if a value is a JavaScript promise\&. "
.ti -1c
.RI "bool \fBIsDataView\fP () const"
.br
.RI "Tests if a value is a JavaScript data view\&. "
.ti -1c
.RI "bool \fBIsBuffer\fP () const"
.br
.RI "Tests if a value is a Node buffer\&. "
.ti -1c
.RI "bool \fBIsExternal\fP () const"
.br
.RI "Tests if a value is a pointer to external data\&. "
.ti -1c
.RI "template<typename T > T \fBAs\fP () const"
.br
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBBoolean\fP > \fBToBoolean\fP () const"
.br
.RI "Coerces a value to a JavaScript boolean\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBNumber\fP > \fBToNumber\fP () const"
.br
.RI "Coerces a value to a JavaScript number\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBString\fP > \fBToString\fP () const"
.br
.RI "Coerces a value to a JavaScript string\&. "
.ti -1c
.RI "\fBMaybeOrValue\fP< \fBObject\fP > \fBToObject\fP () const"
.br
.RI "Coerces a value to a JavaScript object\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename T > static \fBValue\fP \fBFrom\fP (napi_env env, const T &value)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "napi_env \fB_env\fP"
.br
.RI "!cond INTERNAL "
.ti -1c
.RI "napi_value \fB_value\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A JavaScript value of unknown type\&.
.PP
For type-specific operations, convert to one of the \fBValue\fP subclasses using a \fRTo*\fP or \fR\fBAs()\fP\fP method\&. The \fRTo*\fP methods do type coercion; the \fR\fBAs()\fP\fP method does not\&. 
.PP
.nf
Napi::Value value = \&.\&.\&.
if (!value\&.IsString()) throw Napi::TypeError::New(env, 'Invalid
arg\&.\&.\&.'); Napi::String str = value\&.As<Napi::String>(); // Cast to a
string value

Napi::Value anotherValue = \&.\&.\&.
bool isTruthy = anotherValue\&.ToBoolean(); // Coerce to a boolean value 

.fi
.PP
 
.PP
Definition at line \fB389\fP of file \fBnapi\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Napi::Value::Value ()\fR [inline]\fP"

.PP
Creates a new \fIempty\fP \fBValue\fP instance\&. 
.PP
Definition at line \fB591\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "Napi::Value::Value (napi_env env, napi_value value)\fR [inline]\fP"

.PP
Wraps a Node-API value primitive\&. 
.PP
Definition at line \fB593\fP of file \fBnapi\-inl\&.h\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename T > T Napi::Value::As () const\fR [inline]\fP"
Casts to another type of \fR\fBNapi::Value\fP\fP, when the actual type is known or assumed\&.
.PP
This conversion does NOT coerce the type\&. Calling any methods inappropriate for the actual value type will throw \fR\fBNapi::Error\fP\fP\&.
.PP
If \fRNODE_ADDON_API_ENABLE_TYPE_CHECK_ON_AS\fP is defined, this method asserts that the actual type is the expected type\&. 
.PP
Definition at line \fB756\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "\fBNapi::Env\fP Napi::Value::Env () const\fR [inline]\fP"

.PP
Gets the environment the value is associated with\&. 
.PP
Definition at line \fB615\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "template<typename T > \fBValue\fP Napi::Value::From (napi_env env, const T & value)\fR [static]\fP"
Creates a JS value from a C++ primitive\&.
.PP
\fRvalue\fP may be any of:
.IP "\(bu" 2
bool
.IP "\(bu" 2
Any integer type
.IP "\(bu" 2
Any floating point type
.IP "\(bu" 2
const char* (encoded using UTF-8, null-terminated)
.IP "\(bu" 2
const char16_t* (encoded using UTF-16-LE, null-terminated)
.IP "\(bu" 2
std::string (encoded using UTF-8)
.IP "\(bu" 2
std::u16string
.IP "\(bu" 2
napi::Value
.IP "\(bu" 2
napi_value 
.PP

.PP
Definition at line \fB1306\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsArray () const\fR [inline]\fP"

.PP
Tests if a value is a JavaScript array\&. 
.PP
Definition at line \fB677\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsArrayBuffer () const\fR [inline]\fP"

.PP
Tests if a value is a JavaScript array buffer\&. 
.PP
Definition at line \fB688\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsBoolean () const\fR [inline]\fP"

.PP
Tests if a value is a JavaScript boolean\&. 
.PP
Definition at line \fB642\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsBuffer () const\fR [inline]\fP"

.PP
Tests if a value is a Node buffer\&. 
.PP
Definition at line \fB740\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsDataView () const\fR [inline]\fP"

.PP
Tests if a value is a JavaScript data view\&. 
.PP
Definition at line \fB729\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsEmpty () const\fR [inline]\fP"
Checks if the value is empty (uninitialized)\&.
.PP
An empty value is invalid, and most attempts to perform an operation on an empty value will result in an exception\&. Note an empty value is distinct from JavaScript \fRnull\fP or \fRundefined\fP, which are valid values\&.
.PP
When C++ exceptions are disabled at compile time, a method with a \fR\fBValue\fP\fP return type may return an empty value to indicate a pending exception\&. So when not using C++ exceptions, callers should check whether the value is empty before attempting to use it\&. 
.PP
Definition at line \fB619\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsExternal () const\fR [inline]\fP"

.PP
Tests if a value is a pointer to external data\&. 
.PP
Definition at line \fB751\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsFunction () const\fR [inline]\fP"

.PP
Tests if a value is a JavaScript function\&. 
.PP
Definition at line \fB714\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsNull () const\fR [inline]\fP"

.PP
Tests if a value is a null JavaScript value\&. 
.PP
Definition at line \fB638\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsNumber () const\fR [inline]\fP"

.PP
Tests if a value is a JavaScript number\&. 
.PP
Definition at line \fB646\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsObject () const\fR [inline]\fP"

.PP
Tests if a value is a JavaScript object\&. 
.PP
Definition at line \fB710\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsPromise () const\fR [inline]\fP"

.PP
Tests if a value is a JavaScript promise\&. 
.PP
Definition at line \fB718\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsString () const\fR [inline]\fP"

.PP
Tests if a value is a JavaScript string\&. 
.PP
Definition at line \fB669\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsSymbol () const\fR [inline]\fP"

.PP
Tests if a value is a JavaScript symbol\&. 
.PP
Definition at line \fB673\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsTypedArray () const\fR [inline]\fP"

.PP
Tests if a value is a JavaScript typed array\&. 
.PP
Definition at line \fB699\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::IsUndefined () const\fR [inline]\fP"

.PP
Tests if a value is an undefined JavaScript value\&. 
.PP
Definition at line \fB634\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "Napi::Value::operator napi_value () const\fR [inline]\fP"
Converts to a Node-API value primitive\&.
.PP
If the instance is \fIempty\fP, this returns \fRnullptr\fP\&. 
.PP
Definition at line \fB596\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::operator!= (const \fBValue\fP & other) const\fR [inline]\fP"

.PP
Tests if this value does not strictly equal another value\&. 
.PP
Definition at line \fB604\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::operator== (const \fBValue\fP & other) const\fR [inline]\fP"

.PP
Tests if this value strictly equals another value\&. 
.PP
Definition at line \fB600\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "bool Napi::Value::StrictEquals (const \fBValue\fP & other) const\fR [inline]\fP"

.PP
Tests if this value strictly equals another value\&. 
.PP
Definition at line \fB608\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "\fBMaybeOrValue\fP< \fBBoolean\fP > Napi::Value::ToBoolean () const\fR [inline]\fP"

.PP
Coerces a value to a JavaScript boolean\&. 
.PP
Definition at line \fB763\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "\fBMaybeOrValue\fP< \fBNumber\fP > Napi::Value::ToNumber () const\fR [inline]\fP"

.PP
Coerces a value to a JavaScript number\&. 
.PP
Definition at line \fB770\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "\fBMaybeOrValue\fP< \fBObject\fP > Napi::Value::ToObject () const\fR [inline]\fP"

.PP
Coerces a value to a JavaScript object\&. 
.PP
Definition at line \fB784\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "\fBMaybeOrValue\fP< \fBString\fP > Napi::Value::ToString () const\fR [inline]\fP"

.PP
Coerces a value to a JavaScript string\&. 
.PP
Definition at line \fB777\fP of file \fBnapi\-inl\&.h\fP\&.
.SS "napi_valuetype Napi::Value::Type () const\fR [inline]\fP"

.PP
Gets the type of the value\&. 
.PP
Definition at line \fB623\fP of file \fBnapi\-inl\&.h\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "napi_env Napi::Value::_env\fR [protected]\fP"

.PP
!cond INTERNAL 
.PP
Definition at line \fB487\fP of file \fBnapi\&.h\fP\&.
.SS "napi_value Napi::Value::_value\fR [protected]\fP"

.PP
Definition at line \fB488\fP of file \fBnapi\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
