.TH "md_backend_2node__modules_2mime-db_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2mime-db_2_r_e_a_d_m_e \- mime-db 
.PP
 \fR\fP \fR\fP \fR\fP \fR\fP \fR\fP
.PP
This is a large database of mime types and information about them\&. It consists of a single, public JSON file and does not include any logic, allowing it to remain as un-opinionated as possible with an API\&. It aggregates data from the following sources:
.PP
.IP "\(bu" 2
http://www.iana.org/assignments/media-types/media-types.xhtml
.IP "\(bu" 2
http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types
.IP "\(bu" 2
http://hg.nginx.org/nginx/raw-file/default/conf/mime.types
.PP
.SH "Installation"
.PP
.PP
.nf
npm install mime\-db
.fi
.PP
.SS "Database Download"
If you're crazy enough to use this in the browser, you can just grab the JSON file using \fRjsDelivr\fP\&. It is recommended to replace \fRmaster\fP with \fRa release tag\fP as the JSON format may change in the future\&.
.PP
.PP
.nf
https://cdn\&.jsdelivr\&.net/gh/jshttp/mime\-db@master/db\&.json
.fi
.PP
.SH "Usage"
.PP
.PP
.nf
var db = require('mime\-db')

// grab data on \&.js files
var data = db['application/javascript']
.fi
.PP
.SH "Data Structure"
.PP
The JSON file is a map lookup for lowercased mime types\&. Each mime type has the following properties:
.PP
.IP "\(bu" 2
\fR\&.source\fP - where the mime type is defined\&. If not set, it's probably a custom media type\&.
.IP "  \(bu" 4
\fRapache\fP - \fRApache common media types\fP
.IP "  \(bu" 4
\fRiana\fP - \fRIANA-defined media types\fP
.IP "  \(bu" 4
\fRnginx\fP - \fRnginx media types\fP
.PP

.IP "\(bu" 2
\fR\&.extensions[]\fP - known extensions associated with this mime type\&.
.IP "\(bu" 2
\fR\&.compressible\fP - whether a file of this type can be gzipped\&.
.IP "\(bu" 2
\fR\&.charset\fP - the default charset associated with this type, if any\&.
.PP
.PP
If unknown, every property could be \fRundefined\fP\&.
.SH "Contributing"
.PP
To edit the database, only make PRs against \fRsrc/custom-types\&.json\fP or \fRsrc/custom-suffix\&.json\fP\&.
.PP
The \fRsrc/custom-types\&.json\fP file is a JSON object with the MIME type as the keys and the values being an object with the following keys:
.PP
.IP "\(bu" 2
\fRcompressible\fP - leave out if you don't know, otherwise \fRtrue\fP/\fRfalse\fP to indicate whether the data represented by the type is typically compressible\&.
.IP "\(bu" 2
\fRextensions\fP - include an array of file extensions that are associated with the type\&.
.IP "\(bu" 2
\fRnotes\fP - human-readable notes about the type, typically what the type is\&.
.IP "\(bu" 2
\fRsources\fP - include an array of URLs of where the MIME type and the associated extensions are sourced from\&. This needs to be a \fRprimary source\fP; links to type aggregating sites and Wikipedia are \fInot acceptable\fP\&.
.PP
.PP
To update the build, run \fRnpm run build\fP\&.
.SS "Adding Custom Media Types"
The best way to get new media types included in this library is to register them with the IANA\&. The community registration procedure is outlined in \fRRFC 6838 section 5\fP\&. Types registered with the IANA are automatically pulled into this library\&.
.PP
If that is not possible / feasible, they can be added directly here as a 'custom' type\&. To do this, it is required to have a primary source that definitively lists the media type\&. If an extension is going to be listed as associateed with this media type, the source must definitively link the media type and extension as well\&. 
