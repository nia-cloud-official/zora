.TH "md_backend_2node__modules_2socks_2docs_2migrating_from_v1" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2socks_2docs_2migrating_from_v1 \- socks 
.PP
 
.SH "Migrating from v1"
.PP
For the most part, migrating from v1 takes minimal effort as v2 still supports factory creation of proxy connections with callback support\&.
.SS "Notable breaking changes"
.IP "\(bu" 2
In an options object, the proxy 'command' is now required and does not default to 'connect'\&.
.IP "\(bu" 2
\fBIn an options object, 'target' is now known as 'destination'\&.\fP
.IP "\(bu" 2
Sockets are no longer paused after a SOCKS connection is made, so socket\&.resume() is no longer required\&. (Please be sure to attach data handlers immediately to the Socket to avoid losing data)\&.
.IP "\(bu" 2
In v2, only the 'connect' command is supported via the factory SocksClient\&.createConnection function\&. (BIND and ASSOCIATE must be used with a SocksClient instance via event handlers)\&.
.IP "\(bu" 2
In v2, the factory SocksClient\&.createConnection function callback is called with a single object rather than separate socket and info object\&.
.IP "\(bu" 2
A SOCKS http/https agent is no longer bundled into the library\&.
.PP
.PP
For informational purposes, here is the original getting started example from v1 converted to work with v2\&.
.SS "Before (v1)"
.PP
.nf
var Socks = require('socks');

var options = {
    proxy: {
        ipaddress: "202\&.101\&.228\&.108",
        port: 1080,
        type: 5
    },
    target: {
        host: "google\&.com",
        port: 80
    },
    command: 'connect'
};

Socks\&.createConnection(options, function(err, socket, info) {
    if (err)
        console\&.log(err);
    else {
        socket\&.write("GET / HTTP/1\&.1\\nHost: google\&.com\\n\\n");
        socket\&.on('data', function(data) {
            console\&.log(data\&.length);
            console\&.log(data);
        });

        // PLEASE NOTE: sockets need to be resumed before any data will come in or out as they are paused right before this callback is fired\&.
        socket\&.resume();

        // 569
        // <Buffer 48 54 54 50 2f 31 2e 31 20 33 30 31 20 4d 6f 76 65 64 20 50 65\&.\&.\&.
    }
});
.fi
.PP
.SS "After (v2)"
.PP
.nf
const SocksClient = require('socks')\&.SocksClient;

let options = {
    proxy: {
        ipaddress: "202\&.101\&.228\&.108",
        port: 1080,
        type: 5
    },
    destination: {
        host: "google\&.com",
        port: 80
    },
    command: 'connect'
};

SocksClient\&.createConnection(options, function(err, result) {
    if (err)
        console\&.log(err);
    else {
        result\&.socket\&.write("GET / HTTP/1\&.1\\nHost: google\&.com\\n\\n");
        result\&.socket\&.on('data', function(data) {
            console\&.log(data\&.length);
            console\&.log(data);
        });

        // 569
        // <Buffer 48 54 54 50 2f 31 2e 31 20 33 30 31 20 4d 6f 76 65 64 20 50 65\&.\&.\&.
    }
});
.fi
.PP
 
