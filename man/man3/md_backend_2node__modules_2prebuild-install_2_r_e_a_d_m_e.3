.TH "md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2prebuild-install_2_r_e_a_d_m_e \- prebuild-install 
.PP
 
.PP
.RS 4
\fBA command line tool to easily install prebuilt binaries for multiple versions of Node\&.js & Electron on a specific platform\&.\fP By default it downloads prebuilt binaries from a GitHub release\&. 
.RE
.PP
.PP
\fR\fP  \fR\fP \fR\fP \fR\fP
.SH "Note"
.PP
**Instead of \fR\fRprebuild\fP\fP paired with \fR\fRprebuild-install\fP\fP, we recommend \fR\fRprebuildify\fP\fP paired with \fR\fRnode-gyp-build\fP\fP\&.**
.PP
With \fRprebuildify\fP, all prebuilt binaries are shipped inside the package that is published to npm, which means there's no need for a separate download step like you find in \fRprebuild\fP\&. The irony of this approach is that it is faster to download all prebuilt binaries for every platform when they are bundled than it is to download a single prebuilt binary as an install script\&.
.PP
Upsides:
.PP
.IP "1." 4
No extra download step, making it more reliable and faster to install\&.
.IP "2." 4
Supports changing runtime versions locally and using the same install between Node\&.js and Electron\&. Reinstalling or rebuilding is not necessary, as all prebuilt binaries are in the npm tarball and the correct one is simply picked on runtime\&.
.IP "3." 4
The \fRnode-gyp-build\fP runtime dependency is dependency-free and will remain so out of principle, because introducing dependencies would negate the shorter install time\&.
.IP "4." 4
Prebuilt binaries work even if npm install scripts are disabled\&.
.IP "5." 4
The npm package checksum covers prebuilt binaries too\&.
.PP
.PP
Downsides:
.PP
.IP "1." 4
The installed npm package is larger on disk\&. Using \fRNode-API\fP alleviates this because Node-API binaries are runtime-agnostic and forward-compatible\&.
.IP "2." 4
Publishing is mildly more complicated, because \fRnpm publish\fP must be done after compiling and fetching prebuilt binaries (typically in CI)\&.
.PP
.SH "Usage"
.PP
Use \fR\fRprebuild\fP\fP to create and upload prebuilt binaries\&. Then change your package\&.json install script to:
.PP
.PP
.nf
{
  "scripts": {
    "install": "prebuild\-install || node\-gyp rebuild"
  }
}
.fi
.PP
.PP
When a consumer then installs your package with npm thus triggering the above install script, \fRprebuild-install\fP will download a suitable prebuilt binary, or exit with a non-zero exit code if there is none, which triggers \fRnode-gyp rebuild\fP in order to build from source\&.
.PP
Options (see below) can be passed to \fRprebuild-install\fP like so:
.PP
.PP
.nf
{
  "scripts": {
    "install": "prebuild\-install \-r napi || node\-gyp rebuild"
  }
}
.fi
.PP
.SS "Help"
.PP
.nf
prebuild\-install [options]

  \-\-download    \-d  [url]       (download prebuilds, no url means github)
  \-\-target      \-t  version     (version to install for)
  \-\-runtime     \-r  runtime     (Node runtime [node, napi or electron] to build or install for, default is node)
  \-\-path        \-p  path        (make a prebuild\-install here)
  \-\-token       \-T  gh\-token    (github token for private repos)
  \-\-arch            arch        (target CPU architecture, see Node OS module docs, default is current arch)
  \-\-platform        platform    (target platform, see Node OS module docs, default is current platform)
  \-\-tag\-prefix <prefix>         (github tag prefix, default is "v")
  \-\-build\-from\-source           (skip prebuild download)
  \-\-verbose                     (log verbosely)
  \-\-libc                        (use provided libc rather than system default)
  \-\-debug                       (set Debug or Release configuration)
  \-\-version                     (print prebuild\-install version and exit)
.fi
.PP
.PP
When \fRprebuild-install\fP is run via an \fRnpm\fP script, options \fR--build-from-source\fP, \fR--debug\fP, \fR--download\fP, \fR--target\fP, \fR--runtime\fP, \fR--arch\fP \fR--platform\fP and \fR--libc\fP may be passed through via arguments given to the \fRnpm\fP command\&.
.PP
Alternatively you can set environment variables \fRnpm_config_build_from_source=true\fP, \fRnpm_config_platform\fP, \fRnpm_config_arch\fP, \fRnpm_config_target\fP \fRnpm_config_runtime\fP and \fRnpm_config_libc\fP\&.
.SS "Libc"
On non-glibc Linux platforms, the Libc name is appended to platform name\&. For example, musl-based environments are called \fRlinuxmusl\fP\&. If \fR--libc=glibc\fP is passed as option, glibc is discarded and platform is called as just \fRlinux\fP\&. This can be used for example to build cross-platform packages on Alpine Linux\&.
.SS "Private Repositories"
\fRprebuild-install\fP supports downloading prebuilds from private GitHub repositories using the \fR-T <github-token>\fP:
.PP
.PP
.nf
$ prebuild\-install \-T <github\-token>
.fi
.PP
.PP
If you don't want to use the token on cli you can put it in \fR~/\&.prebuild-installrc\fP:
.PP
.PP
.nf
token=<github\-token>
.fi
.PP
.PP
Alternatively you can specify it in the \fRprebuild-install_token\fP environment variable\&.
.PP
Note that using a GitHub token uses the API to resolve the correct release meaning that you are subject to the (\fRGitHub Rate Limit\fP)\&.
.SS "Create GitHub Token"
To create a token:
.PP
.IP "\(bu" 2
Go to \fRthis page\fP
.IP "\(bu" 2
Click the \fRGenerate new token\fP button
.IP "\(bu" 2
Give the token a name and click the \fRGenerate token\fP button, see below
.PP
.PP
.PP
The default scopes should be fine\&.
.SS "Custom binaries"
The end user can override binary download location through environment variables in their \&.npmrc file\&. The variable needs to meet the mask \fR% your package name _binary_host\fP or \fR% your package name _binary_host_mirror\fP\&. For example:
.PP
.PP
.nf
leveldown_binary_host=http://overriden\-host\&.com/overriden\-path
.fi
.PP
.PP
Note that the package version subpath and file name will still be appended\&. So if you are installing \fRleveldown@1\&.2\&.3\fP the resulting url will be:
.PP
.PP
.nf
http://overriden\-host\&.com/overriden\-path/v1\&.2\&.3/leveldown\-v1\&.2\&.3\-node\-v57\-win32\-x64\&.tar\&.gz
.fi
.PP
.SS "Local prebuilds"
If you want to use prebuilds from your local filesystem, you can use the \fR% your package name _local_prebuilds\fP \&.npmrc variable to set a path to the folder containing prebuilds\&. For example:
.PP
.PP
.nf
leveldown_local_prebuilds=/path/to/prebuilds
.fi
.PP
.PP
This option will look directly in that folder for bundles created with \fRprebuild\fP, for example:
.PP
.PP
.nf
/path/to/prebuilds/leveldown\-v1\&.2\&.3\-node\-v57\-win32\-x64\&.tar\&.gz
.fi
.PP
.PP
Non-absolute paths resolve relative to the directory of the package invoking prebuild-install, e\&.g\&. for nested dependencies\&.
.SS "Cache"
All prebuilt binaries are cached to minimize traffic\&. So first \fRprebuild-install\fP picks binaries from the cache and if no binary could be found, it will be downloaded\&. Depending on the environment, the cache folder is determined in the following order:
.PP
.IP "\(bu" 2
\fR${npm_config_cache}/_prebuilds\fP
.IP "\(bu" 2
\fR${APP_DATA}/npm-cache/_prebuilds\fP
.IP "\(bu" 2
\fR${HOME}/\&.npm/_prebuilds\fP
.PP
.SH "Install"
.PP
With \fRnpm\fP do:
.PP
.PP
.nf
npm install prebuild\-install
.fi
.PP
.SH "License"
.PP
\fRMIT\fP 
