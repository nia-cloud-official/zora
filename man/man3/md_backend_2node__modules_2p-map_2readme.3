.TH "md_backend_2node__modules_2p-map_2readme" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2p-map_2readme \- p-map \fR\fP 
.PP
 
.PP
.RS 4
Map over promises concurrently 
.RE
.PP
.PP
Useful when you need to run promise-returning & async functions multiple times with different inputs concurrently\&.
.SH "Install"
.PP
.PP
.nf
$ npm install p\-map
.fi
.PP
.SH "Usage"
.PP
.PP
.nf
const pMap = require('p\-map');
const got = require('got');

const sites = [
    getWebsiteFromUsername('https://sindresorhus'), //=> Promise
    'https://ava\&.li',
    'https://github\&.com'
];

(async () => {
    const mapper = async site => {
        const {requestUrl} = await got\&.head(site);
        return requestUrl;
    };

    const result = await pMap(sites, mapper, {concurrency: 2});

    console\&.log(result);
    //=> ['https://sindresorhus\&.com/', 'https://ava\&.li/', 'https://github\&.com/']
})();
.fi
.PP
.SH "API"
.PP
.SS "pMap(input, mapper, options?)"
Returns a \fRPromise\fP that is fulfilled when all promises in \fRinput\fP and ones returned from \fRmapper\fP are fulfilled, or rejects if any of the promises reject\&. The fulfilled value is an \fRArray\fP of the fulfilled values returned from \fRmapper\fP in \fRinput\fP order\&.
.SS "input"
Type: \fRIterable<Promise | unknown>\fP
.PP
Iterated over concurrently in the \fRmapper\fP function\&.
.SS "mapper(element, index)"
Type: \fRFunction\fP
.PP
Expected to return a \fRPromise\fP or value\&.
.SS "options"
Type: \fRobject\fP
.SS "concurrency"
Type: \fRnumber\fP (Integer)\\ Default: \fRInfinity\fP\\ Minimum: \fR1\fP
.PP
Number of concurrently pending promises returned by \fRmapper\fP\&.
.SS "stopOnError"
Type: \fRboolean\fP\\ Default: \fRtrue\fP
.PP
When set to \fRfalse\fP, instead of stopping when a promise rejects, it will wait for all the promises to settle and then reject with an \fRaggregated error\fP containing all the errors from the rejected promises\&.
.SH "p-map for enterprise"
.PP
Available as part of the Tidelift Subscription\&.
.PP
The maintainers of p-map and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications\&. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use\&. \fRLearn more\&.\fP
.SH "Related"
.PP
.IP "\(bu" 2
\fRp-all\fP - Run promise-returning & async functions concurrently with optional limited concurrency
.IP "\(bu" 2
\fRp-filter\fP - Filter promises concurrently
.IP "\(bu" 2
\fRp-times\fP - Run promise-returning & async functions a specific number of times concurrently
.IP "\(bu" 2
\fRp-props\fP - Like \fRPromise\&.all()\fP but for \fRMap\fP and \fRObject\fP
.IP "\(bu" 2
\fRp-map-series\fP - Map over promises serially
.IP "\(bu" 2
\fRp-queue\fP - Promise queue with concurrency control
.IP "\(bu" 2
\fRMoreâ€¦\fP 
.PP

