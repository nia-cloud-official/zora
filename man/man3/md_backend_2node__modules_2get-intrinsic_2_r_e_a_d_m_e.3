.TH "md_backend_2node__modules_2get-intrinsic_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2get-intrinsic_2_r_e_a_d_m_e \- get-intrinsic \*{\fR\fP\*}  
.PP
 \fR\fP \fR\fP \fR\fP \fR\fP [][license-url] \fR\fP
.PP
\fR\fP.PP
Get and robustly cache all JS language-level intrinsics at first require time\&.
.PP
See the syntax described \fRin the JS spec\fP for reference\&.
.SH "Example"
.PP
.PP
.nf
var GetIntrinsic = require('get\-intrinsic');
var assert = require('assert');

// static methods
assert\&.equal(GetIntrinsic('%Math\&.pow%'), Math\&.pow);
assert\&.equal(Math\&.pow(2, 3), 8);
assert\&.equal(GetIntrinsic('%Math\&.pow%')(2, 3), 8);
delete Math\&.pow;
assert\&.equal(GetIntrinsic('%Math\&.pow%')(2, 3), 8);

// instance methods
var arr = [1];
assert\&.equal(GetIntrinsic('%Array\&.prototype\&.push%'), Array\&.prototype\&.push);
assert\&.deepEqual(arr, [1]);

arr\&.push(2);
assert\&.deepEqual(arr, [1, 2]);

GetIntrinsic('%Array\&.prototype\&.push%')\&.call(arr, 3);
assert\&.deepEqual(arr, [1, 2, 3]);

delete Array\&.prototype\&.push;
GetIntrinsic('%Array\&.prototype\&.push%')\&.call(arr, 4);
assert\&.deepEqual(arr, [1, 2, 3, 4]);

// missing features
delete JSON\&.parse; // to simulate a real intrinsic that is missing in the environment
assert\&.throws(() => GetIntrinsic('%JSON\&.parse%'));
assert\&.equal(undefined, GetIntrinsic('%JSON\&.parse%', true));
.fi
.PP
.SH "Tests"
.PP
Simply clone the repo, \fRnpm install\fP, and run \fRnpm test\fP
.SH "Security"
.PP
Please email \fR@ljharb\fP or see https://tidelift.com/security if you have a potential security vulnerability to report\&. 
