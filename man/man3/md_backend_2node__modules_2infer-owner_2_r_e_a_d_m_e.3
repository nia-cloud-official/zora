.TH "md_backend_2node__modules_2infer-owner_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2infer-owner_2_r_e_a_d_m_e \- infer-owner 
.PP
 Infer the owner of a path based on the owner of its nearest existing parent
.SH "USAGE"
.PP
.PP
.nf
const inferOwner = require('infer\-owner')

inferOwner('/some/cache/folder/file')\&.then(owner => {
  // owner is {uid, gid} that should be attached to
  // the /some/cache/folder/file, based on ownership
  // of /some/cache/folder, /some/cache, /some, or /,
  // whichever is the first to exist
})

// same, but not async
const owner = inferOwner\&.sync('/some/cache/folder/file')

// results are cached!  to reset the cache (eg, to change
// permissions for whatever reason), do this:
inferOwner\&.clearCache()
.fi
.PP
.PP
This module endeavors to be as performant as possible\&. Parallel requests for ownership of the same path will only stat the directories one time\&.
.SH "API"
.PP
.IP "\(bu" 2
\fRinferOwner(path) -> Promise<{ uid, gid }>\fP
.PP
If the path exists, return its uid and gid\&. If it does not, look to its parent, then its grandparent, and so on\&.
.IP "\(bu" 2
\fRinferOwner(path) -> { uid, gid }\fP
.PP
Sync form of \fRinferOwner(path)\fP\&.
.IP "\(bu" 2
\fRinferOwner\&.clearCache()\fP
.PP
Delete all cached ownership information and in-flight tracking\&. 
.PP

