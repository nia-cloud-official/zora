.TH "md_backend_2node__modules_2which_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2which_2_r_e_a_d_m_e \- which 
.PP
 Like the unix \fRwhich\fP utility\&.
.PP
Finds the first instance of a specified executable in the PATH environment variable\&. Does not cache the results, so \fRhash -r\fP is not needed when the PATH changes\&.
.SH "USAGE"
.PP
.PP
.nf
var which = require('which')

// async usage
which('node', function (er, resolvedPath) {
  // er is returned if no "node" is found on the PATH
  // if it is found, then the absolute path to the exec is returned
})

// or promise
which('node')\&.then(resolvedPath => { \&.\&.\&. })\&.catch(er => { \&.\&.\&. not found \&.\&.\&. })

// sync usage
// throws if not found
var resolved = which\&.sync('node')

// if nothrow option is used, returns null if not found
resolved = which\&.sync('node', {nothrow: true})

// Pass options to override the PATH and PATHEXT environment vars\&.
which('node', { path: someOtherPath }, function (er, resolved) {
  if (er)
    throw er
  console\&.log('found at %j', resolved)
})
.fi
.PP
.SH "CLI USAGE"
.PP
Same as the BSD \fRwhich(1)\fP binary\&.
.PP
.PP
.nf
usage: which [\-as] program \&.\&.\&.
.fi
.PP
.SH "OPTIONS"
.PP
You may pass an options object as the second argument\&.
.PP
.IP "\(bu" 2
\fRpath\fP: Use instead of the \fRPATH\fP environment variable\&.
.IP "\(bu" 2
\fRpathExt\fP: Use instead of the \fRPATHEXT\fP environment variable\&.
.IP "\(bu" 2
\fRall\fP: Return all matches, instead of just the first one\&. Note that this means the function returns an array of strings instead of a single string\&. 
.PP

