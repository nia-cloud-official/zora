.TH "backend/node_modules/node-gyp/gyp/pylib/gyp/common.py" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
backend/node_modules/node-gyp/gyp/pylib/gyp/common.py
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBgyp\&.common\&.memoize\fP"
.br
.ti -1c
.RI "class \fBgyp\&.common\&.GypError\fP"
.br
.ti -1c
.RI "class \fBgyp\&.common\&.OrderedSet\fP"
.br
.ti -1c
.RI "class \fBgyp\&.common\&.CycleError\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBgyp\fP"
.br
.ti -1c
.RI "namespace \fBgyp\&.common\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBgyp\&.common\&.ExceptionAppend\fP (e, msg)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.FindQualifiedTargets\fP (target, qualified_list)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.ParseQualifiedTarget\fP (target)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.ResolveTarget\fP (build_file, target, toolset)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.BuildFile\fP (fully_qualified_target)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.GetEnvironFallback\fP (var_list, default)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.QualifiedTarget\fP (build_file, target, toolset)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.RelativePath\fP (path, relative_to, follow_path_symlink=True)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.InvertRelativePath\fP (path, toplevel_dir=None)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.FixIfRelativePath\fP (path, relative_to)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.UnrelativePath\fP (path, relative_to)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.EncodePOSIXShellArgument\fP (argument)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.EncodePOSIXShellList\fP (list)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.DeepDependencyTargets\fP (target_dicts, roots)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.BuildFileTargets\fP (target_list, build_file)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.AllTargets\fP (target_list, target_dicts, build_file)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.WriteOnDiff\fP (filename)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.EnsureDirExists\fP (path)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.GetFlavor\fP (params)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.CopyTool\fP (flavor, out_path, generator_flags={})"
.br
.ti -1c
.RI "\fBgyp\&.common\&.uniquer\fP (seq, idfun=lambda x:x)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.TopologicallySorted\fP (graph, get_edges)"
.br
.ti -1c
.RI "\fBgyp\&.common\&.CrossCompileRequested\fP ()"
.br
.ti -1c
.RI "\fBgyp\&.common\&.IsCygwin\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBgyp\&.common\&._quote\fP = re\&.compile('[\\t\\n #$%&'()*;<=>?[{|}~]|^$')"
.br
.ti -1c
.RI "\fBgyp\&.common\&._escape\fP = re\&.compile(r'(['\\\\`])')"
.br
.ti -1c
.RI "\fBgyp\&.common\&.tmp_path\fP"
.br
.ti -1c
.RI "\fBgyp\&.common\&.tmp_file\fP"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
