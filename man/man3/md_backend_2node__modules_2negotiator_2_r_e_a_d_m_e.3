.TH "md_backend_2node__modules_2negotiator_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2negotiator_2_r_e_a_d_m_e \- negotiator 
.PP
 \fR\fP \fR\fP \fR\fP \fR\fP \fR\fP
.PP
An HTTP content negotiator for Node\&.js
.SH "Installation"
.PP
.PP
.nf
$ npm install negotiator
.fi
.PP
.SH "API"
.PP
.PP
.nf
var Negotiator = require('negotiator')
.fi
.PP
.SS "Accept Negotiation"
.PP
.nf
availableMediaTypes = ['text/html', 'text/plain', 'application/json']

// The negotiator constructor receives a request object
negotiator = new Negotiator(request)

// Let's say Accept header is 'text/html, application/*;q=0\&.2, image/jpeg;q=0\&.8'

negotiator\&.mediaTypes()
// \-> ['text/html', 'image/jpeg', 'application/*']

negotiator\&.mediaTypes(availableMediaTypes)
// \-> ['text/html', 'application/json']

negotiator\&.mediaType(availableMediaTypes)
// \-> 'text/html'
.fi
.PP
.PP
You can check a working example at \fRexamples/accept\&.js\fP\&.
.SS "Methods"
.SS "mediaType()"
Returns the most preferred media type from the client\&.
.SS "mediaType(availableMediaType)"
Returns the most preferred media type from a list of available media types\&.
.SS "mediaTypes()"
Returns an array of preferred media types ordered by the client preference\&.
.SS "mediaTypes(availableMediaTypes)"
Returns an array of preferred media types ordered by priority from a list of available media types\&.
.SS "Accept-Language Negotiation"
.PP
.nf
negotiator = new Negotiator(request)

availableLanguages = ['en', 'es', 'fr']

// Let's say Accept\-Language header is 'en;q=0\&.8, es, pt'

negotiator\&.languages()
// \-> ['es', 'pt', 'en']

negotiator\&.languages(availableLanguages)
// \-> ['es', 'en']

language = negotiator\&.language(availableLanguages)
// \-> 'es'
.fi
.PP
.PP
You can check a working example at \fRexamples/language\&.js\fP\&.
.SS "Methods"
.SS "language()"
Returns the most preferred language from the client\&.
.SS "language(availableLanguages)"
Returns the most preferred language from a list of available languages\&.
.SS "languages()"
Returns an array of preferred languages ordered by the client preference\&.
.SS "languages(availableLanguages)"
Returns an array of preferred languages ordered by priority from a list of available languages\&.
.SS "Accept-Charset Negotiation"
.PP
.nf
availableCharsets = ['utf\-8', 'iso\-8859\-1', 'iso\-8859\-5']

negotiator = new Negotiator(request)

// Let's say Accept\-Charset header is 'utf\-8, iso\-8859\-1;q=0\&.8, utf\-7;q=0\&.2'

negotiator\&.charsets()
// \-> ['utf\-8', 'iso\-8859\-1', 'utf\-7']

negotiator\&.charsets(availableCharsets)
// \-> ['utf\-8', 'iso\-8859\-1']

negotiator\&.charset(availableCharsets)
// \-> 'utf\-8'
.fi
.PP
.PP
You can check a working example at \fRexamples/charset\&.js\fP\&.
.SS "Methods"
.SS "charset()"
Returns the most preferred charset from the client\&.
.SS "charset(availableCharsets)"
Returns the most preferred charset from a list of available charsets\&.
.SS "charsets()"
Returns an array of preferred charsets ordered by the client preference\&.
.SS "charsets(availableCharsets)"
Returns an array of preferred charsets ordered by priority from a list of available charsets\&.
.SS "Accept-Encoding Negotiation"
.PP
.nf
availableEncodings = ['identity', 'gzip']

negotiator = new Negotiator(request)

// Let's say Accept\-Encoding header is 'gzip, compress;q=0\&.2, identity;q=0\&.5'

negotiator\&.encodings()
// \-> ['gzip', 'identity', 'compress']

negotiator\&.encodings(availableEncodings)
// \-> ['gzip', 'identity']

negotiator\&.encoding(availableEncodings)
// \-> 'gzip'
.fi
.PP
.PP
You can check a working example at \fRexamples/encoding\&.js\fP\&.
.SS "Methods"
.SS "encoding()"
Returns the most preferred encoding from the client\&.
.SS "encoding(availableEncodings)"
Returns the most preferred encoding from a list of available encodings\&.
.SS "encodings()"
Returns an array of preferred encodings ordered by the client preference\&.
.SS "encodings(availableEncodings)"
Returns an array of preferred encodings ordered by priority from a list of available encodings\&.
.SH "See Also"
.PP
The \fRaccepts\fP module builds on this module and provides an alternative interface, mime type validation, and more\&.
.SH "License"
.PP
[MIT](LICENSE) 
