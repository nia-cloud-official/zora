.TH "md_backend_2node__modules_2minipass-sized_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2minipass-sized_2_r_e_a_d_m_e \- minipass-sized 
.PP
 A Minipass stream that raises an error if you get a different number of bytes than expected\&.
.SH "USAGE"
.PP
Use just like any old \fRminipass\fP stream, but provide a \fRsize\fP option to the constructor\&.
.PP
The \fRsize\fP option must be a positive integer, smaller than \fRNumber\&.MAX_SAFE_INTEGER\fP\&.
.PP
.PP
.nf
const MinipassSized = require('minipass\-sized')
// figure out how much data you expect to get
const expectedSize = +headers['content\-length']
const stream = new MinipassSized({ size: expectedSize })
stream\&.on('error', er => {
  // if it's the wrong size, then this will raise an error with
  // { found: <number>, expect: <number>, code: 'EBADSIZE' }
})
response\&.pipe(stream)
.fi
.PP
.PP
Caveats: this does not work with \fRobjectMode\fP streams, and will throw a \fRTypeError\fP from the constructor if the size argument is missing or invalid\&. 
