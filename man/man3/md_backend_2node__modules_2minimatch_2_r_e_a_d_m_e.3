.TH "md_backend_2node__modules_2minimatch_2_r_e_a_d_m_e" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_backend_2node__modules_2minimatch_2_r_e_a_d_m_e \- minimatch 
.PP
 A minimal matching utility\&.
.PP
\fR\fP.PP
This is the matching library used internally by npm\&.
.PP
It works by converting glob expressions into JavaScript \fRRegExp\fP objects\&.
.SH "Usage"
.PP
.PP
.nf
var minimatch = require("minimatch")

minimatch("bar\&.foo", "*\&.foo") // true!
minimatch("bar\&.foo", "*\&.bar") // false!
minimatch("bar\&.foo", "*\&.+(bar|foo)", { debug: true }) // true, and noisy!
.fi
.PP
.SH "Features"
.PP
Supports these glob features:
.PP
.IP "\(bu" 2
Brace Expansion
.IP "\(bu" 2
Extended glob matching
.IP "\(bu" 2
'Globstar' \fR**\fP matching
.PP
.PP
See:
.PP
.IP "\(bu" 2
\fRman sh\fP
.IP "\(bu" 2
\fRman bash\fP
.IP "\(bu" 2
\fRman 3 fnmatch\fP
.IP "\(bu" 2
\fRman 5 gitignore\fP
.PP
.SH "Minimatch Class"
.PP
Create a minimatch object by instantiating the \fRminimatch\&.Minimatch\fP class\&.
.PP
.PP
.nf
var Minimatch = require("minimatch")\&.Minimatch
var mm = new Minimatch(pattern, options)
.fi
.PP
.SS "Properties"
.IP "\(bu" 2
\fRpattern\fP The original pattern the minimatch object represents\&.
.IP "\(bu" 2
\fRoptions\fP The options supplied to the constructor\&.
.IP "\(bu" 2
\fRset\fP A 2-dimensional array of regexp or string expressions\&. Each row in the array corresponds to a brace-expanded pattern\&. Each item in the row corresponds to a single path-part\&. For example, the pattern \fR{a,b/c}/d\fP would expand to a set of patterns like: 
.PP
.nf
  [ [ a, d ]
  , [ b, c, d ] ]

.fi
.PP
 If a portion of the pattern doesn't have any 'magic' in it (that is, it's something like \fR'foo'\fP rather than \fRfo*o?\fP), then it will be left as a string rather than converted to a regular expression\&.
.IP "\(bu" 2
\fRregexp\fP Created by the \fRmakeRe\fP method\&. A single regular expression expressing the entire pattern\&. This is useful in cases where you wish to use the pattern somewhat like \fRfnmatch(3)\fP with \fRFNM_PATH\fP enabled\&.
.IP "\(bu" 2
\fRnegate\fP True if the pattern is negated\&.
.IP "\(bu" 2
\fRcomment\fP True if the pattern is a comment\&.
.IP "\(bu" 2
\fRempty\fP True if the pattern is \fR''\fP\&.
.PP
.SS "Methods"
.IP "\(bu" 2
\fRmakeRe\fP Generate the \fRregexp\fP member if necessary, and return it\&. Will return \fRfalse\fP if the pattern is invalid\&.
.IP "\(bu" 2
\fRmatch(fname)\fP Return true if the filename matches the pattern, or false otherwise\&.
.IP "\(bu" 2
\fRmatchOne(fileArray, patternArray, partial)\fP Take a \fR/\fP-split filename, and match it against a single row in the \fRregExpSet\fP\&. This method is mainly for internal use, but is exposed so that it can be used by a glob-walker that needs to avoid excessive filesystem calls\&.
.PP
.PP
All other methods are internal, and will be called as necessary\&.
.SS "minimatch(path, pattern, options)"
Main export\&. Tests a path against the pattern using the options\&.
.PP
.PP
.nf
var isJS = minimatch(file, "*\&.js", { matchBase: true })
.fi
.PP
.SS "minimatch\&.filter(pattern, options)"
Returns a function that tests its supplied argument, suitable for use with \fRArray\&.filter\fP\&. Example:
.PP
.PP
.nf
var javascripts = fileList\&.filter(minimatch\&.filter("*\&.js", {matchBase: true}))
.fi
.PP
.SS "minimatch\&.match(list, pattern, options)"
Match against the list of files, in the style of fnmatch or glob\&. If nothing is matched, and options\&.nonull is set, then return a list containing the pattern itself\&.
.PP
.PP
.nf
var javascripts = minimatch\&.match(fileList, "*\&.js", {matchBase: true}))
.fi
.PP
.SS "minimatch\&.makeRe(pattern, options)"
Make a regular expression object from the pattern\&.
.SH "Options"
.PP
All options are \fRfalse\fP by default\&.
.SS "debug"
Dump a ton of stuff to stderr\&.
.SS "nobrace"
Do not expand \fR{a,b}\fP and \fR{1\&.\&.3}\fP brace sets\&.
.SS "noglobstar"
Disable \fR**\fP matching against multiple folder names\&.
.SS "dot"
Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot\&.
.PP
Note that by default, \fRa/**/b\fP will \fBnot\fP match \fRa/\&.d/b\fP, unless \fRdot\fP is set\&.
.SS "noext"
Disable 'extglob' style patterns like \fR+(a|b)\fP\&.
.SS "nocase"
Perform a case-insensitive match\&.
.SS "nonull"
When a match is not found by \fRminimatch\&.match\fP, return a list containing the pattern itself if this option is set\&. When not set, an empty list is returned if there are no matches\&.
.SS "matchBase"
If set, then patterns without slashes will be matched against the basename of the path if it contains slashes\&. For example, \fRa?b\fP would match the path \fR/xyz/123/acb\fP, but not \fR/xyz/acb/123\fP\&.
.SS "nocomment"
Suppress the behavior of treating \fR#\fP at the start of a pattern as a comment\&.
.SS "nonegate"
Suppress the behavior of treating a leading \fR!\fP character as negation\&.
.SS "flipNegate"
Returns from negate expressions the same as if they were not negated\&. (Ie, true on a hit, false on a miss\&.)
.SS "partial"
Compare a partial path to a pattern\&. As long as the parts of the path that are present are not contradicted by the pattern, it will be treated as a match\&. This is useful in applications where you're walking through a folder structure, and don't yet have the full path, but want to ensure that you do not walk down paths that can never be a match\&.
.PP
For example,
.PP
.PP
.nf
minimatch('/a/b', '/a/*/c/d', { partial: true })  // true, might be /a/b/c/d
minimatch('/a/b', '/**/d', { partial: true })     // true, might be /a/b/\&.\&.\&./d
minimatch('/x/y/z', '/a/**/z', { partial: true }) // false, because x !== a
.fi
.PP
.SS "allowWindowsEscape"
Windows path separator \fR\\\fP is by default converted to \fR/\fP, which prohibits the usage of \fR\\\fP as a escape character\&. This flag skips that behavior and allows using the escape character\&.
.SH "Comparisons to other fnmatch/glob implementations"
.PP
While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between minimatch and other implementations, and are intentional\&.
.PP
If the pattern starts with a \fR!\fP character, then it is negated\&. Set the \fRnonegate\fP flag to suppress this behavior, and treat leading \fR!\fP characters normally\&. This is perhaps relevant if you wish to start the pattern with a negative extglob pattern like \fR!(a|B)\fP\&. Multiple \fR!\fP characters at the start of a pattern will negate the pattern multiple times\&.
.PP
If a pattern starts with \fR#\fP, then it is treated as a comment, and will not match anything\&. Use \fR\\#\fP to match a literal \fR#\fP at the start of a line, or set the \fRnocomment\fP flag to suppress this behavior\&.
.PP
The double-star character \fR**\fP is supported by default, unless the \fRnoglobstar\fP flag is set\&. This is supported in the manner of bsdglob and bash 4\&.1, where \fR**\fP only has special significance if it is the only thing in a path part\&. That is, \fRa/**/b\fP will match \fRa/x/y/b\fP, but \fRa/**b\fP will not\&.
.PP
If an escaped pattern has no matches, and the \fRnonull\fP flag is set, then minimatch\&.match returns the pattern as-provided, rather than interpreting the character escapes\&. For example, \fRminimatch\&.match([], '\\\\*a\\\\?')\fP will return \fR'\\\\*a\\\\?'\fP rather than \fR'*a?'\fP\&. This is akin to setting the \fRnullglob\fP option in bash, except that it does not resolve escaped pattern characters\&.
.PP
If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern\&. Thus, a pattern like \fR+(a|{b),c)}\fP, which would not be valid in bash or zsh, is expanded \fBfirst\fP into the set of \fR+(a|b)\fP and \fR+(a|c)\fP, and those patterns are checked for validity\&. Since those two are valid, matching proceeds\&. 
