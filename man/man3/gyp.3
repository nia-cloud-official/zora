.TH "gyp" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gyp
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBcommon\fP"
.br
.ti -1c
.RI "namespace \fBcommon_test\fP"
.br
.ti -1c
.RI "namespace \fBeasy_xml\fP"
.br
.ti -1c
.RI "namespace \fBeasy_xml_test\fP"
.br
.ti -1c
.RI "namespace \fBflock_tool\fP"
.br
.ti -1c
.RI "namespace \fBgenerator\fP"
.br
.ti -1c
.RI "namespace \fBinput\fP"
.br
.ti -1c
.RI "namespace \fBinput_test\fP"
.br
.ti -1c
.RI "namespace \fBmac_tool\fP"
.br
.ti -1c
.RI "namespace \fBmsvs_emulation\fP"
.br
.ti -1c
.RI "namespace \fBMSVSNew\fP"
.br
.ti -1c
.RI "namespace \fBMSVSProject\fP"
.br
.ti -1c
.RI "namespace \fBMSVSSettings\fP"
.br
.ti -1c
.RI "namespace \fBMSVSSettings_test\fP"
.br
.ti -1c
.RI "namespace \fBMSVSToolFile\fP"
.br
.ti -1c
.RI "namespace \fBMSVSUserFile\fP"
.br
.ti -1c
.RI "namespace \fBMSVSUtil\fP"
.br
.ti -1c
.RI "namespace \fBMSVSVersion\fP"
.br
.ti -1c
.RI "namespace \fBninja_syntax\fP"
.br
.ti -1c
.RI "namespace \fBsimple_copy\fP"
.br
.ti -1c
.RI "namespace \fBwin_tool\fP"
.br
.ti -1c
.RI "namespace \fBxcode_emulation\fP"
.br
.ti -1c
.RI "namespace \fBxcode_ninja\fP"
.br
.ti -1c
.RI "namespace \fBxcodeproj_file\fP"
.br
.ti -1c
.RI "namespace \fBxml_fix\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBRegeneratableOptionParser\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBDebugOutput\fP (mode, message, *args)"
.br
.ti -1c
.RI "\fBFindBuildFiles\fP ()"
.br
.ti -1c
.RI "\fBLoad\fP (build_files, format, default_variables={}, includes=[], depth='\&.', params=None, check=False, circular_check=True)"
.br
.ti -1c
.RI "\fBNameValueListToDict\fP (name_value_list)"
.br
.ti -1c
.RI "\fBShlexEnv\fP (env_name)"
.br
.ti -1c
.RI "\fBFormatOpt\fP (opt, value)"
.br
.ti -1c
.RI "\fBRegenerateAppendFlag\fP (flag, values, predicate, env_name, options)"
.br
.ti -1c
.RI "\fBRegenerateFlags\fP (options)"
.br
.ti -1c
.RI "\fBgyp_main\fP (args)"
.br
.ti -1c
.RI "\fBmain\fP (args)"
.br
.ti -1c
.RI "\fBscript_main\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "dict \fBdebug\fP = {}"
.br
.ti -1c
.RI "str \fBDEBUG_GENERAL\fP = 'general'"
.br
.ti -1c
.RI "str \fBDEBUG_VARIABLES\fP = 'variables'"
.br
.ti -1c
.RI "str \fBDEBUG_INCLUDES\fP = 'includes'"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "gyp\&.DebugOutput ( mode,  message, * args)"

.PP
Definition at line \fB27\fP of file \fB__init__\&.py\fP\&.
.SS "gyp\&.FindBuildFiles ()"

.PP
Definition at line \fB44\fP of file \fB__init__\&.py\fP\&.
.SS "gyp\&.FormatOpt ( opt,  value)"

.PP
Definition at line \fB186\fP of file \fB__init__\&.py\fP\&.
.SS "gyp\&.gyp_main ( args)"

.PP
Definition at line \fB316\fP of file \fB__init__\&.py\fP\&.
.SS "gyp\&.Load ( build_files,  format,  default_variables = \fR{}\fP,  includes = \fR[]\fP,  depth = \fR'\&.'\fP,  params = \fRNone\fP,  check = \fRFalse\fP,  circular_check = \fRTrue\fP)"

.PP
.nf
Loads one or more specified build files\&.
default_variables and includes will be copied before use\&.
Returns the generator for the specified format and the
data returned by loading the specified build files\&.

.fi
.PP
 
.PP
Definition at line \fB54\fP of file \fB__init__\&.py\fP\&.
.SS "gyp\&.main ( args)"

.PP
Definition at line \fB652\fP of file \fB__init__\&.py\fP\&.
.SS "gyp\&.NameValueListToDict ( name_value_list)"

.PP
.nf
Takes an array of strings of the form 'NAME=VALUE' and creates a dictionary
of the pairs\&.  If a string is simply NAME, then the value in the dictionary
is set to True\&.  If VALUE can be converted to an integer, it is\&.

.fi
.PP
 
.PP
Definition at line \fB156\fP of file \fB__init__\&.py\fP\&.
.SS "gyp\&.RegenerateAppendFlag ( flag,  values,  predicate,  env_name,  options)"

.PP
.nf
Regenerate a list of command line flags, for an option of action='append'\&.

The |env_name|, if given, is checked in the environment and used to generate
an initial list of options, then the options that were specified on the
command line (given in |values|) are appended\&.  This matches the handling of
environment variables and command line flags where command line flags override
the environment, while not requiring the environment to be set when the flags
are used again\&.

.fi
.PP
 
.PP
Definition at line \fB192\fP of file \fB__init__\&.py\fP\&.
.SS "gyp\&.RegenerateFlags ( options)"

.PP
.nf
Given a parsed options object, and taking the environment variables into
account, returns a list of flags that should regenerate an equivalent options
object (even in the absence of the environment variables\&.)

Any path options will be normalized relative to depth\&.

The format flag is not included, as it is assumed the calling generator will
set that as appropriate\&.

.fi
.PP
 
.PP
Definition at line \fB215\fP of file \fB__init__\&.py\fP\&.
.SS "gyp\&.script_main ()"

.PP
Definition at line \fB661\fP of file \fB__init__\&.py\fP\&.
.SS "gyp\&.ShlexEnv ( env_name)"

.PP
Definition at line \fB179\fP of file \fB__init__\&.py\fP\&.
.SH "Variable Documentation"
.PP 
.SS "dict gyp\&.debug = {}"

.PP
Definition at line \fB19\fP of file \fB__init__\&.py\fP\&.
.SS "str gyp\&.DEBUG_GENERAL = 'general'"

.PP
Definition at line \fB22\fP of file \fB__init__\&.py\fP\&.
.SS "str gyp\&.DEBUG_INCLUDES = 'includes'"

.PP
Definition at line \fB24\fP of file \fB__init__\&.py\fP\&.
.SS "str gyp\&.DEBUG_VARIABLES = 'variables'"

.PP
Definition at line \fB23\fP of file \fB__init__\&.py\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
